// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AlexNet_Cifar10_Keras_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer7_out_dout,
        layer7_out_num_data_valid,
        layer7_out_fifo_cap,
        layer7_out_empty_n,
        layer7_out_read,
        layer10_out_din,
        layer10_out_num_data_valid,
        layer10_out_fifo_cap,
        layer10_out_full_n,
        layer10_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] layer7_out_dout;
input  [8:0] layer7_out_num_data_valid;
input  [8:0] layer7_out_fifo_cap;
input   layer7_out_empty_n;
output   layer7_out_read;
output  [63:0] layer10_out_din;
input  [8:0] layer10_out_num_data_valid;
input  [8:0] layer10_out_fifo_cap;
input   layer10_out_full_n;
output   layer10_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer7_out_read;
reg layer10_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_89_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer7_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer10_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] out_data_data_fu_180_p3;
reg   [14:0] out_data_data_reg_266;
wire   [14:0] out_data_data_14_fu_194_p3;
reg   [14:0] out_data_data_14_reg_271;
wire   [14:0] out_data_data_16_fu_208_p3;
reg   [14:0] out_data_data_16_reg_276;
wire   [14:0] out_data_data_18_fu_222_p3;
reg   [14:0] out_data_data_18_reg_281;
reg   [8:0] i_fu_64;
wire   [8:0] i_16_fu_95_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_15;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_data_fu_106_p1;
wire   [0:0] icmp_ln1695_fu_174_p2;
wire   [14:0] trunc_ln145_62_fu_110_p1;
wire   [15:0] in_data_data_14_fu_134_p4;
wire   [0:0] icmp_ln1695_71_fu_188_p2;
wire   [14:0] trunc_ln_fu_144_p4;
wire   [15:0] in_data_data_15_fu_114_p4;
wire   [0:0] icmp_ln1695_72_fu_202_p2;
wire   [14:0] trunc_ln44_5_fu_154_p4;
wire   [15:0] in_data_data_16_fu_124_p4;
wire   [0:0] icmp_ln1695_73_fu_216_p2;
wire   [14:0] trunc_ln44_6_fu_164_p4;
wire   [15:0] zext_ln45_8_fu_236_p1;
wire   [15:0] zext_ln45_7_fu_233_p1;
wire   [15:0] zext_ln45_fu_230_p1;
wire   [62:0] or_ln174_s_fu_239_p5;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_118;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

AlexNet_Cifar10_Keras_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_118)) begin
        if ((icmp_ln41_fu_89_p2 == 1'd0)) begin
            i_fu_64 <= i_16_fu_95_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        out_data_data_14_reg_271 <= out_data_data_14_fu_194_p3;
        out_data_data_16_reg_276 <= out_data_data_16_fu_208_p3;
        out_data_data_18_reg_281 <= out_data_data_18_fu_222_p3;
        out_data_data_reg_266 <= out_data_data_fu_180_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_89_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_15 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_15 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer10_out_blk_n = layer10_out_full_n;
    end else begin
        layer10_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer10_out_write = 1'b1;
    end else begin
        layer10_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer7_out_blk_n = layer7_out_empty_n;
    end else begin
        layer7_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer7_out_read = 1'b1;
    end else begin
        layer7_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer7_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer7_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer7_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer7_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer10_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_118 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_16_fu_95_p2 = (ap_sig_allocacmp_i_15 + 9'd1);

assign icmp_ln1695_71_fu_188_p2 = (($signed(in_data_data_14_fu_134_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_72_fu_202_p2 = (($signed(in_data_data_15_fu_114_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_73_fu_216_p2 = (($signed(in_data_data_16_fu_124_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_fu_174_p2 = (($signed(in_data_data_fu_106_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_89_p2 = ((ap_sig_allocacmp_i_15 == 9'd256) ? 1'b1 : 1'b0);

assign in_data_data_14_fu_134_p4 = {{layer7_out_dout[31:16]}};

assign in_data_data_15_fu_114_p4 = {{layer7_out_dout[47:32]}};

assign in_data_data_16_fu_124_p4 = {{layer7_out_dout[63:48]}};

assign in_data_data_fu_106_p1 = layer7_out_dout[15:0];

assign layer10_out_din = or_ln174_s_fu_239_p5;

assign or_ln174_s_fu_239_p5 = {{{{out_data_data_18_reg_281}, {zext_ln45_8_fu_236_p1}}, {zext_ln45_7_fu_233_p1}}, {zext_ln45_fu_230_p1}};

assign out_data_data_14_fu_194_p3 = ((icmp_ln1695_71_fu_188_p2[0:0] == 1'b1) ? trunc_ln_fu_144_p4 : 15'd0);

assign out_data_data_16_fu_208_p3 = ((icmp_ln1695_72_fu_202_p2[0:0] == 1'b1) ? trunc_ln44_5_fu_154_p4 : 15'd0);

assign out_data_data_18_fu_222_p3 = ((icmp_ln1695_73_fu_216_p2[0:0] == 1'b1) ? trunc_ln44_6_fu_164_p4 : 15'd0);

assign out_data_data_fu_180_p3 = ((icmp_ln1695_fu_174_p2[0:0] == 1'b1) ? trunc_ln145_62_fu_110_p1 : 15'd0);

assign start_out = real_start;

assign trunc_ln145_62_fu_110_p1 = layer7_out_dout[14:0];

assign trunc_ln44_5_fu_154_p4 = {{layer7_out_dout[46:32]}};

assign trunc_ln44_6_fu_164_p4 = {{layer7_out_dout[62:48]}};

assign trunc_ln_fu_144_p4 = {{layer7_out_dout[30:16]}};

assign zext_ln45_7_fu_233_p1 = out_data_data_14_reg_271;

assign zext_ln45_8_fu_236_p1 = out_data_data_16_reg_276;

assign zext_ln45_fu_230_p1 = out_data_data_reg_266;

endmodule //AlexNet_Cifar10_Keras_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config10_s
