// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer34_out_dout,
        layer34_out_num_data_valid,
        layer34_out_fifo_cap,
        layer34_out_empty_n,
        layer34_out_read,
        layer36_out_TDATA,
        layer36_out_TVALID,
        layer36_out_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [159:0] layer34_out_dout;
input  [1:0] layer34_out_num_data_valid;
input  [1:0] layer34_out_fifo_cap;
input   layer34_out_empty_n;
output   layer34_out_read;
output  [159:0] layer36_out_TDATA;
output   layer36_out_TVALID;
input   layer36_out_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer34_out_read;
reg layer36_out_TVALID;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [16:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [16:0] exp_table_q4;
wire   [9:0] exp_table_address5;
reg    exp_table_ce5;
wire   [16:0] exp_table_q5;
wire   [9:0] exp_table_address6;
reg    exp_table_ce6;
wire   [16:0] exp_table_q6;
wire   [9:0] exp_table_address7;
reg    exp_table_ce7;
wire   [16:0] exp_table_q7;
wire   [9:0] exp_table_address8;
reg    exp_table_ce8;
wire   [16:0] exp_table_q8;
wire   [9:0] exp_table_address9;
reg    exp_table_ce9;
wire   [16:0] exp_table_q9;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg    layer34_out_blk_n;
reg    layer36_out_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire  signed [15:0] in_pack_data_fu_654_p1;
reg  signed [15:0] in_pack_data_reg_2439;
reg  signed [15:0] data_array_V_8_reg_2445;
reg  signed [15:0] data_array_V_9_reg_2452;
wire  signed [15:0] in_pack_data_4_fu_678_p4;
reg  signed [15:0] in_pack_data_4_reg_2459;
wire  signed [15:0] in_pack_data_5_fu_688_p4;
reg  signed [15:0] in_pack_data_5_reg_2465;
wire  signed [15:0] in_pack_data_6_fu_698_p4;
reg  signed [15:0] in_pack_data_6_reg_2471;
wire  signed [15:0] data_array_V_4_fu_708_p4;
reg  signed [15:0] data_array_V_4_reg_2477;
wire  signed [15:0] data_array_V_5_fu_718_p4;
reg  signed [15:0] data_array_V_5_reg_2483;
wire  signed [15:0] data_array_V_6_fu_728_p4;
reg  signed [15:0] data_array_V_6_reg_2489;
wire  signed [15:0] data_array_V_7_fu_738_p4;
reg  signed [15:0] data_array_V_7_reg_2495;
wire   [0:0] icmp_ln1697_fu_748_p2;
reg   [0:0] icmp_ln1697_reg_2501;
wire   [0:0] icmp_ln1697_1_fu_754_p2;
reg   [0:0] icmp_ln1697_1_reg_2506;
wire   [0:0] icmp_ln1697_3_fu_760_p2;
reg   [0:0] icmp_ln1697_3_reg_2511;
wire   [0:0] icmp_ln1697_4_fu_766_p2;
reg   [0:0] icmp_ln1697_4_reg_2516;
wire   [15:0] select_ln65_6_fu_868_p3;
reg   [15:0] select_ln65_6_reg_2521;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1697_7_fu_876_p2;
reg   [0:0] icmp_ln1697_7_reg_2527;
wire    ap_CS_fsm_state3;
reg   [16:0] exp_res_V_reg_2582;
wire    ap_CS_fsm_state4;
reg   [16:0] exp_res_V_10_reg_2587;
reg   [16:0] exp_res_V_11_reg_2592;
reg   [16:0] exp_res_V_12_reg_2597;
reg   [16:0] exp_res_V_13_reg_2602;
reg   [16:0] exp_res_V_14_reg_2607;
reg   [16:0] exp_res_V_15_reg_2612;
reg   [16:0] exp_res_V_16_reg_2617;
reg   [16:0] exp_res_V_17_reg_2622;
reg   [16:0] exp_res_V_18_reg_2629;
wire  signed [17:0] lhs_6_fu_1839_p3;
reg  signed [17:0] lhs_6_reg_2636;
wire  signed [17:0] rhs_6_fu_2033_p3;
reg  signed [17:0] rhs_6_reg_2642;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln225_fu_1369_p1;
wire   [63:0] zext_ln225_1_fu_1400_p1;
wire   [63:0] zext_ln225_2_fu_1431_p1;
wire   [63:0] zext_ln225_3_fu_1462_p1;
wire   [63:0] zext_ln225_4_fu_1493_p1;
wire   [63:0] zext_ln225_5_fu_1524_p1;
wire   [63:0] zext_ln225_6_fu_1555_p1;
wire   [63:0] zext_ln225_7_fu_1586_p1;
wire   [63:0] zext_ln225_8_fu_1617_p1;
wire   [63:0] zext_ln225_9_fu_1648_p1;
wire   [63:0] zext_ln235_fu_2255_p1;
reg    ap_block_state1;
wire  signed [17:0] mul_ln1316_fu_283_p0;
wire  signed [25:0] sext_ln1319_fu_2260_p1;
wire   [16:0] mul_ln1316_fu_283_p1;
wire  signed [17:0] mul_ln1316_2_fu_284_p0;
wire   [16:0] mul_ln1316_2_fu_284_p1;
wire  signed [17:0] mul_ln1316_4_fu_285_p0;
wire   [16:0] mul_ln1316_4_fu_285_p1;
wire  signed [17:0] mul_ln1316_6_fu_286_p0;
wire   [16:0] mul_ln1316_6_fu_286_p1;
wire  signed [17:0] mul_ln1316_3_fu_287_p0;
wire   [16:0] mul_ln1316_3_fu_287_p1;
wire  signed [17:0] mul_ln1316_7_fu_288_p0;
wire   [16:0] mul_ln1316_7_fu_288_p1;
wire  signed [17:0] mul_ln1316_5_fu_289_p0;
wire   [16:0] mul_ln1316_5_fu_289_p1;
wire  signed [17:0] mul_ln1316_1_fu_290_p0;
wire   [16:0] mul_ln1316_1_fu_290_p1;
wire  signed [17:0] mul_ln1316_8_fu_291_p0;
wire   [16:0] mul_ln1316_8_fu_291_p1;
wire  signed [17:0] mul_ln1316_9_fu_292_p0;
wire   [16:0] mul_ln1316_9_fu_292_p1;
wire   [0:0] xor_ln1697_fu_772_p2;
wire   [0:0] xor_ln1697_1_fu_783_p2;
wire   [15:0] select_ln65_fu_777_p3;
wire   [15:0] select_ln65_1_fu_788_p3;
wire   [0:0] icmp_ln1697_2_fu_794_p2;
wire   [0:0] xor_ln1697_2_fu_800_p2;
wire   [0:0] xor_ln1697_3_fu_814_p2;
wire   [0:0] xor_ln1697_4_fu_825_p2;
wire   [15:0] select_ln65_3_fu_819_p3;
wire   [15:0] select_ln65_4_fu_830_p3;
wire   [0:0] icmp_ln1697_5_fu_836_p2;
wire   [0:0] xor_ln1697_5_fu_842_p2;
wire   [15:0] select_ln65_2_fu_806_p3;
wire   [15:0] select_ln65_5_fu_848_p3;
wire   [0:0] icmp_ln1697_6_fu_856_p2;
wire   [0:0] xor_ln1697_6_fu_862_p2;
wire   [0:0] xor_ln1697_7_fu_880_p2;
wire   [15:0] select_ln65_7_fu_885_p3;
wire   [0:0] icmp_ln1697_8_fu_891_p2;
wire   [0:0] xor_ln1697_8_fu_896_p2;
wire   [15:0] x_max_V_fu_902_p3;
wire  signed [16:0] sext_ln1394_fu_909_p1;
wire  signed [16:0] sext_ln1394_1_fu_912_p1;
wire   [16:0] ret_V_fu_916_p2;
wire   [0:0] p_Result_44_fu_922_p3;
wire   [0:0] p_Result_45_fu_930_p3;
wire   [0:0] xor_ln941_fu_938_p2;
wire  signed [16:0] sext_ln1394_2_fu_956_p1;
wire   [16:0] ret_V_1_fu_959_p2;
wire   [0:0] p_Result_46_fu_965_p3;
wire   [0:0] p_Result_47_fu_973_p3;
wire   [0:0] xor_ln941_1_fu_981_p2;
wire  signed [16:0] sext_ln1394_3_fu_999_p1;
wire   [16:0] ret_V_2_fu_1002_p2;
wire   [0:0] p_Result_48_fu_1008_p3;
wire   [0:0] p_Result_49_fu_1016_p3;
wire   [0:0] xor_ln941_2_fu_1024_p2;
wire  signed [16:0] sext_ln1394_4_fu_1042_p1;
wire   [16:0] ret_V_3_fu_1045_p2;
wire   [0:0] p_Result_50_fu_1051_p3;
wire   [0:0] p_Result_51_fu_1059_p3;
wire   [0:0] xor_ln941_3_fu_1067_p2;
wire  signed [16:0] sext_ln1394_5_fu_1085_p1;
wire   [16:0] ret_V_4_fu_1088_p2;
wire   [0:0] p_Result_52_fu_1094_p3;
wire   [0:0] p_Result_53_fu_1102_p3;
wire   [0:0] xor_ln941_4_fu_1110_p2;
wire  signed [16:0] sext_ln1394_6_fu_1128_p1;
wire   [16:0] ret_V_5_fu_1131_p2;
wire   [0:0] p_Result_54_fu_1137_p3;
wire   [0:0] p_Result_55_fu_1145_p3;
wire   [0:0] xor_ln941_5_fu_1153_p2;
wire  signed [16:0] sext_ln1394_7_fu_1171_p1;
wire   [16:0] ret_V_6_fu_1174_p2;
wire   [0:0] p_Result_56_fu_1180_p3;
wire   [0:0] p_Result_57_fu_1188_p3;
wire   [0:0] xor_ln941_6_fu_1196_p2;
wire  signed [16:0] sext_ln1394_8_fu_1214_p1;
wire   [16:0] ret_V_7_fu_1217_p2;
wire   [0:0] p_Result_58_fu_1223_p3;
wire   [0:0] p_Result_59_fu_1231_p3;
wire   [0:0] xor_ln941_7_fu_1239_p2;
wire  signed [16:0] sext_ln1394_9_fu_1257_p1;
wire   [16:0] ret_V_8_fu_1260_p2;
wire   [0:0] p_Result_60_fu_1266_p3;
wire   [0:0] p_Result_61_fu_1274_p3;
wire   [0:0] xor_ln941_8_fu_1282_p2;
wire  signed [16:0] sext_ln1394_10_fu_1300_p1;
wire   [16:0] ret_V_9_fu_1303_p2;
wire   [0:0] p_Result_62_fu_1309_p3;
wire   [0:0] p_Result_63_fu_1317_p3;
wire   [0:0] xor_ln941_9_fu_1325_p2;
wire   [0:0] overflow_fu_944_p2;
wire   [0:0] xor_ln348_fu_950_p2;
wire   [9:0] select_ln392_fu_1343_p3;
wire   [9:0] tmp_fu_1351_p4;
wire   [9:0] p_Result_s_fu_1361_p3;
wire   [0:0] overflow_1_fu_987_p2;
wire   [0:0] xor_ln348_1_fu_993_p2;
wire   [9:0] select_ln392_1_fu_1374_p3;
wire   [9:0] tmp_s_fu_1382_p4;
wire   [9:0] p_Result_21_fu_1392_p3;
wire   [0:0] overflow_2_fu_1030_p2;
wire   [0:0] xor_ln348_2_fu_1036_p2;
wire   [9:0] select_ln392_2_fu_1405_p3;
wire   [9:0] tmp_1_fu_1413_p4;
wire   [9:0] p_Result_22_fu_1423_p3;
wire   [0:0] overflow_3_fu_1073_p2;
wire   [0:0] xor_ln348_3_fu_1079_p2;
wire   [9:0] select_ln392_3_fu_1436_p3;
wire   [9:0] tmp_2_fu_1444_p4;
wire   [9:0] p_Result_23_fu_1454_p3;
wire   [0:0] overflow_4_fu_1116_p2;
wire   [0:0] xor_ln348_4_fu_1122_p2;
wire   [9:0] select_ln392_4_fu_1467_p3;
wire   [9:0] tmp_3_fu_1475_p4;
wire   [9:0] p_Result_24_fu_1485_p3;
wire   [0:0] overflow_5_fu_1159_p2;
wire   [0:0] xor_ln348_5_fu_1165_p2;
wire   [9:0] select_ln392_5_fu_1498_p3;
wire   [9:0] tmp_4_fu_1506_p4;
wire   [9:0] p_Result_25_fu_1516_p3;
wire   [0:0] overflow_6_fu_1202_p2;
wire   [0:0] xor_ln348_6_fu_1208_p2;
wire   [9:0] select_ln392_6_fu_1529_p3;
wire   [9:0] tmp_5_fu_1537_p4;
wire   [9:0] p_Result_26_fu_1547_p3;
wire   [0:0] overflow_7_fu_1245_p2;
wire   [0:0] xor_ln348_7_fu_1251_p2;
wire   [9:0] select_ln392_7_fu_1560_p3;
wire   [9:0] tmp_6_fu_1568_p4;
wire   [9:0] p_Result_27_fu_1578_p3;
wire   [0:0] overflow_8_fu_1288_p2;
wire   [0:0] xor_ln348_8_fu_1294_p2;
wire   [9:0] select_ln392_8_fu_1591_p3;
wire   [9:0] tmp_7_fu_1599_p4;
wire   [9:0] p_Result_28_fu_1609_p3;
wire   [0:0] overflow_9_fu_1331_p2;
wire   [0:0] xor_ln348_9_fu_1337_p2;
wire   [9:0] select_ln392_9_fu_1622_p3;
wire   [9:0] tmp_8_fu_1630_p4;
wire   [9:0] p_Result_29_fu_1640_p3;
wire   [17:0] zext_ln43_2_fu_1661_p1;
wire   [17:0] zext_ln43_3_fu_1665_p1;
wire   [17:0] p_Val2_10_fu_1669_p2;
wire   [0:0] tmp_31_fu_1683_p3;
wire   [0:0] p_Result_64_fu_1675_p3;
wire   [17:0] select_ln392_11_fu_1691_p3;
wire   [17:0] zext_ln43_fu_1653_p1;
wire   [17:0] zext_ln43_1_fu_1657_p1;
wire   [17:0] p_Val2_11_fu_1707_p2;
wire   [0:0] tmp_33_fu_1721_p3;
wire   [0:0] p_Result_65_fu_1713_p3;
wire   [17:0] select_ln392_12_fu_1729_p3;
wire  signed [17:0] lhs_2_fu_1699_p3;
wire  signed [17:0] rhs_2_fu_1737_p3;
wire  signed [18:0] sext_ln859_4_fu_1749_p1;
wire  signed [18:0] sext_ln859_3_fu_1745_p1;
wire   [18:0] ret_V_10_fu_1753_p2;
wire   [17:0] p_Val2_13_fu_1759_p2;
wire   [0:0] p_Result_66_fu_1765_p3;
wire   [0:0] p_Result_67_fu_1773_p3;
wire   [0:0] xor_ln941_12_fu_1781_p2;
wire   [0:0] xor_ln942_1_fu_1793_p2;
wire   [0:0] xor_ln348_13_fu_1805_p2;
wire   [0:0] overflow_12_fu_1787_p2;
wire   [0:0] xor_ln348_14_fu_1811_p2;
wire   [0:0] underflow_1_fu_1799_p2;
wire   [0:0] or_ln348_1_fu_1817_p2;
wire   [17:0] select_ln348_fu_1823_p3;
wire   [17:0] select_ln396_fu_1831_p3;
wire   [17:0] zext_ln43_6_fu_1855_p1;
wire   [17:0] zext_ln43_7_fu_1859_p1;
wire   [17:0] p_Val2_14_fu_1863_p2;
wire   [0:0] tmp_37_fu_1877_p3;
wire   [0:0] p_Result_68_fu_1869_p3;
wire   [17:0] select_ln392_13_fu_1885_p3;
wire   [17:0] zext_ln43_4_fu_1847_p1;
wire   [17:0] zext_ln43_5_fu_1851_p1;
wire   [17:0] p_Val2_15_fu_1901_p2;
wire   [0:0] tmp_39_fu_1915_p3;
wire   [0:0] p_Result_69_fu_1907_p3;
wire   [17:0] select_ln392_14_fu_1923_p3;
wire  signed [17:0] lhs_5_fu_1893_p3;
wire  signed [17:0] rhs_5_fu_1931_p3;
wire  signed [18:0] sext_ln859_6_fu_1943_p1;
wire  signed [18:0] sext_ln859_5_fu_1939_p1;
wire   [18:0] ret_V_11_fu_1947_p2;
wire   [17:0] p_Val2_17_fu_1953_p2;
wire   [0:0] p_Result_70_fu_1959_p3;
wire   [0:0] p_Result_71_fu_1967_p3;
wire   [0:0] xor_ln941_13_fu_1975_p2;
wire   [0:0] xor_ln942_2_fu_1987_p2;
wire   [0:0] xor_ln348_15_fu_1999_p2;
wire   [0:0] overflow_15_fu_1981_p2;
wire   [0:0] xor_ln348_16_fu_2005_p2;
wire   [0:0] underflow_2_fu_1993_p2;
wire   [0:0] or_ln348_2_fu_2011_p2;
wire   [17:0] select_ln348_5_fu_2017_p3;
wire   [17:0] select_ln396_1_fu_2025_p3;
wire  signed [18:0] sext_ln859_fu_2047_p1;
wire  signed [18:0] sext_ln859_1_fu_2050_p1;
wire   [18:0] ret_V_12_fu_2053_p2;
wire   [17:0] p_Val2_19_fu_2059_p2;
wire   [0:0] p_Result_72_fu_2063_p3;
wire   [0:0] p_Result_73_fu_2071_p3;
wire   [0:0] xor_ln941_10_fu_2079_p2;
wire   [0:0] overflow_16_fu_2085_p2;
wire   [0:0] xor_ln348_10_fu_2091_p2;
wire   [17:0] select_ln392_10_fu_2097_p3;
wire   [17:0] exp_res_V_9_cast40_fu_2044_p1;
wire   [17:0] exp_res_V_8_cast39_fu_2041_p1;
wire   [17:0] p_Val2_20_fu_2113_p2;
wire   [0:0] p_Result_74_fu_2123_p3;
wire   [16:0] add_ln902_fu_2119_p2;
wire   [16:0] rhs_7_fu_2131_p3;
wire  signed [17:0] lhs_7_fu_2105_p3;
wire  signed [18:0] sext_ln859_2_fu_2143_p1;
wire   [18:0] zext_ln859_1_fu_2147_p1;
wire   [17:0] zext_ln859_fu_2139_p1;
wire   [18:0] ret_V_13_fu_2151_p2;
wire   [17:0] p_Val2_22_fu_2157_p2;
wire   [0:0] p_Result_75_fu_2163_p3;
wire   [0:0] p_Result_76_fu_2171_p3;
wire   [0:0] xor_ln941_11_fu_2179_p2;
wire   [0:0] xor_ln942_fu_2191_p2;
wire   [0:0] xor_ln348_11_fu_2203_p2;
wire   [0:0] overflow_18_fu_2185_p2;
wire   [0:0] xor_ln348_12_fu_2209_p2;
wire   [9:0] tmp_9_fu_2221_p4;
wire   [0:0] underflow_fu_2197_p2;
wire   [0:0] or_ln348_fu_2215_p2;
wire   [9:0] select_ln348_8_fu_2231_p3;
wire   [9:0] select_ln396_2_fu_2239_p3;
wire   [9:0] p_Result_43_fu_2247_p3;
wire   [25:0] mul_ln1316_fu_283_p2;
wire   [25:0] mul_ln1316_1_fu_290_p2;
wire   [25:0] mul_ln1316_2_fu_284_p2;
wire   [25:0] mul_ln1316_3_fu_287_p2;
wire   [25:0] mul_ln1316_4_fu_285_p2;
wire   [25:0] mul_ln1316_5_fu_289_p2;
wire   [25:0] mul_ln1316_6_fu_286_p2;
wire   [25:0] mul_ln1316_7_fu_288_p2;
wire   [25:0] mul_ln1316_8_fu_291_p2;
wire   [25:0] mul_ln1316_9_fu_292_p2;
wire   [15:0] trunc_ln864_5_fu_2404_p4;
wire   [15:0] trunc_ln864_4_fu_2390_p4;
wire   [15:0] trunc_ln864_3_fu_2376_p4;
wire   [15:0] trunc_ln864_2_fu_2362_p4;
wire   [15:0] trunc_ln864_1_fu_2348_p4;
wire   [15:0] trunc_ln_fu_2334_p4;
wire   [15:0] out_pack_data_3_fu_2320_p4;
wire   [15:0] out_pack_data_2_fu_2306_p4;
wire   [15:0] out_pack_data_1_fu_2292_p4;
wire   [15:0] out_pack_data_fu_2278_p4;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire   [25:0] mul_ln1316_1_fu_290_p10;
wire   [25:0] mul_ln1316_2_fu_284_p10;
wire   [25:0] mul_ln1316_3_fu_287_p10;
wire   [25:0] mul_ln1316_4_fu_285_p10;
wire   [25:0] mul_ln1316_5_fu_289_p10;
wire   [25:0] mul_ln1316_6_fu_286_p10;
wire   [25:0] mul_ln1316_7_fu_288_p10;
wire   [25:0] mul_ln1316_8_fu_291_p10;
wire   [25:0] mul_ln1316_9_fu_292_p10;
wire   [25:0] mul_ln1316_fu_283_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_exp_tabeBS #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4),
    .address5(exp_table_address5),
    .ce5(exp_table_ce5),
    .q5(exp_table_q5),
    .address6(exp_table_address6),
    .ce6(exp_table_ce6),
    .q6(exp_table_q6),
    .address7(exp_table_address7),
    .ce7(exp_table_ce7),
    .q7(exp_table_q7),
    .address8(exp_table_address8),
    .ce8(exp_table_ce8),
    .q8(exp_table_q8),
    .address9(exp_table_address9),
    .ce9(exp_table_ce9),
    .q9(exp_table_q9)
);

AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_invert_eCS #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6899(
    .din0(mul_ln1316_fu_283_p0),
    .din1(mul_ln1316_fu_283_p1),
    .dout(mul_ln1316_fu_283_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6900(
    .din0(mul_ln1316_2_fu_284_p0),
    .din1(mul_ln1316_2_fu_284_p1),
    .dout(mul_ln1316_2_fu_284_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6901(
    .din0(mul_ln1316_4_fu_285_p0),
    .din1(mul_ln1316_4_fu_285_p1),
    .dout(mul_ln1316_4_fu_285_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6902(
    .din0(mul_ln1316_6_fu_286_p0),
    .din1(mul_ln1316_6_fu_286_p1),
    .dout(mul_ln1316_6_fu_286_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6903(
    .din0(mul_ln1316_3_fu_287_p0),
    .din1(mul_ln1316_3_fu_287_p1),
    .dout(mul_ln1316_3_fu_287_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6904(
    .din0(mul_ln1316_7_fu_288_p0),
    .din1(mul_ln1316_7_fu_288_p1),
    .dout(mul_ln1316_7_fu_288_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6905(
    .din0(mul_ln1316_5_fu_289_p0),
    .din1(mul_ln1316_5_fu_289_p1),
    .dout(mul_ln1316_5_fu_289_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6906(
    .din0(mul_ln1316_1_fu_290_p0),
    .din1(mul_ln1316_1_fu_290_p1),
    .dout(mul_ln1316_1_fu_290_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6907(
    .din0(mul_ln1316_8_fu_291_p0),
    .din1(mul_ln1316_8_fu_291_p1),
    .dout(mul_ln1316_8_fu_291_p2)
);

AlexNet_Cifar10_Keras_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_1_1_U6908(
    .din0(mul_ln1316_9_fu_292_p0),
    .din1(mul_ln1316_9_fu_292_p1),
    .dout(mul_ln1316_9_fu_292_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_array_V_4_reg_2477 <= {{layer34_out_dout[79:64]}};
        data_array_V_5_reg_2483 <= {{layer34_out_dout[95:80]}};
        data_array_V_6_reg_2489 <= {{layer34_out_dout[111:96]}};
        data_array_V_7_reg_2495 <= {{layer34_out_dout[127:112]}};
        data_array_V_8_reg_2445 <= {{layer34_out_dout[143:128]}};
        data_array_V_9_reg_2452 <= {{layer34_out_dout[159:144]}};
        icmp_ln1697_1_reg_2506 <= icmp_ln1697_1_fu_754_p2;
        icmp_ln1697_3_reg_2511 <= icmp_ln1697_3_fu_760_p2;
        icmp_ln1697_4_reg_2516 <= icmp_ln1697_4_fu_766_p2;
        icmp_ln1697_reg_2501 <= icmp_ln1697_fu_748_p2;
        in_pack_data_4_reg_2459 <= {{layer34_out_dout[31:16]}};
        in_pack_data_5_reg_2465 <= {{layer34_out_dout[47:32]}};
        in_pack_data_6_reg_2471 <= {{layer34_out_dout[63:48]}};
        in_pack_data_reg_2439 <= in_pack_data_fu_654_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        exp_res_V_10_reg_2587 <= exp_table_q8;
        exp_res_V_11_reg_2592 <= exp_table_q7;
        exp_res_V_12_reg_2597 <= exp_table_q6;
        exp_res_V_13_reg_2602 <= exp_table_q5;
        exp_res_V_14_reg_2607 <= exp_table_q4;
        exp_res_V_15_reg_2612 <= exp_table_q3;
        exp_res_V_16_reg_2617 <= exp_table_q2;
        exp_res_V_17_reg_2622 <= exp_table_q1;
        exp_res_V_18_reg_2629 <= exp_table_q0;
        exp_res_V_reg_2582 <= exp_table_q9;
        lhs_6_reg_2636 <= lhs_6_fu_1839_p3;
        rhs_6_reg_2642 <= rhs_6_fu_2033_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1697_7_reg_2527 <= icmp_ln1697_7_fu_876_p2;
        select_ln65_6_reg_2521 <= select_ln65_6_fu_868_p3;
    end
end

always @ (*) begin
    if (((layer34_out_empty_n == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((layer36_out_TREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce5 = 1'b1;
    end else begin
        exp_table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce6 = 1'b1;
    end else begin
        exp_table_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce7 = 1'b1;
    end else begin
        exp_table_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce8 = 1'b1;
    end else begin
        exp_table_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce9 = 1'b1;
    end else begin
        exp_table_ce9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        layer34_out_blk_n = layer34_out_empty_n;
    end else begin
        layer34_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer34_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer34_out_read = 1'b1;
    end else begin
        layer34_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        layer36_out_TDATA_blk_n = layer36_out_TREADY;
    end else begin
        layer36_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer36_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        layer36_out_TVALID = 1'b1;
    end else begin
        layer36_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer34_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((layer36_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln902_fu_2119_p2 = (exp_res_V_18_reg_2629 + exp_res_V_17_reg_2622);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((layer34_out_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign data_array_V_4_fu_708_p4 = {{layer34_out_dout[79:64]}};

assign data_array_V_5_fu_718_p4 = {{layer34_out_dout[95:80]}};

assign data_array_V_6_fu_728_p4 = {{layer34_out_dout[111:96]}};

assign data_array_V_7_fu_738_p4 = {{layer34_out_dout[127:112]}};

assign exp_res_V_8_cast39_fu_2041_p1 = exp_res_V_17_reg_2622;

assign exp_res_V_9_cast40_fu_2044_p1 = exp_res_V_18_reg_2629;

assign exp_table_address0 = zext_ln225_9_fu_1648_p1;

assign exp_table_address1 = zext_ln225_8_fu_1617_p1;

assign exp_table_address2 = zext_ln225_7_fu_1586_p1;

assign exp_table_address3 = zext_ln225_6_fu_1555_p1;

assign exp_table_address4 = zext_ln225_5_fu_1524_p1;

assign exp_table_address5 = zext_ln225_4_fu_1493_p1;

assign exp_table_address6 = zext_ln225_3_fu_1462_p1;

assign exp_table_address7 = zext_ln225_2_fu_1431_p1;

assign exp_table_address8 = zext_ln225_1_fu_1400_p1;

assign exp_table_address9 = zext_ln225_fu_1369_p1;

assign icmp_ln1697_1_fu_754_p2 = (($signed(in_pack_data_5_fu_688_p4) < $signed(in_pack_data_6_fu_698_p4)) ? 1'b1 : 1'b0);

assign icmp_ln1697_2_fu_794_p2 = (($signed(select_ln65_fu_777_p3) < $signed(select_ln65_1_fu_788_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1697_3_fu_760_p2 = (($signed(data_array_V_4_fu_708_p4) < $signed(data_array_V_5_fu_718_p4)) ? 1'b1 : 1'b0);

assign icmp_ln1697_4_fu_766_p2 = (($signed(data_array_V_6_fu_728_p4) < $signed(data_array_V_7_fu_738_p4)) ? 1'b1 : 1'b0);

assign icmp_ln1697_5_fu_836_p2 = (($signed(select_ln65_3_fu_819_p3) < $signed(select_ln65_4_fu_830_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1697_6_fu_856_p2 = (($signed(select_ln65_2_fu_806_p3) < $signed(select_ln65_5_fu_848_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1697_7_fu_876_p2 = (($signed(data_array_V_8_reg_2445) < $signed(data_array_V_9_reg_2452)) ? 1'b1 : 1'b0);

assign icmp_ln1697_8_fu_891_p2 = (($signed(select_ln65_6_reg_2521) < $signed(select_ln65_7_fu_885_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1697_fu_748_p2 = (($signed(in_pack_data_fu_654_p1) < $signed(in_pack_data_4_fu_678_p4)) ? 1'b1 : 1'b0);

assign in_pack_data_4_fu_678_p4 = {{layer34_out_dout[31:16]}};

assign in_pack_data_5_fu_688_p4 = {{layer34_out_dout[47:32]}};

assign in_pack_data_6_fu_698_p4 = {{layer34_out_dout[63:48]}};

assign in_pack_data_fu_654_p1 = layer34_out_dout[15:0];

assign invert_table_address0 = zext_ln235_fu_2255_p1;

assign layer36_out_TDATA = {{{{{{{{{{trunc_ln864_5_fu_2404_p4}, {trunc_ln864_4_fu_2390_p4}}, {trunc_ln864_3_fu_2376_p4}}, {trunc_ln864_2_fu_2362_p4}}, {trunc_ln864_1_fu_2348_p4}}, {trunc_ln_fu_2334_p4}}, {out_pack_data_3_fu_2320_p4}}, {out_pack_data_2_fu_2306_p4}}, {out_pack_data_1_fu_2292_p4}}, {out_pack_data_fu_2278_p4}};

assign lhs_2_fu_1699_p3 = ((p_Result_64_fu_1675_p3[0:0] == 1'b1) ? select_ln392_11_fu_1691_p3 : p_Val2_10_fu_1669_p2);

assign lhs_5_fu_1893_p3 = ((p_Result_68_fu_1869_p3[0:0] == 1'b1) ? select_ln392_13_fu_1885_p3 : p_Val2_14_fu_1863_p2);

assign lhs_6_fu_1839_p3 = ((or_ln348_1_fu_1817_p2[0:0] == 1'b1) ? select_ln348_fu_1823_p3 : select_ln396_fu_1831_p3);

assign lhs_7_fu_2105_p3 = ((xor_ln348_10_fu_2091_p2[0:0] == 1'b1) ? select_ln392_10_fu_2097_p3 : p_Val2_19_fu_2059_p2);

assign mul_ln1316_1_fu_290_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_1_fu_290_p1 = mul_ln1316_1_fu_290_p10;

assign mul_ln1316_1_fu_290_p10 = exp_res_V_10_reg_2587;

assign mul_ln1316_2_fu_284_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_2_fu_284_p1 = mul_ln1316_2_fu_284_p10;

assign mul_ln1316_2_fu_284_p10 = exp_res_V_11_reg_2592;

assign mul_ln1316_3_fu_287_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_3_fu_287_p1 = mul_ln1316_3_fu_287_p10;

assign mul_ln1316_3_fu_287_p10 = exp_res_V_12_reg_2597;

assign mul_ln1316_4_fu_285_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_4_fu_285_p1 = mul_ln1316_4_fu_285_p10;

assign mul_ln1316_4_fu_285_p10 = exp_res_V_13_reg_2602;

assign mul_ln1316_5_fu_289_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_5_fu_289_p1 = mul_ln1316_5_fu_289_p10;

assign mul_ln1316_5_fu_289_p10 = exp_res_V_14_reg_2607;

assign mul_ln1316_6_fu_286_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_6_fu_286_p1 = mul_ln1316_6_fu_286_p10;

assign mul_ln1316_6_fu_286_p10 = exp_res_V_15_reg_2612;

assign mul_ln1316_7_fu_288_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_7_fu_288_p1 = mul_ln1316_7_fu_288_p10;

assign mul_ln1316_7_fu_288_p10 = exp_res_V_16_reg_2617;

assign mul_ln1316_8_fu_291_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_8_fu_291_p1 = mul_ln1316_8_fu_291_p10;

assign mul_ln1316_8_fu_291_p10 = exp_res_V_17_reg_2622;

assign mul_ln1316_9_fu_292_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_9_fu_292_p1 = mul_ln1316_9_fu_292_p10;

assign mul_ln1316_9_fu_292_p10 = exp_res_V_18_reg_2629;

assign mul_ln1316_fu_283_p0 = sext_ln1319_fu_2260_p1;

assign mul_ln1316_fu_283_p1 = mul_ln1316_fu_283_p10;

assign mul_ln1316_fu_283_p10 = exp_res_V_reg_2582;

assign or_ln348_1_fu_1817_p2 = (xor_ln348_14_fu_1811_p2 | overflow_12_fu_1787_p2);

assign or_ln348_2_fu_2011_p2 = (xor_ln348_16_fu_2005_p2 | overflow_15_fu_1981_p2);

assign or_ln348_fu_2215_p2 = (xor_ln348_12_fu_2209_p2 | overflow_18_fu_2185_p2);

assign out_pack_data_1_fu_2292_p4 = {{mul_ln1316_1_fu_290_p2[25:10]}};

assign out_pack_data_2_fu_2306_p4 = {{mul_ln1316_2_fu_284_p2[25:10]}};

assign out_pack_data_3_fu_2320_p4 = {{mul_ln1316_3_fu_287_p2[25:10]}};

assign out_pack_data_fu_2278_p4 = {{mul_ln1316_fu_283_p2[25:10]}};

assign overflow_12_fu_1787_p2 = (xor_ln941_12_fu_1781_p2 & p_Result_67_fu_1773_p3);

assign overflow_15_fu_1981_p2 = (xor_ln941_13_fu_1975_p2 & p_Result_71_fu_1967_p3);

assign overflow_16_fu_2085_p2 = (xor_ln941_10_fu_2079_p2 & p_Result_73_fu_2071_p3);

assign overflow_18_fu_2185_p2 = (xor_ln941_11_fu_2179_p2 & p_Result_76_fu_2171_p3);

assign overflow_1_fu_987_p2 = (xor_ln941_1_fu_981_p2 & p_Result_47_fu_973_p3);

assign overflow_2_fu_1030_p2 = (xor_ln941_2_fu_1024_p2 & p_Result_49_fu_1016_p3);

assign overflow_3_fu_1073_p2 = (xor_ln941_3_fu_1067_p2 & p_Result_51_fu_1059_p3);

assign overflow_4_fu_1116_p2 = (xor_ln941_4_fu_1110_p2 & p_Result_53_fu_1102_p3);

assign overflow_5_fu_1159_p2 = (xor_ln941_5_fu_1153_p2 & p_Result_55_fu_1145_p3);

assign overflow_6_fu_1202_p2 = (xor_ln941_6_fu_1196_p2 & p_Result_57_fu_1188_p3);

assign overflow_7_fu_1245_p2 = (xor_ln941_7_fu_1239_p2 & p_Result_59_fu_1231_p3);

assign overflow_8_fu_1288_p2 = (xor_ln941_8_fu_1282_p2 & p_Result_61_fu_1274_p3);

assign overflow_9_fu_1331_p2 = (xor_ln941_9_fu_1325_p2 & p_Result_63_fu_1317_p3);

assign overflow_fu_944_p2 = (xor_ln941_fu_938_p2 & p_Result_45_fu_930_p3);

assign p_Result_21_fu_1392_p3 = ((xor_ln348_1_fu_993_p2[0:0] == 1'b1) ? select_ln392_1_fu_1374_p3 : tmp_s_fu_1382_p4);

assign p_Result_22_fu_1423_p3 = ((xor_ln348_2_fu_1036_p2[0:0] == 1'b1) ? select_ln392_2_fu_1405_p3 : tmp_1_fu_1413_p4);

assign p_Result_23_fu_1454_p3 = ((xor_ln348_3_fu_1079_p2[0:0] == 1'b1) ? select_ln392_3_fu_1436_p3 : tmp_2_fu_1444_p4);

assign p_Result_24_fu_1485_p3 = ((xor_ln348_4_fu_1122_p2[0:0] == 1'b1) ? select_ln392_4_fu_1467_p3 : tmp_3_fu_1475_p4);

assign p_Result_25_fu_1516_p3 = ((xor_ln348_5_fu_1165_p2[0:0] == 1'b1) ? select_ln392_5_fu_1498_p3 : tmp_4_fu_1506_p4);

assign p_Result_26_fu_1547_p3 = ((xor_ln348_6_fu_1208_p2[0:0] == 1'b1) ? select_ln392_6_fu_1529_p3 : tmp_5_fu_1537_p4);

assign p_Result_27_fu_1578_p3 = ((xor_ln348_7_fu_1251_p2[0:0] == 1'b1) ? select_ln392_7_fu_1560_p3 : tmp_6_fu_1568_p4);

assign p_Result_28_fu_1609_p3 = ((xor_ln348_8_fu_1294_p2[0:0] == 1'b1) ? select_ln392_8_fu_1591_p3 : tmp_7_fu_1599_p4);

assign p_Result_29_fu_1640_p3 = ((xor_ln348_9_fu_1337_p2[0:0] == 1'b1) ? select_ln392_9_fu_1622_p3 : tmp_8_fu_1630_p4);

assign p_Result_43_fu_2247_p3 = ((or_ln348_fu_2215_p2[0:0] == 1'b1) ? select_ln348_8_fu_2231_p3 : select_ln396_2_fu_2239_p3);

assign p_Result_44_fu_922_p3 = ret_V_fu_916_p2[32'd16];

assign p_Result_45_fu_930_p3 = ret_V_fu_916_p2[32'd15];

assign p_Result_46_fu_965_p3 = ret_V_1_fu_959_p2[32'd16];

assign p_Result_47_fu_973_p3 = ret_V_1_fu_959_p2[32'd15];

assign p_Result_48_fu_1008_p3 = ret_V_2_fu_1002_p2[32'd16];

assign p_Result_49_fu_1016_p3 = ret_V_2_fu_1002_p2[32'd15];

assign p_Result_50_fu_1051_p3 = ret_V_3_fu_1045_p2[32'd16];

assign p_Result_51_fu_1059_p3 = ret_V_3_fu_1045_p2[32'd15];

assign p_Result_52_fu_1094_p3 = ret_V_4_fu_1088_p2[32'd16];

assign p_Result_53_fu_1102_p3 = ret_V_4_fu_1088_p2[32'd15];

assign p_Result_54_fu_1137_p3 = ret_V_5_fu_1131_p2[32'd16];

assign p_Result_55_fu_1145_p3 = ret_V_5_fu_1131_p2[32'd15];

assign p_Result_56_fu_1180_p3 = ret_V_6_fu_1174_p2[32'd16];

assign p_Result_57_fu_1188_p3 = ret_V_6_fu_1174_p2[32'd15];

assign p_Result_58_fu_1223_p3 = ret_V_7_fu_1217_p2[32'd16];

assign p_Result_59_fu_1231_p3 = ret_V_7_fu_1217_p2[32'd15];

assign p_Result_60_fu_1266_p3 = ret_V_8_fu_1260_p2[32'd16];

assign p_Result_61_fu_1274_p3 = ret_V_8_fu_1260_p2[32'd15];

assign p_Result_62_fu_1309_p3 = ret_V_9_fu_1303_p2[32'd16];

assign p_Result_63_fu_1317_p3 = ret_V_9_fu_1303_p2[32'd15];

assign p_Result_64_fu_1675_p3 = p_Val2_10_fu_1669_p2[32'd17];

assign p_Result_65_fu_1713_p3 = p_Val2_11_fu_1707_p2[32'd17];

assign p_Result_66_fu_1765_p3 = ret_V_10_fu_1753_p2[32'd18];

assign p_Result_67_fu_1773_p3 = p_Val2_13_fu_1759_p2[32'd17];

assign p_Result_68_fu_1869_p3 = p_Val2_14_fu_1863_p2[32'd17];

assign p_Result_69_fu_1907_p3 = p_Val2_15_fu_1901_p2[32'd17];

assign p_Result_70_fu_1959_p3 = ret_V_11_fu_1947_p2[32'd18];

assign p_Result_71_fu_1967_p3 = p_Val2_17_fu_1953_p2[32'd17];

assign p_Result_72_fu_2063_p3 = ret_V_12_fu_2053_p2[32'd18];

assign p_Result_73_fu_2071_p3 = p_Val2_19_fu_2059_p2[32'd17];

assign p_Result_74_fu_2123_p3 = p_Val2_20_fu_2113_p2[32'd17];

assign p_Result_75_fu_2163_p3 = ret_V_13_fu_2151_p2[32'd18];

assign p_Result_76_fu_2171_p3 = p_Val2_22_fu_2157_p2[32'd17];

assign p_Result_s_fu_1361_p3 = ((xor_ln348_fu_950_p2[0:0] == 1'b1) ? select_ln392_fu_1343_p3 : tmp_fu_1351_p4);

assign p_Val2_10_fu_1669_p2 = (zext_ln43_2_fu_1661_p1 + zext_ln43_3_fu_1665_p1);

assign p_Val2_11_fu_1707_p2 = (zext_ln43_fu_1653_p1 + zext_ln43_1_fu_1657_p1);

assign p_Val2_13_fu_1759_p2 = ($signed(rhs_2_fu_1737_p3) + $signed(lhs_2_fu_1699_p3));

assign p_Val2_14_fu_1863_p2 = (zext_ln43_6_fu_1855_p1 + zext_ln43_7_fu_1859_p1);

assign p_Val2_15_fu_1901_p2 = (zext_ln43_4_fu_1847_p1 + zext_ln43_5_fu_1851_p1);

assign p_Val2_17_fu_1953_p2 = ($signed(rhs_5_fu_1931_p3) + $signed(lhs_5_fu_1893_p3));

assign p_Val2_19_fu_2059_p2 = ($signed(lhs_6_reg_2636) + $signed(rhs_6_reg_2642));

assign p_Val2_20_fu_2113_p2 = (exp_res_V_9_cast40_fu_2044_p1 + exp_res_V_8_cast39_fu_2041_p1);

assign p_Val2_22_fu_2157_p2 = ($signed(lhs_7_fu_2105_p3) + $signed(zext_ln859_fu_2139_p1));

assign ret_V_10_fu_1753_p2 = ($signed(sext_ln859_4_fu_1749_p1) + $signed(sext_ln859_3_fu_1745_p1));

assign ret_V_11_fu_1947_p2 = ($signed(sext_ln859_6_fu_1943_p1) + $signed(sext_ln859_5_fu_1939_p1));

assign ret_V_12_fu_2053_p2 = ($signed(sext_ln859_fu_2047_p1) + $signed(sext_ln859_1_fu_2050_p1));

assign ret_V_13_fu_2151_p2 = ($signed(sext_ln859_2_fu_2143_p1) + $signed(zext_ln859_1_fu_2147_p1));

assign ret_V_1_fu_959_p2 = ($signed(sext_ln1394_2_fu_956_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_2_fu_1002_p2 = ($signed(sext_ln1394_3_fu_999_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_3_fu_1045_p2 = ($signed(sext_ln1394_4_fu_1042_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_4_fu_1088_p2 = ($signed(sext_ln1394_5_fu_1085_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_5_fu_1131_p2 = ($signed(sext_ln1394_6_fu_1128_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_6_fu_1174_p2 = ($signed(sext_ln1394_7_fu_1171_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_7_fu_1217_p2 = ($signed(sext_ln1394_8_fu_1214_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_8_fu_1260_p2 = ($signed(sext_ln1394_9_fu_1257_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_9_fu_1303_p2 = ($signed(sext_ln1394_10_fu_1300_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign ret_V_fu_916_p2 = ($signed(sext_ln1394_fu_909_p1) - $signed(sext_ln1394_1_fu_912_p1));

assign rhs_2_fu_1737_p3 = ((p_Result_65_fu_1713_p3[0:0] == 1'b1) ? select_ln392_12_fu_1729_p3 : p_Val2_11_fu_1707_p2);

assign rhs_5_fu_1931_p3 = ((p_Result_69_fu_1907_p3[0:0] == 1'b1) ? select_ln392_14_fu_1923_p3 : p_Val2_15_fu_1901_p2);

assign rhs_6_fu_2033_p3 = ((or_ln348_2_fu_2011_p2[0:0] == 1'b1) ? select_ln348_5_fu_2017_p3 : select_ln396_1_fu_2025_p3);

assign rhs_7_fu_2131_p3 = ((p_Result_74_fu_2123_p3[0:0] == 1'b1) ? 17'd131071 : add_ln902_fu_2119_p2);

assign select_ln348_5_fu_2017_p3 = ((xor_ln348_15_fu_1999_p2[0:0] == 1'b1) ? 18'd131071 : p_Val2_17_fu_1953_p2);

assign select_ln348_8_fu_2231_p3 = ((xor_ln348_11_fu_2203_p2[0:0] == 1'b1) ? 10'd511 : tmp_9_fu_2221_p4);

assign select_ln348_fu_1823_p3 = ((xor_ln348_13_fu_1805_p2[0:0] == 1'b1) ? 18'd131071 : p_Val2_13_fu_1759_p2);

assign select_ln392_10_fu_2097_p3 = ((overflow_16_fu_2085_p2[0:0] == 1'b1) ? 18'd131071 : 18'd131072);

assign select_ln392_11_fu_1691_p3 = ((tmp_31_fu_1683_p3[0:0] == 1'b1) ? 18'd131071 : 18'd131072);

assign select_ln392_12_fu_1729_p3 = ((tmp_33_fu_1721_p3[0:0] == 1'b1) ? 18'd131071 : 18'd131072);

assign select_ln392_13_fu_1885_p3 = ((tmp_37_fu_1877_p3[0:0] == 1'b1) ? 18'd131071 : 18'd131072);

assign select_ln392_14_fu_1923_p3 = ((tmp_39_fu_1915_p3[0:0] == 1'b1) ? 18'd131071 : 18'd131072);

assign select_ln392_1_fu_1374_p3 = ((overflow_1_fu_987_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_2_fu_1405_p3 = ((overflow_2_fu_1030_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_3_fu_1436_p3 = ((overflow_3_fu_1073_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_4_fu_1467_p3 = ((overflow_4_fu_1116_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_5_fu_1498_p3 = ((overflow_5_fu_1159_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_6_fu_1529_p3 = ((overflow_6_fu_1202_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_7_fu_1560_p3 = ((overflow_7_fu_1245_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_8_fu_1591_p3 = ((overflow_8_fu_1288_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_9_fu_1622_p3 = ((overflow_9_fu_1331_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln392_fu_1343_p3 = ((overflow_fu_944_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln396_1_fu_2025_p3 = ((underflow_2_fu_1993_p2[0:0] == 1'b1) ? 18'd131072 : p_Val2_17_fu_1953_p2);

assign select_ln396_2_fu_2239_p3 = ((underflow_fu_2197_p2[0:0] == 1'b1) ? 10'd512 : tmp_9_fu_2221_p4);

assign select_ln396_fu_1831_p3 = ((underflow_1_fu_1799_p2[0:0] == 1'b1) ? 18'd131072 : p_Val2_13_fu_1759_p2);

assign select_ln65_1_fu_788_p3 = ((xor_ln1697_1_fu_783_p2[0:0] == 1'b1) ? in_pack_data_5_reg_2465 : in_pack_data_6_reg_2471);

assign select_ln65_2_fu_806_p3 = ((xor_ln1697_2_fu_800_p2[0:0] == 1'b1) ? select_ln65_fu_777_p3 : select_ln65_1_fu_788_p3);

assign select_ln65_3_fu_819_p3 = ((xor_ln1697_3_fu_814_p2[0:0] == 1'b1) ? data_array_V_4_reg_2477 : data_array_V_5_reg_2483);

assign select_ln65_4_fu_830_p3 = ((xor_ln1697_4_fu_825_p2[0:0] == 1'b1) ? data_array_V_6_reg_2489 : data_array_V_7_reg_2495);

assign select_ln65_5_fu_848_p3 = ((xor_ln1697_5_fu_842_p2[0:0] == 1'b1) ? select_ln65_3_fu_819_p3 : select_ln65_4_fu_830_p3);

assign select_ln65_6_fu_868_p3 = ((xor_ln1697_6_fu_862_p2[0:0] == 1'b1) ? select_ln65_2_fu_806_p3 : select_ln65_5_fu_848_p3);

assign select_ln65_7_fu_885_p3 = ((xor_ln1697_7_fu_880_p2[0:0] == 1'b1) ? data_array_V_8_reg_2445 : data_array_V_9_reg_2452);

assign select_ln65_fu_777_p3 = ((xor_ln1697_fu_772_p2[0:0] == 1'b1) ? in_pack_data_reg_2439 : in_pack_data_4_reg_2459);

assign sext_ln1319_fu_2260_p1 = $signed(invert_table_q0);

assign sext_ln1394_10_fu_1300_p1 = data_array_V_9_reg_2452;

assign sext_ln1394_1_fu_912_p1 = $signed(x_max_V_fu_902_p3);

assign sext_ln1394_2_fu_956_p1 = in_pack_data_4_reg_2459;

assign sext_ln1394_3_fu_999_p1 = in_pack_data_5_reg_2465;

assign sext_ln1394_4_fu_1042_p1 = in_pack_data_6_reg_2471;

assign sext_ln1394_5_fu_1085_p1 = data_array_V_4_reg_2477;

assign sext_ln1394_6_fu_1128_p1 = data_array_V_5_reg_2483;

assign sext_ln1394_7_fu_1171_p1 = data_array_V_6_reg_2489;

assign sext_ln1394_8_fu_1214_p1 = data_array_V_7_reg_2495;

assign sext_ln1394_9_fu_1257_p1 = data_array_V_8_reg_2445;

assign sext_ln1394_fu_909_p1 = in_pack_data_reg_2439;

assign sext_ln859_1_fu_2050_p1 = rhs_6_reg_2642;

assign sext_ln859_2_fu_2143_p1 = lhs_7_fu_2105_p3;

assign sext_ln859_3_fu_1745_p1 = lhs_2_fu_1699_p3;

assign sext_ln859_4_fu_1749_p1 = rhs_2_fu_1737_p3;

assign sext_ln859_5_fu_1939_p1 = lhs_5_fu_1893_p3;

assign sext_ln859_6_fu_1943_p1 = rhs_5_fu_1931_p3;

assign sext_ln859_fu_2047_p1 = lhs_6_reg_2636;

assign tmp_1_fu_1413_p4 = {{ret_V_2_fu_1002_p2[15:6]}};

assign tmp_2_fu_1444_p4 = {{ret_V_3_fu_1045_p2[15:6]}};

assign tmp_31_fu_1683_p3 = p_Val2_10_fu_1669_p2[32'd17];

assign tmp_33_fu_1721_p3 = p_Val2_11_fu_1707_p2[32'd17];

assign tmp_37_fu_1877_p3 = p_Val2_14_fu_1863_p2[32'd17];

assign tmp_39_fu_1915_p3 = p_Val2_15_fu_1901_p2[32'd17];

assign tmp_3_fu_1475_p4 = {{ret_V_4_fu_1088_p2[15:6]}};

assign tmp_4_fu_1506_p4 = {{ret_V_5_fu_1131_p2[15:6]}};

assign tmp_5_fu_1537_p4 = {{ret_V_6_fu_1174_p2[15:6]}};

assign tmp_6_fu_1568_p4 = {{ret_V_7_fu_1217_p2[15:6]}};

assign tmp_7_fu_1599_p4 = {{ret_V_8_fu_1260_p2[15:6]}};

assign tmp_8_fu_1630_p4 = {{ret_V_9_fu_1303_p2[15:6]}};

assign tmp_9_fu_2221_p4 = {{p_Val2_22_fu_2157_p2[17:8]}};

assign tmp_fu_1351_p4 = {{ret_V_fu_916_p2[15:6]}};

assign tmp_s_fu_1382_p4 = {{ret_V_1_fu_959_p2[15:6]}};

assign trunc_ln864_1_fu_2348_p4 = {{mul_ln1316_5_fu_289_p2[25:10]}};

assign trunc_ln864_2_fu_2362_p4 = {{mul_ln1316_6_fu_286_p2[25:10]}};

assign trunc_ln864_3_fu_2376_p4 = {{mul_ln1316_7_fu_288_p2[25:10]}};

assign trunc_ln864_4_fu_2390_p4 = {{mul_ln1316_8_fu_291_p2[25:10]}};

assign trunc_ln864_5_fu_2404_p4 = {{mul_ln1316_9_fu_292_p2[25:10]}};

assign trunc_ln_fu_2334_p4 = {{mul_ln1316_4_fu_285_p2[25:10]}};

assign underflow_1_fu_1799_p2 = (xor_ln942_1_fu_1793_p2 & p_Result_66_fu_1765_p3);

assign underflow_2_fu_1993_p2 = (xor_ln942_2_fu_1987_p2 & p_Result_70_fu_1959_p3);

assign underflow_fu_2197_p2 = (xor_ln942_fu_2191_p2 & p_Result_75_fu_2163_p3);

assign x_max_V_fu_902_p3 = ((xor_ln1697_8_fu_896_p2[0:0] == 1'b1) ? select_ln65_6_reg_2521 : select_ln65_7_fu_885_p3);

assign xor_ln1697_1_fu_783_p2 = (icmp_ln1697_1_reg_2506 ^ 1'd1);

assign xor_ln1697_2_fu_800_p2 = (icmp_ln1697_2_fu_794_p2 ^ 1'd1);

assign xor_ln1697_3_fu_814_p2 = (icmp_ln1697_3_reg_2511 ^ 1'd1);

assign xor_ln1697_4_fu_825_p2 = (icmp_ln1697_4_reg_2516 ^ 1'd1);

assign xor_ln1697_5_fu_842_p2 = (icmp_ln1697_5_fu_836_p2 ^ 1'd1);

assign xor_ln1697_6_fu_862_p2 = (icmp_ln1697_6_fu_856_p2 ^ 1'd1);

assign xor_ln1697_7_fu_880_p2 = (icmp_ln1697_7_reg_2527 ^ 1'd1);

assign xor_ln1697_8_fu_896_p2 = (icmp_ln1697_8_fu_891_p2 ^ 1'd1);

assign xor_ln1697_fu_772_p2 = (icmp_ln1697_reg_2501 ^ 1'd1);

assign xor_ln348_10_fu_2091_p2 = (p_Result_73_fu_2071_p3 ^ p_Result_72_fu_2063_p3);

assign xor_ln348_11_fu_2203_p2 = (p_Result_76_fu_2171_p3 ^ p_Result_75_fu_2163_p3);

assign xor_ln348_12_fu_2209_p2 = (xor_ln348_11_fu_2203_p2 ^ 1'd1);

assign xor_ln348_13_fu_1805_p2 = (p_Result_67_fu_1773_p3 ^ p_Result_66_fu_1765_p3);

assign xor_ln348_14_fu_1811_p2 = (xor_ln348_13_fu_1805_p2 ^ 1'd1);

assign xor_ln348_15_fu_1999_p2 = (p_Result_71_fu_1967_p3 ^ p_Result_70_fu_1959_p3);

assign xor_ln348_16_fu_2005_p2 = (xor_ln348_15_fu_1999_p2 ^ 1'd1);

assign xor_ln348_1_fu_993_p2 = (p_Result_47_fu_973_p3 ^ p_Result_46_fu_965_p3);

assign xor_ln348_2_fu_1036_p2 = (p_Result_49_fu_1016_p3 ^ p_Result_48_fu_1008_p3);

assign xor_ln348_3_fu_1079_p2 = (p_Result_51_fu_1059_p3 ^ p_Result_50_fu_1051_p3);

assign xor_ln348_4_fu_1122_p2 = (p_Result_53_fu_1102_p3 ^ p_Result_52_fu_1094_p3);

assign xor_ln348_5_fu_1165_p2 = (p_Result_55_fu_1145_p3 ^ p_Result_54_fu_1137_p3);

assign xor_ln348_6_fu_1208_p2 = (p_Result_57_fu_1188_p3 ^ p_Result_56_fu_1180_p3);

assign xor_ln348_7_fu_1251_p2 = (p_Result_59_fu_1231_p3 ^ p_Result_58_fu_1223_p3);

assign xor_ln348_8_fu_1294_p2 = (p_Result_61_fu_1274_p3 ^ p_Result_60_fu_1266_p3);

assign xor_ln348_9_fu_1337_p2 = (p_Result_63_fu_1317_p3 ^ p_Result_62_fu_1309_p3);

assign xor_ln348_fu_950_p2 = (p_Result_45_fu_930_p3 ^ p_Result_44_fu_922_p3);

assign xor_ln941_10_fu_2079_p2 = (p_Result_72_fu_2063_p3 ^ 1'd1);

assign xor_ln941_11_fu_2179_p2 = (p_Result_75_fu_2163_p3 ^ 1'd1);

assign xor_ln941_12_fu_1781_p2 = (p_Result_66_fu_1765_p3 ^ 1'd1);

assign xor_ln941_13_fu_1975_p2 = (p_Result_70_fu_1959_p3 ^ 1'd1);

assign xor_ln941_1_fu_981_p2 = (p_Result_46_fu_965_p3 ^ 1'd1);

assign xor_ln941_2_fu_1024_p2 = (p_Result_48_fu_1008_p3 ^ 1'd1);

assign xor_ln941_3_fu_1067_p2 = (p_Result_50_fu_1051_p3 ^ 1'd1);

assign xor_ln941_4_fu_1110_p2 = (p_Result_52_fu_1094_p3 ^ 1'd1);

assign xor_ln941_5_fu_1153_p2 = (p_Result_54_fu_1137_p3 ^ 1'd1);

assign xor_ln941_6_fu_1196_p2 = (p_Result_56_fu_1180_p3 ^ 1'd1);

assign xor_ln941_7_fu_1239_p2 = (p_Result_58_fu_1223_p3 ^ 1'd1);

assign xor_ln941_8_fu_1282_p2 = (p_Result_60_fu_1266_p3 ^ 1'd1);

assign xor_ln941_9_fu_1325_p2 = (p_Result_62_fu_1309_p3 ^ 1'd1);

assign xor_ln941_fu_938_p2 = (p_Result_44_fu_922_p3 ^ 1'd1);

assign xor_ln942_1_fu_1793_p2 = (p_Result_67_fu_1773_p3 ^ 1'd1);

assign xor_ln942_2_fu_1987_p2 = (p_Result_71_fu_1967_p3 ^ 1'd1);

assign xor_ln942_fu_2191_p2 = (p_Result_76_fu_2171_p3 ^ 1'd1);

assign zext_ln225_1_fu_1400_p1 = p_Result_21_fu_1392_p3;

assign zext_ln225_2_fu_1431_p1 = p_Result_22_fu_1423_p3;

assign zext_ln225_3_fu_1462_p1 = p_Result_23_fu_1454_p3;

assign zext_ln225_4_fu_1493_p1 = p_Result_24_fu_1485_p3;

assign zext_ln225_5_fu_1524_p1 = p_Result_25_fu_1516_p3;

assign zext_ln225_6_fu_1555_p1 = p_Result_26_fu_1547_p3;

assign zext_ln225_7_fu_1586_p1 = p_Result_27_fu_1578_p3;

assign zext_ln225_8_fu_1617_p1 = p_Result_28_fu_1609_p3;

assign zext_ln225_9_fu_1648_p1 = p_Result_29_fu_1640_p3;

assign zext_ln225_fu_1369_p1 = p_Result_s_fu_1361_p3;

assign zext_ln235_fu_2255_p1 = p_Result_43_fu_2247_p3;

assign zext_ln43_1_fu_1657_p1 = exp_table_q7;

assign zext_ln43_2_fu_1661_p1 = exp_table_q8;

assign zext_ln43_3_fu_1665_p1 = exp_table_q9;

assign zext_ln43_4_fu_1847_p1 = exp_table_q2;

assign zext_ln43_5_fu_1851_p1 = exp_table_q3;

assign zext_ln43_6_fu_1855_p1 = exp_table_q4;

assign zext_ln43_7_fu_1859_p1 = exp_table_q5;

assign zext_ln43_fu_1653_p1 = exp_table_q6;

assign zext_ln859_1_fu_2147_p1 = rhs_7_fu_2131_p3;

assign zext_ln859_fu_2139_p1 = rhs_7_fu_2131_p3;

endmodule //AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s
