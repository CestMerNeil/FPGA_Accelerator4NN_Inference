// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AlexNet_Cifar10_Keras_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config33_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer30_out_dout,
        layer30_out_num_data_valid,
        layer30_out_fifo_cap,
        layer30_out_empty_n,
        layer30_out_read,
        layer33_out_din,
        layer33_out_num_data_valid,
        layer33_out_fifo_cap,
        layer33_out_full_n,
        layer33_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [159:0] layer30_out_dout;
input  [1:0] layer30_out_num_data_valid;
input  [1:0] layer30_out_fifo_cap;
input   layer30_out_empty_n;
output   layer30_out_read;
output  [159:0] layer33_out_din;
input  [1:0] layer33_out_num_data_valid;
input  [1:0] layer33_out_fifo_cap;
input   layer33_out_full_n;
output   layer33_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer30_out_read;
reg layer33_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer30_out_blk_n;
reg    layer33_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [14:0] select_ln51_fu_289_p3;
reg   [14:0] select_ln51_reg_478;
wire   [14:0] select_ln51_100_fu_303_p3;
reg   [14:0] select_ln51_100_reg_483;
wire   [14:0] select_ln51_101_fu_317_p3;
reg   [14:0] select_ln51_101_reg_488;
wire   [14:0] select_ln51_102_fu_331_p3;
reg   [14:0] select_ln51_102_reg_493;
wire   [14:0] select_ln51_103_fu_345_p3;
reg   [14:0] select_ln51_103_reg_498;
wire   [14:0] select_ln51_104_fu_359_p3;
reg   [14:0] select_ln51_104_reg_503;
wire   [14:0] select_ln51_105_fu_373_p3;
reg   [14:0] select_ln51_105_reg_508;
wire   [14:0] select_ln51_106_fu_387_p3;
reg   [14:0] select_ln51_106_reg_513;
wire   [14:0] select_ln51_107_fu_401_p3;
reg   [14:0] select_ln51_107_reg_518;
wire   [14:0] select_ln51_108_fu_415_p3;
reg   [14:0] select_ln51_108_reg_523;
reg    ap_block_state1;
wire   [15:0] in_data_data_fu_95_p1;
wire   [0:0] icmp_ln1695_fu_283_p2;
wire   [14:0] trunc_ln145_95_fu_99_p1;
wire   [15:0] in_data_data_38_fu_123_p4;
wire   [0:0] icmp_ln1695_119_fu_297_p2;
wire   [14:0] trunc_ln_fu_133_p4;
wire   [15:0] in_data_data_39_fu_143_p4;
wire   [0:0] icmp_ln1695_120_fu_311_p2;
wire   [14:0] trunc_ln44_s_fu_153_p4;
wire   [15:0] in_data_data_40_fu_163_p4;
wire   [0:0] icmp_ln1695_121_fu_325_p2;
wire   [14:0] trunc_ln44_2_fu_173_p4;
wire   [15:0] tmp_fu_183_p4;
wire   [0:0] icmp_ln1695_122_fu_339_p2;
wire   [14:0] trunc_ln145_s_fu_193_p4;
wire   [15:0] tmp_s_fu_203_p4;
wire   [0:0] icmp_ln1695_123_fu_353_p2;
wire   [14:0] trunc_ln145_91_fu_213_p4;
wire   [15:0] tmp_83_fu_223_p4;
wire   [0:0] icmp_ln1695_124_fu_367_p2;
wire   [14:0] trunc_ln145_92_fu_233_p4;
wire   [15:0] tmp_84_fu_243_p4;
wire   [0:0] icmp_ln1695_125_fu_381_p2;
wire   [14:0] trunc_ln145_93_fu_253_p4;
wire   [15:0] trunc_ln145_96_fu_103_p4;
wire   [0:0] icmp_ln1695_126_fu_395_p2;
wire   [14:0] trunc_ln145_94_fu_263_p4;
wire   [15:0] trunc_ln145_97_fu_113_p4;
wire   [0:0] icmp_ln1695_127_fu_409_p2;
wire   [14:0] trunc_ln6_fu_273_p4;
wire   [15:0] zext_ln1695_102_fu_447_p1;
wire   [15:0] zext_ln1695_101_fu_444_p1;
wire   [15:0] zext_ln1695_100_fu_441_p1;
wire   [15:0] zext_ln1695_99_fu_438_p1;
wire   [15:0] zext_ln1695_98_fu_435_p1;
wire   [15:0] zext_ln1695_97_fu_432_p1;
wire   [15:0] zext_ln1695_96_fu_429_p1;
wire   [15:0] zext_ln1695_95_fu_426_p1;
wire   [15:0] zext_ln1695_fu_423_p1;
wire   [158:0] or_ln174_s_fu_450_p11;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer33_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        select_ln51_100_reg_483 <= select_ln51_100_fu_303_p3;
        select_ln51_101_reg_488 <= select_ln51_101_fu_317_p3;
        select_ln51_102_reg_493 <= select_ln51_102_fu_331_p3;
        select_ln51_103_reg_498 <= select_ln51_103_fu_345_p3;
        select_ln51_104_reg_503 <= select_ln51_104_fu_359_p3;
        select_ln51_105_reg_508 <= select_ln51_105_fu_373_p3;
        select_ln51_106_reg_513 <= select_ln51_106_fu_387_p3;
        select_ln51_107_reg_518 <= select_ln51_107_fu_401_p3;
        select_ln51_108_reg_523 <= select_ln51_108_fu_415_p3;
        select_ln51_reg_478 <= select_ln51_fu_289_p3;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer30_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((layer33_out_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer33_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer33_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer30_out_blk_n = layer30_out_empty_n;
    end else begin
        layer30_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer30_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer30_out_read = 1'b1;
    end else begin
        layer30_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer33_out_blk_n = layer33_out_full_n;
    end else begin
        layer33_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer33_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        layer33_out_write = 1'b1;
    end else begin
        layer33_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (layer30_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((layer33_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer30_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln1695_119_fu_297_p2 = (($signed(in_data_data_38_fu_123_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_120_fu_311_p2 = (($signed(in_data_data_39_fu_143_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_121_fu_325_p2 = (($signed(in_data_data_40_fu_163_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_122_fu_339_p2 = (($signed(tmp_fu_183_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_123_fu_353_p2 = (($signed(tmp_s_fu_203_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_124_fu_367_p2 = (($signed(tmp_83_fu_223_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_125_fu_381_p2 = (($signed(tmp_84_fu_243_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_126_fu_395_p2 = (($signed(trunc_ln145_96_fu_103_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_127_fu_409_p2 = (($signed(trunc_ln145_97_fu_113_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_fu_283_p2 = (($signed(in_data_data_fu_95_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_data_38_fu_123_p4 = {{layer30_out_dout[31:16]}};

assign in_data_data_39_fu_143_p4 = {{layer30_out_dout[47:32]}};

assign in_data_data_40_fu_163_p4 = {{layer30_out_dout[63:48]}};

assign in_data_data_fu_95_p1 = layer30_out_dout[15:0];

assign layer33_out_din = or_ln174_s_fu_450_p11;

assign or_ln174_s_fu_450_p11 = {{{{{{{{{{select_ln51_108_reg_523}, {zext_ln1695_102_fu_447_p1}}, {zext_ln1695_101_fu_444_p1}}, {zext_ln1695_100_fu_441_p1}}, {zext_ln1695_99_fu_438_p1}}, {zext_ln1695_98_fu_435_p1}}, {zext_ln1695_97_fu_432_p1}}, {zext_ln1695_96_fu_429_p1}}, {zext_ln1695_95_fu_426_p1}}, {zext_ln1695_fu_423_p1}};

assign select_ln51_100_fu_303_p3 = ((icmp_ln1695_119_fu_297_p2[0:0] == 1'b1) ? trunc_ln_fu_133_p4 : 15'd0);

assign select_ln51_101_fu_317_p3 = ((icmp_ln1695_120_fu_311_p2[0:0] == 1'b1) ? trunc_ln44_s_fu_153_p4 : 15'd0);

assign select_ln51_102_fu_331_p3 = ((icmp_ln1695_121_fu_325_p2[0:0] == 1'b1) ? trunc_ln44_2_fu_173_p4 : 15'd0);

assign select_ln51_103_fu_345_p3 = ((icmp_ln1695_122_fu_339_p2[0:0] == 1'b1) ? trunc_ln145_s_fu_193_p4 : 15'd0);

assign select_ln51_104_fu_359_p3 = ((icmp_ln1695_123_fu_353_p2[0:0] == 1'b1) ? trunc_ln145_91_fu_213_p4 : 15'd0);

assign select_ln51_105_fu_373_p3 = ((icmp_ln1695_124_fu_367_p2[0:0] == 1'b1) ? trunc_ln145_92_fu_233_p4 : 15'd0);

assign select_ln51_106_fu_387_p3 = ((icmp_ln1695_125_fu_381_p2[0:0] == 1'b1) ? trunc_ln145_93_fu_253_p4 : 15'd0);

assign select_ln51_107_fu_401_p3 = ((icmp_ln1695_126_fu_395_p2[0:0] == 1'b1) ? trunc_ln145_94_fu_263_p4 : 15'd0);

assign select_ln51_108_fu_415_p3 = ((icmp_ln1695_127_fu_409_p2[0:0] == 1'b1) ? trunc_ln6_fu_273_p4 : 15'd0);

assign select_ln51_fu_289_p3 = ((icmp_ln1695_fu_283_p2[0:0] == 1'b1) ? trunc_ln145_95_fu_99_p1 : 15'd0);

assign start_out = real_start;

assign tmp_83_fu_223_p4 = {{layer30_out_dout[111:96]}};

assign tmp_84_fu_243_p4 = {{layer30_out_dout[127:112]}};

assign tmp_fu_183_p4 = {{layer30_out_dout[79:64]}};

assign tmp_s_fu_203_p4 = {{layer30_out_dout[95:80]}};

assign trunc_ln145_91_fu_213_p4 = {{layer30_out_dout[94:80]}};

assign trunc_ln145_92_fu_233_p4 = {{layer30_out_dout[110:96]}};

assign trunc_ln145_93_fu_253_p4 = {{layer30_out_dout[126:112]}};

assign trunc_ln145_94_fu_263_p4 = {{layer30_out_dout[142:128]}};

assign trunc_ln145_95_fu_99_p1 = layer30_out_dout[14:0];

assign trunc_ln145_96_fu_103_p4 = {{layer30_out_dout[143:128]}};

assign trunc_ln145_97_fu_113_p4 = {{layer30_out_dout[159:144]}};

assign trunc_ln145_s_fu_193_p4 = {{layer30_out_dout[78:64]}};

assign trunc_ln44_2_fu_173_p4 = {{layer30_out_dout[62:48]}};

assign trunc_ln44_s_fu_153_p4 = {{layer30_out_dout[46:32]}};

assign trunc_ln6_fu_273_p4 = {{layer30_out_dout[158:144]}};

assign trunc_ln_fu_133_p4 = {{layer30_out_dout[30:16]}};

assign zext_ln1695_100_fu_441_p1 = select_ln51_105_reg_508;

assign zext_ln1695_101_fu_444_p1 = select_ln51_106_reg_513;

assign zext_ln1695_102_fu_447_p1 = select_ln51_107_reg_518;

assign zext_ln1695_95_fu_426_p1 = select_ln51_100_reg_483;

assign zext_ln1695_96_fu_429_p1 = select_ln51_101_reg_488;

assign zext_ln1695_97_fu_432_p1 = select_ln51_102_reg_493;

assign zext_ln1695_98_fu_435_p1 = select_ln51_103_reg_498;

assign zext_ln1695_99_fu_438_p1 = select_ln51_104_reg_503;

assign zext_ln1695_fu_423_p1 = select_ln51_reg_478;

endmodule //AlexNet_Cifar10_Keras_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config33_s
