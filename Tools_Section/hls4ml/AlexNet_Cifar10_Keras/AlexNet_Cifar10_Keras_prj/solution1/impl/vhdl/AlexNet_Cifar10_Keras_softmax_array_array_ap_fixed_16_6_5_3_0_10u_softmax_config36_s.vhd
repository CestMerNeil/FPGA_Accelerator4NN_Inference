-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AlexNet_Cifar10_Keras_softmax_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer34_out_dout : IN STD_LOGIC_VECTOR (159 downto 0);
    layer34_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer34_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer34_out_empty_n : IN STD_LOGIC;
    layer34_out_read : OUT STD_LOGIC;
    layer36_out_TDATA : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer36_out_TVALID : OUT STD_LOGIC;
    layer36_out_TREADY : IN STD_LOGIC );
end;


architecture behav of AlexNet_Cifar10_Keras_softmax_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_idle : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_ready : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer34_out_read : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TDATA : STD_LOGIC_VECTOR (159 downto 0);
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TVALID : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TREADY : STD_LOGIC;
    signal grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call2 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal regslice_both_layer36_out_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal layer36_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_layer36_out_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer34_out_dout : IN STD_LOGIC_VECTOR (159 downto 0);
        layer34_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        layer34_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        layer34_out_empty_n : IN STD_LOGIC;
        layer34_out_read : OUT STD_LOGIC;
        layer36_out_TDATA : OUT STD_LOGIC_VECTOR (159 downto 0);
        layer36_out_TVALID : OUT STD_LOGIC;
        layer36_out_TREADY : IN STD_LOGIC );
    end component;


    component AlexNet_Cifar10_Keras_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26 : component AlexNet_Cifar10_Keras_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start,
        ap_done => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done,
        ap_idle => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_idle,
        ap_ready => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_ready,
        layer34_out_dout => layer34_out_dout,
        layer34_out_num_data_valid => ap_const_lv2_0,
        layer34_out_fifo_cap => ap_const_lv2_0,
        layer34_out_empty_n => layer34_out_empty_n,
        layer34_out_read => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer34_out_read,
        layer36_out_TDATA => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TDATA,
        layer36_out_TVALID => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TVALID,
        layer36_out_TREADY => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TREADY);

    regslice_both_layer36_out_U : component AlexNet_Cifar10_Keras_regslice_both
    generic map (
        DataWidth => 160)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TDATA,
        vld_in => grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TVALID,
        ack_in => layer36_out_TREADY_int_regslice,
        data_out => layer36_out_TDATA,
        vld_out => regslice_both_layer36_out_U_vld_out,
        ack_out => layer36_out_TREADY,
        apdone_blk => regslice_both_layer36_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (regslice_both_layer36_out_U_apdone_blk = ap_const_logic_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, regslice_both_layer36_out_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (regslice_both_layer36_out_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done)
    begin
        if ((grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(regslice_both_layer36_out_U_apdone_blk)
    begin
        if ((regslice_both_layer36_out_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call2_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call2 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, regslice_both_layer36_out_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (regslice_both_layer36_out_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, regslice_both_layer36_out_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (regslice_both_layer36_out_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start <= grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_ap_start_reg;
    grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer36_out_TREADY <= (layer36_out_TREADY_int_regslice and ap_CS_fsm_state2);

    layer34_out_read_assign_proc : process(grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer34_out_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer34_out_read <= grp_softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config36_s_fu_26_layer34_out_read;
        else 
            layer34_out_read <= ap_const_logic_0;
        end if; 
    end process;

    layer36_out_TVALID <= regslice_both_layer36_out_U_vld_out;
end behav;
