-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AlexNet_Cifar10_Keras_relu_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_relu_config29_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer26_out_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    layer26_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer26_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer26_out_empty_n : IN STD_LOGIC;
    layer26_out_read : OUT STD_LOGIC;
    layer29_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    layer29_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer29_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer29_out_full_n : IN STD_LOGIC;
    layer29_out_write : OUT STD_LOGIC );
end;


architecture behav of AlexNet_Cifar10_Keras_relu_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_relu_config29_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer26_out_blk_n : STD_LOGIC;
    signal layer29_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln51_fu_445_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_reg_748 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_63_fu_459_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_63_reg_753 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_64_fu_473_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_64_reg_758 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_65_fu_487_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_65_reg_763 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_66_fu_501_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_66_reg_768 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_67_fu_515_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_67_reg_773 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_68_fu_529_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_68_reg_778 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_69_fu_543_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_69_reg_783 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_70_fu_557_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_70_reg_788 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_71_fu_571_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_71_reg_793 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_72_fu_585_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_72_reg_798 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_73_fu_599_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_73_reg_803 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_74_fu_613_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_74_reg_808 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_75_fu_627_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_75_reg_813 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_76_fu_641_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_76_reg_818 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_77_fu_655_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_77_reg_823 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal in_data_data_fu_131_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_71_fu_135_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_20_fu_159_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_74_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_169_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_21_fu_179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_75_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_7_fu_189_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_22_fu_199_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_76_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_8_fu_209_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_77_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_s_fu_229_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_78_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_61_fu_249_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_fu_259_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_79_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_62_fu_269_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_60_fu_279_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_80_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_63_fu_289_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_61_fu_299_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_81_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_64_fu_309_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_62_fu_319_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_82_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_65_fu_329_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_63_fu_339_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_83_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_66_fu_349_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_64_fu_359_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_84_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_67_fu_369_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_fu_379_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_85_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_68_fu_389_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_66_fu_399_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_86_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_69_fu_409_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln145_72_fu_139_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_87_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_70_fu_419_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln145_73_fu_149_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_88_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_429_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1695_74_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_73_fu_702_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_72_fu_699_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_71_fu_696_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_70_fu_693_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_69_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_68_fu_687_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_67_fu_684_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_66_fu_681_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_65_fu_678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_64_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_63_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_62_fu_669_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_61_fu_666_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_fu_663_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln174_s_fu_708_p17 : STD_LOGIC_VECTOR (254 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer29_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                select_ln51_63_reg_753 <= select_ln51_63_fu_459_p3;
                select_ln51_64_reg_758 <= select_ln51_64_fu_473_p3;
                select_ln51_65_reg_763 <= select_ln51_65_fu_487_p3;
                select_ln51_66_reg_768 <= select_ln51_66_fu_501_p3;
                select_ln51_67_reg_773 <= select_ln51_67_fu_515_p3;
                select_ln51_68_reg_778 <= select_ln51_68_fu_529_p3;
                select_ln51_69_reg_783 <= select_ln51_69_fu_543_p3;
                select_ln51_70_reg_788 <= select_ln51_70_fu_557_p3;
                select_ln51_71_reg_793 <= select_ln51_71_fu_571_p3;
                select_ln51_72_reg_798 <= select_ln51_72_fu_585_p3;
                select_ln51_73_reg_803 <= select_ln51_73_fu_599_p3;
                select_ln51_74_reg_808 <= select_ln51_74_fu_613_p3;
                select_ln51_75_reg_813 <= select_ln51_75_fu_627_p3;
                select_ln51_76_reg_818 <= select_ln51_76_fu_641_p3;
                select_ln51_77_reg_823 <= select_ln51_77_fu_655_p3;
                select_ln51_reg_748 <= select_ln51_fu_445_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer26_out_empty_n, layer29_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer26_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer29_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer26_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer26_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer29_out_full_n)
    begin
        if ((layer29_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer26_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer26_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer29_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer29_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln1695_74_fu_453_p2 <= "1" when (signed(in_data_data_20_fu_159_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_75_fu_467_p2 <= "1" when (signed(in_data_data_21_fu_179_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_76_fu_481_p2 <= "1" when (signed(in_data_data_22_fu_199_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_77_fu_495_p2 <= "1" when (signed(tmp_fu_219_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_78_fu_509_p2 <= "1" when (signed(tmp_s_fu_239_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_79_fu_523_p2 <= "1" when (signed(tmp_59_fu_259_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_80_fu_537_p2 <= "1" when (signed(tmp_60_fu_279_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_81_fu_551_p2 <= "1" when (signed(tmp_61_fu_299_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_82_fu_565_p2 <= "1" when (signed(tmp_62_fu_319_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_83_fu_579_p2 <= "1" when (signed(tmp_63_fu_339_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_84_fu_593_p2 <= "1" when (signed(tmp_64_fu_359_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_85_fu_607_p2 <= "1" when (signed(tmp_65_fu_379_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_86_fu_621_p2 <= "1" when (signed(tmp_66_fu_399_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_87_fu_635_p2 <= "1" when (signed(trunc_ln145_72_fu_139_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_88_fu_649_p2 <= "1" when (signed(trunc_ln145_73_fu_149_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_fu_439_p2 <= "1" when (signed(in_data_data_fu_131_p1) > signed(ap_const_lv16_0)) else "0";
    in_data_data_20_fu_159_p4 <= layer26_out_dout(31 downto 16);
    in_data_data_21_fu_179_p4 <= layer26_out_dout(47 downto 32);
    in_data_data_22_fu_199_p4 <= layer26_out_dout(63 downto 48);
    in_data_data_fu_131_p1 <= layer26_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer29_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer29_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer26_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer26_out_blk_n <= layer26_out_empty_n;
        else 
            layer26_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer26_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer26_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer26_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer26_out_read <= ap_const_logic_1;
        else 
            layer26_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer29_out_blk_n_assign_proc : process(layer29_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer29_out_blk_n <= layer29_out_full_n;
        else 
            layer29_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer29_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln174_s_fu_708_p17),256));

    layer29_out_write_assign_proc : process(layer29_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer29_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer29_out_write <= ap_const_logic_1;
        else 
            layer29_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln174_s_fu_708_p17 <= (((((((((((((((select_ln51_77_reg_823 & zext_ln1695_74_fu_705_p1) & zext_ln1695_73_fu_702_p1) & zext_ln1695_72_fu_699_p1) & zext_ln1695_71_fu_696_p1) & zext_ln1695_70_fu_693_p1) & zext_ln1695_69_fu_690_p1) & zext_ln1695_68_fu_687_p1) & zext_ln1695_67_fu_684_p1) & zext_ln1695_66_fu_681_p1) & zext_ln1695_65_fu_678_p1) & zext_ln1695_64_fu_675_p1) & zext_ln1695_63_fu_672_p1) & zext_ln1695_62_fu_669_p1) & zext_ln1695_61_fu_666_p1) & zext_ln1695_fu_663_p1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_63_fu_459_p3 <= 
        trunc_ln_fu_169_p4 when (icmp_ln1695_74_fu_453_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_64_fu_473_p3 <= 
        trunc_ln44_7_fu_189_p4 when (icmp_ln1695_75_fu_467_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_65_fu_487_p3 <= 
        trunc_ln44_8_fu_209_p4 when (icmp_ln1695_76_fu_481_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_66_fu_501_p3 <= 
        trunc_ln145_s_fu_229_p4 when (icmp_ln1695_77_fu_495_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_67_fu_515_p3 <= 
        trunc_ln145_61_fu_249_p4 when (icmp_ln1695_78_fu_509_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_68_fu_529_p3 <= 
        trunc_ln145_62_fu_269_p4 when (icmp_ln1695_79_fu_523_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_69_fu_543_p3 <= 
        trunc_ln145_63_fu_289_p4 when (icmp_ln1695_80_fu_537_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_70_fu_557_p3 <= 
        trunc_ln145_64_fu_309_p4 when (icmp_ln1695_81_fu_551_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_71_fu_571_p3 <= 
        trunc_ln145_65_fu_329_p4 when (icmp_ln1695_82_fu_565_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_72_fu_585_p3 <= 
        trunc_ln145_66_fu_349_p4 when (icmp_ln1695_83_fu_579_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_73_fu_599_p3 <= 
        trunc_ln145_67_fu_369_p4 when (icmp_ln1695_84_fu_593_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_74_fu_613_p3 <= 
        trunc_ln145_68_fu_389_p4 when (icmp_ln1695_85_fu_607_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_75_fu_627_p3 <= 
        trunc_ln145_69_fu_409_p4 when (icmp_ln1695_86_fu_621_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_76_fu_641_p3 <= 
        trunc_ln145_70_fu_419_p4 when (icmp_ln1695_87_fu_635_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_77_fu_655_p3 <= 
        trunc_ln3_fu_429_p4 when (icmp_ln1695_88_fu_649_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_445_p3 <= 
        trunc_ln145_71_fu_135_p1 when (icmp_ln1695_fu_439_p2(0) = '1') else 
        ap_const_lv15_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_59_fu_259_p4 <= layer26_out_dout(111 downto 96);
    tmp_60_fu_279_p4 <= layer26_out_dout(127 downto 112);
    tmp_61_fu_299_p4 <= layer26_out_dout(143 downto 128);
    tmp_62_fu_319_p4 <= layer26_out_dout(159 downto 144);
    tmp_63_fu_339_p4 <= layer26_out_dout(175 downto 160);
    tmp_64_fu_359_p4 <= layer26_out_dout(191 downto 176);
    tmp_65_fu_379_p4 <= layer26_out_dout(207 downto 192);
    tmp_66_fu_399_p4 <= layer26_out_dout(223 downto 208);
    tmp_fu_219_p4 <= layer26_out_dout(79 downto 64);
    tmp_s_fu_239_p4 <= layer26_out_dout(95 downto 80);
    trunc_ln145_61_fu_249_p4 <= layer26_out_dout(94 downto 80);
    trunc_ln145_62_fu_269_p4 <= layer26_out_dout(110 downto 96);
    trunc_ln145_63_fu_289_p4 <= layer26_out_dout(126 downto 112);
    trunc_ln145_64_fu_309_p4 <= layer26_out_dout(142 downto 128);
    trunc_ln145_65_fu_329_p4 <= layer26_out_dout(158 downto 144);
    trunc_ln145_66_fu_349_p4 <= layer26_out_dout(174 downto 160);
    trunc_ln145_67_fu_369_p4 <= layer26_out_dout(190 downto 176);
    trunc_ln145_68_fu_389_p4 <= layer26_out_dout(206 downto 192);
    trunc_ln145_69_fu_409_p4 <= layer26_out_dout(222 downto 208);
    trunc_ln145_70_fu_419_p4 <= layer26_out_dout(238 downto 224);
    trunc_ln145_71_fu_135_p1 <= layer26_out_dout(15 - 1 downto 0);
    trunc_ln145_72_fu_139_p4 <= layer26_out_dout(239 downto 224);
    trunc_ln145_73_fu_149_p4 <= layer26_out_dout(255 downto 240);
    trunc_ln145_s_fu_229_p4 <= layer26_out_dout(78 downto 64);
    trunc_ln3_fu_429_p4 <= layer26_out_dout(254 downto 240);
    trunc_ln44_7_fu_189_p4 <= layer26_out_dout(46 downto 32);
    trunc_ln44_8_fu_209_p4 <= layer26_out_dout(62 downto 48);
    trunc_ln_fu_169_p4 <= layer26_out_dout(30 downto 16);
    zext_ln1695_61_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_63_reg_753),16));
    zext_ln1695_62_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_64_reg_758),16));
    zext_ln1695_63_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_65_reg_763),16));
    zext_ln1695_64_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_66_reg_768),16));
    zext_ln1695_65_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_67_reg_773),16));
    zext_ln1695_66_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_68_reg_778),16));
    zext_ln1695_67_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_69_reg_783),16));
    zext_ln1695_68_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_70_reg_788),16));
    zext_ln1695_69_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_71_reg_793),16));
    zext_ln1695_70_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_72_reg_798),16));
    zext_ln1695_71_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_73_reg_803),16));
    zext_ln1695_72_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_74_reg_808),16));
    zext_ln1695_73_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_75_reg_813),16));
    zext_ln1695_74_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_76_reg_818),16));
    zext_ln1695_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_748),16));
end behav;
