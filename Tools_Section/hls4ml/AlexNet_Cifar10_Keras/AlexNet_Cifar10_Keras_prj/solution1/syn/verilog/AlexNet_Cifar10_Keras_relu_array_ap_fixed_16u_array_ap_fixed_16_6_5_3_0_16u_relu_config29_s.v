// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AlexNet_Cifar10_Keras_relu_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_relu_config29_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer26_out_dout,
        layer26_out_num_data_valid,
        layer26_out_fifo_cap,
        layer26_out_empty_n,
        layer26_out_read,
        layer29_out_din,
        layer29_out_num_data_valid,
        layer29_out_fifo_cap,
        layer29_out_full_n,
        layer29_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] layer26_out_dout;
input  [1:0] layer26_out_num_data_valid;
input  [1:0] layer26_out_fifo_cap;
input   layer26_out_empty_n;
output   layer26_out_read;
output  [255:0] layer29_out_din;
input  [1:0] layer29_out_num_data_valid;
input  [1:0] layer29_out_fifo_cap;
input   layer29_out_full_n;
output   layer29_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer26_out_read;
reg layer29_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer26_out_blk_n;
reg    layer29_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [14:0] select_ln51_fu_445_p3;
reg   [14:0] select_ln51_reg_748;
wire   [14:0] select_ln51_63_fu_459_p3;
reg   [14:0] select_ln51_63_reg_753;
wire   [14:0] select_ln51_64_fu_473_p3;
reg   [14:0] select_ln51_64_reg_758;
wire   [14:0] select_ln51_65_fu_487_p3;
reg   [14:0] select_ln51_65_reg_763;
wire   [14:0] select_ln51_66_fu_501_p3;
reg   [14:0] select_ln51_66_reg_768;
wire   [14:0] select_ln51_67_fu_515_p3;
reg   [14:0] select_ln51_67_reg_773;
wire   [14:0] select_ln51_68_fu_529_p3;
reg   [14:0] select_ln51_68_reg_778;
wire   [14:0] select_ln51_69_fu_543_p3;
reg   [14:0] select_ln51_69_reg_783;
wire   [14:0] select_ln51_70_fu_557_p3;
reg   [14:0] select_ln51_70_reg_788;
wire   [14:0] select_ln51_71_fu_571_p3;
reg   [14:0] select_ln51_71_reg_793;
wire   [14:0] select_ln51_72_fu_585_p3;
reg   [14:0] select_ln51_72_reg_798;
wire   [14:0] select_ln51_73_fu_599_p3;
reg   [14:0] select_ln51_73_reg_803;
wire   [14:0] select_ln51_74_fu_613_p3;
reg   [14:0] select_ln51_74_reg_808;
wire   [14:0] select_ln51_75_fu_627_p3;
reg   [14:0] select_ln51_75_reg_813;
wire   [14:0] select_ln51_76_fu_641_p3;
reg   [14:0] select_ln51_76_reg_818;
wire   [14:0] select_ln51_77_fu_655_p3;
reg   [14:0] select_ln51_77_reg_823;
reg    ap_block_state1;
wire   [15:0] in_data_data_fu_131_p1;
wire   [0:0] icmp_ln1695_fu_439_p2;
wire   [14:0] trunc_ln145_71_fu_135_p1;
wire   [15:0] in_data_data_20_fu_159_p4;
wire   [0:0] icmp_ln1695_74_fu_453_p2;
wire   [14:0] trunc_ln_fu_169_p4;
wire   [15:0] in_data_data_21_fu_179_p4;
wire   [0:0] icmp_ln1695_75_fu_467_p2;
wire   [14:0] trunc_ln44_7_fu_189_p4;
wire   [15:0] in_data_data_22_fu_199_p4;
wire   [0:0] icmp_ln1695_76_fu_481_p2;
wire   [14:0] trunc_ln44_8_fu_209_p4;
wire   [15:0] tmp_fu_219_p4;
wire   [0:0] icmp_ln1695_77_fu_495_p2;
wire   [14:0] trunc_ln145_s_fu_229_p4;
wire   [15:0] tmp_s_fu_239_p4;
wire   [0:0] icmp_ln1695_78_fu_509_p2;
wire   [14:0] trunc_ln145_61_fu_249_p4;
wire   [15:0] tmp_59_fu_259_p4;
wire   [0:0] icmp_ln1695_79_fu_523_p2;
wire   [14:0] trunc_ln145_62_fu_269_p4;
wire   [15:0] tmp_60_fu_279_p4;
wire   [0:0] icmp_ln1695_80_fu_537_p2;
wire   [14:0] trunc_ln145_63_fu_289_p4;
wire   [15:0] tmp_61_fu_299_p4;
wire   [0:0] icmp_ln1695_81_fu_551_p2;
wire   [14:0] trunc_ln145_64_fu_309_p4;
wire   [15:0] tmp_62_fu_319_p4;
wire   [0:0] icmp_ln1695_82_fu_565_p2;
wire   [14:0] trunc_ln145_65_fu_329_p4;
wire   [15:0] tmp_63_fu_339_p4;
wire   [0:0] icmp_ln1695_83_fu_579_p2;
wire   [14:0] trunc_ln145_66_fu_349_p4;
wire   [15:0] tmp_64_fu_359_p4;
wire   [0:0] icmp_ln1695_84_fu_593_p2;
wire   [14:0] trunc_ln145_67_fu_369_p4;
wire   [15:0] tmp_65_fu_379_p4;
wire   [0:0] icmp_ln1695_85_fu_607_p2;
wire   [14:0] trunc_ln145_68_fu_389_p4;
wire   [15:0] tmp_66_fu_399_p4;
wire   [0:0] icmp_ln1695_86_fu_621_p2;
wire   [14:0] trunc_ln145_69_fu_409_p4;
wire   [15:0] trunc_ln145_72_fu_139_p4;
wire   [0:0] icmp_ln1695_87_fu_635_p2;
wire   [14:0] trunc_ln145_70_fu_419_p4;
wire   [15:0] trunc_ln145_73_fu_149_p4;
wire   [0:0] icmp_ln1695_88_fu_649_p2;
wire   [14:0] trunc_ln3_fu_429_p4;
wire   [15:0] zext_ln1695_74_fu_705_p1;
wire   [15:0] zext_ln1695_73_fu_702_p1;
wire   [15:0] zext_ln1695_72_fu_699_p1;
wire   [15:0] zext_ln1695_71_fu_696_p1;
wire   [15:0] zext_ln1695_70_fu_693_p1;
wire   [15:0] zext_ln1695_69_fu_690_p1;
wire   [15:0] zext_ln1695_68_fu_687_p1;
wire   [15:0] zext_ln1695_67_fu_684_p1;
wire   [15:0] zext_ln1695_66_fu_681_p1;
wire   [15:0] zext_ln1695_65_fu_678_p1;
wire   [15:0] zext_ln1695_64_fu_675_p1;
wire   [15:0] zext_ln1695_63_fu_672_p1;
wire   [15:0] zext_ln1695_62_fu_669_p1;
wire   [15:0] zext_ln1695_61_fu_666_p1;
wire   [15:0] zext_ln1695_fu_663_p1;
wire   [254:0] or_ln174_s_fu_708_p17;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer29_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        select_ln51_63_reg_753 <= select_ln51_63_fu_459_p3;
        select_ln51_64_reg_758 <= select_ln51_64_fu_473_p3;
        select_ln51_65_reg_763 <= select_ln51_65_fu_487_p3;
        select_ln51_66_reg_768 <= select_ln51_66_fu_501_p3;
        select_ln51_67_reg_773 <= select_ln51_67_fu_515_p3;
        select_ln51_68_reg_778 <= select_ln51_68_fu_529_p3;
        select_ln51_69_reg_783 <= select_ln51_69_fu_543_p3;
        select_ln51_70_reg_788 <= select_ln51_70_fu_557_p3;
        select_ln51_71_reg_793 <= select_ln51_71_fu_571_p3;
        select_ln51_72_reg_798 <= select_ln51_72_fu_585_p3;
        select_ln51_73_reg_803 <= select_ln51_73_fu_599_p3;
        select_ln51_74_reg_808 <= select_ln51_74_fu_613_p3;
        select_ln51_75_reg_813 <= select_ln51_75_fu_627_p3;
        select_ln51_76_reg_818 <= select_ln51_76_fu_641_p3;
        select_ln51_77_reg_823 <= select_ln51_77_fu_655_p3;
        select_ln51_reg_748 <= select_ln51_fu_445_p3;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (layer26_out_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((layer29_out_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer29_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer29_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer26_out_blk_n = layer26_out_empty_n;
    end else begin
        layer26_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (layer26_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer26_out_read = 1'b1;
    end else begin
        layer26_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer29_out_blk_n = layer29_out_full_n;
    end else begin
        layer29_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer29_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        layer29_out_write = 1'b1;
    end else begin
        layer29_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (layer26_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((layer29_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer26_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln1695_74_fu_453_p2 = (($signed(in_data_data_20_fu_159_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_75_fu_467_p2 = (($signed(in_data_data_21_fu_179_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_76_fu_481_p2 = (($signed(in_data_data_22_fu_199_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_77_fu_495_p2 = (($signed(tmp_fu_219_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_78_fu_509_p2 = (($signed(tmp_s_fu_239_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_79_fu_523_p2 = (($signed(tmp_59_fu_259_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_80_fu_537_p2 = (($signed(tmp_60_fu_279_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_81_fu_551_p2 = (($signed(tmp_61_fu_299_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_82_fu_565_p2 = (($signed(tmp_62_fu_319_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_83_fu_579_p2 = (($signed(tmp_63_fu_339_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_84_fu_593_p2 = (($signed(tmp_64_fu_359_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_85_fu_607_p2 = (($signed(tmp_65_fu_379_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_86_fu_621_p2 = (($signed(tmp_66_fu_399_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_87_fu_635_p2 = (($signed(trunc_ln145_72_fu_139_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_88_fu_649_p2 = (($signed(trunc_ln145_73_fu_149_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1695_fu_439_p2 = (($signed(in_data_data_fu_131_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_data_20_fu_159_p4 = {{layer26_out_dout[31:16]}};

assign in_data_data_21_fu_179_p4 = {{layer26_out_dout[47:32]}};

assign in_data_data_22_fu_199_p4 = {{layer26_out_dout[63:48]}};

assign in_data_data_fu_131_p1 = layer26_out_dout[15:0];

assign layer29_out_din = or_ln174_s_fu_708_p17;

assign or_ln174_s_fu_708_p17 = {{{{{{{{{{{{{{{{select_ln51_77_reg_823}, {zext_ln1695_74_fu_705_p1}}, {zext_ln1695_73_fu_702_p1}}, {zext_ln1695_72_fu_699_p1}}, {zext_ln1695_71_fu_696_p1}}, {zext_ln1695_70_fu_693_p1}}, {zext_ln1695_69_fu_690_p1}}, {zext_ln1695_68_fu_687_p1}}, {zext_ln1695_67_fu_684_p1}}, {zext_ln1695_66_fu_681_p1}}, {zext_ln1695_65_fu_678_p1}}, {zext_ln1695_64_fu_675_p1}}, {zext_ln1695_63_fu_672_p1}}, {zext_ln1695_62_fu_669_p1}}, {zext_ln1695_61_fu_666_p1}}, {zext_ln1695_fu_663_p1}};

assign select_ln51_63_fu_459_p3 = ((icmp_ln1695_74_fu_453_p2[0:0] == 1'b1) ? trunc_ln_fu_169_p4 : 15'd0);

assign select_ln51_64_fu_473_p3 = ((icmp_ln1695_75_fu_467_p2[0:0] == 1'b1) ? trunc_ln44_7_fu_189_p4 : 15'd0);

assign select_ln51_65_fu_487_p3 = ((icmp_ln1695_76_fu_481_p2[0:0] == 1'b1) ? trunc_ln44_8_fu_209_p4 : 15'd0);

assign select_ln51_66_fu_501_p3 = ((icmp_ln1695_77_fu_495_p2[0:0] == 1'b1) ? trunc_ln145_s_fu_229_p4 : 15'd0);

assign select_ln51_67_fu_515_p3 = ((icmp_ln1695_78_fu_509_p2[0:0] == 1'b1) ? trunc_ln145_61_fu_249_p4 : 15'd0);

assign select_ln51_68_fu_529_p3 = ((icmp_ln1695_79_fu_523_p2[0:0] == 1'b1) ? trunc_ln145_62_fu_269_p4 : 15'd0);

assign select_ln51_69_fu_543_p3 = ((icmp_ln1695_80_fu_537_p2[0:0] == 1'b1) ? trunc_ln145_63_fu_289_p4 : 15'd0);

assign select_ln51_70_fu_557_p3 = ((icmp_ln1695_81_fu_551_p2[0:0] == 1'b1) ? trunc_ln145_64_fu_309_p4 : 15'd0);

assign select_ln51_71_fu_571_p3 = ((icmp_ln1695_82_fu_565_p2[0:0] == 1'b1) ? trunc_ln145_65_fu_329_p4 : 15'd0);

assign select_ln51_72_fu_585_p3 = ((icmp_ln1695_83_fu_579_p2[0:0] == 1'b1) ? trunc_ln145_66_fu_349_p4 : 15'd0);

assign select_ln51_73_fu_599_p3 = ((icmp_ln1695_84_fu_593_p2[0:0] == 1'b1) ? trunc_ln145_67_fu_369_p4 : 15'd0);

assign select_ln51_74_fu_613_p3 = ((icmp_ln1695_85_fu_607_p2[0:0] == 1'b1) ? trunc_ln145_68_fu_389_p4 : 15'd0);

assign select_ln51_75_fu_627_p3 = ((icmp_ln1695_86_fu_621_p2[0:0] == 1'b1) ? trunc_ln145_69_fu_409_p4 : 15'd0);

assign select_ln51_76_fu_641_p3 = ((icmp_ln1695_87_fu_635_p2[0:0] == 1'b1) ? trunc_ln145_70_fu_419_p4 : 15'd0);

assign select_ln51_77_fu_655_p3 = ((icmp_ln1695_88_fu_649_p2[0:0] == 1'b1) ? trunc_ln3_fu_429_p4 : 15'd0);

assign select_ln51_fu_445_p3 = ((icmp_ln1695_fu_439_p2[0:0] == 1'b1) ? trunc_ln145_71_fu_135_p1 : 15'd0);

assign start_out = real_start;

assign tmp_59_fu_259_p4 = {{layer26_out_dout[111:96]}};

assign tmp_60_fu_279_p4 = {{layer26_out_dout[127:112]}};

assign tmp_61_fu_299_p4 = {{layer26_out_dout[143:128]}};

assign tmp_62_fu_319_p4 = {{layer26_out_dout[159:144]}};

assign tmp_63_fu_339_p4 = {{layer26_out_dout[175:160]}};

assign tmp_64_fu_359_p4 = {{layer26_out_dout[191:176]}};

assign tmp_65_fu_379_p4 = {{layer26_out_dout[207:192]}};

assign tmp_66_fu_399_p4 = {{layer26_out_dout[223:208]}};

assign tmp_fu_219_p4 = {{layer26_out_dout[79:64]}};

assign tmp_s_fu_239_p4 = {{layer26_out_dout[95:80]}};

assign trunc_ln145_61_fu_249_p4 = {{layer26_out_dout[94:80]}};

assign trunc_ln145_62_fu_269_p4 = {{layer26_out_dout[110:96]}};

assign trunc_ln145_63_fu_289_p4 = {{layer26_out_dout[126:112]}};

assign trunc_ln145_64_fu_309_p4 = {{layer26_out_dout[142:128]}};

assign trunc_ln145_65_fu_329_p4 = {{layer26_out_dout[158:144]}};

assign trunc_ln145_66_fu_349_p4 = {{layer26_out_dout[174:160]}};

assign trunc_ln145_67_fu_369_p4 = {{layer26_out_dout[190:176]}};

assign trunc_ln145_68_fu_389_p4 = {{layer26_out_dout[206:192]}};

assign trunc_ln145_69_fu_409_p4 = {{layer26_out_dout[222:208]}};

assign trunc_ln145_70_fu_419_p4 = {{layer26_out_dout[238:224]}};

assign trunc_ln145_71_fu_135_p1 = layer26_out_dout[14:0];

assign trunc_ln145_72_fu_139_p4 = {{layer26_out_dout[239:224]}};

assign trunc_ln145_73_fu_149_p4 = {{layer26_out_dout[255:240]}};

assign trunc_ln145_s_fu_229_p4 = {{layer26_out_dout[78:64]}};

assign trunc_ln3_fu_429_p4 = {{layer26_out_dout[254:240]}};

assign trunc_ln44_7_fu_189_p4 = {{layer26_out_dout[46:32]}};

assign trunc_ln44_8_fu_209_p4 = {{layer26_out_dout[62:48]}};

assign trunc_ln_fu_169_p4 = {{layer26_out_dout[30:16]}};

assign zext_ln1695_61_fu_666_p1 = select_ln51_63_reg_753;

assign zext_ln1695_62_fu_669_p1 = select_ln51_64_reg_758;

assign zext_ln1695_63_fu_672_p1 = select_ln51_65_reg_763;

assign zext_ln1695_64_fu_675_p1 = select_ln51_66_reg_768;

assign zext_ln1695_65_fu_678_p1 = select_ln51_67_reg_773;

assign zext_ln1695_66_fu_681_p1 = select_ln51_68_reg_778;

assign zext_ln1695_67_fu_684_p1 = select_ln51_69_reg_783;

assign zext_ln1695_68_fu_687_p1 = select_ln51_70_reg_788;

assign zext_ln1695_69_fu_690_p1 = select_ln51_71_reg_793;

assign zext_ln1695_70_fu_693_p1 = select_ln51_72_reg_798;

assign zext_ln1695_71_fu_696_p1 = select_ln51_73_reg_803;

assign zext_ln1695_72_fu_699_p1 = select_ln51_74_reg_808;

assign zext_ln1695_73_fu_702_p1 = select_ln51_75_reg_813;

assign zext_ln1695_74_fu_705_p1 = select_ln51_76_reg_818;

assign zext_ln1695_fu_663_p1 = select_ln51_reg_748;

endmodule //AlexNet_Cifar10_Keras_relu_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_relu_config29_s
