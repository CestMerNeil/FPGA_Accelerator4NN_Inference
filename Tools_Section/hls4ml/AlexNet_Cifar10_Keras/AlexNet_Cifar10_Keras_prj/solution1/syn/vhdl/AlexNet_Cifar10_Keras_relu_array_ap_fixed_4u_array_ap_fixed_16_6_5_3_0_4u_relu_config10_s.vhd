-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AlexNet_Cifar10_Keras_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer7_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    layer7_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer7_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer7_out_empty_n : IN STD_LOGIC;
    layer7_out_read : OUT STD_LOGIC;
    layer10_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer10_out_full_n : IN STD_LOGIC;
    layer10_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of AlexNet_Cifar10_Keras_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer7_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer10_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_data_fu_180_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_reg_266 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_14_fu_194_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_14_reg_271 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_16_fu_208_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_16_reg_276 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_18_fu_222_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_data_18_reg_281 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_16_fu_95_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_15 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_data_data_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_62_fu_110_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_14_fu_134_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_71_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_144_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_15_fu_114_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_72_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_5_fu_154_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_16_fu_124_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_73_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_6_fu_164_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln45_8_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_7_fu_233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln174_s_fu_239_p5 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_118 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component AlexNet_Cifar10_Keras_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component AlexNet_Cifar10_Keras_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_118)) then
                if ((icmp_ln41_fu_89_p2 = ap_const_lv1_0)) then 
                    i_fu_64 <= i_16_fu_95_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_data_14_reg_271 <= out_data_data_14_fu_194_p3;
                out_data_data_16_reg_276 <= out_data_data_16_fu_208_p3;
                out_data_data_18_reg_281 <= out_data_data_18_fu_222_p3;
                out_data_data_reg_266 <= out_data_data_fu_180_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer7_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer7_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer7_out_empty_n, layer10_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer7_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer7_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer7_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer10_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer10_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_118_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_118 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_89_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_89_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_64, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_15 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_15 <= i_fu_64;
        end if; 
    end process;

    i_16_fu_95_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_15) + unsigned(ap_const_lv9_1));
    icmp_ln1695_71_fu_188_p2 <= "1" when (signed(in_data_data_14_fu_134_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_72_fu_202_p2 <= "1" when (signed(in_data_data_15_fu_114_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_73_fu_216_p2 <= "1" when (signed(in_data_data_16_fu_124_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_fu_174_p2 <= "1" when (signed(in_data_data_fu_106_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln41_fu_89_p2 <= "1" when (ap_sig_allocacmp_i_15 = ap_const_lv9_100) else "0";
    in_data_data_14_fu_134_p4 <= layer7_out_dout(31 downto 16);
    in_data_data_15_fu_114_p4 <= layer7_out_dout(47 downto 32);
    in_data_data_16_fu_124_p4 <= layer7_out_dout(63 downto 48);
    in_data_data_fu_106_p1 <= layer7_out_dout(16 - 1 downto 0);

    layer10_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer10_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer10_out_blk_n <= layer10_out_full_n;
        else 
            layer10_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer10_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln174_s_fu_239_p5),64));

    layer10_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer10_out_write <= ap_const_logic_1;
        else 
            layer10_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer7_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer7_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer7_out_blk_n <= layer7_out_empty_n;
        else 
            layer7_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer7_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer7_out_read <= ap_const_logic_1;
        else 
            layer7_out_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln174_s_fu_239_p5 <= (((out_data_data_18_reg_281 & zext_ln45_8_fu_236_p1) & zext_ln45_7_fu_233_p1) & zext_ln45_fu_230_p1);
    out_data_data_14_fu_194_p3 <= 
        trunc_ln_fu_144_p4 when (icmp_ln1695_71_fu_188_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_data_16_fu_208_p3 <= 
        trunc_ln44_5_fu_154_p4 when (icmp_ln1695_72_fu_202_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_data_18_fu_222_p3 <= 
        trunc_ln44_6_fu_164_p4 when (icmp_ln1695_73_fu_216_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_data_fu_180_p3 <= 
        trunc_ln145_62_fu_110_p1 when (icmp_ln1695_fu_174_p2(0) = '1') else 
        ap_const_lv15_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln145_62_fu_110_p1 <= layer7_out_dout(15 - 1 downto 0);
    trunc_ln44_5_fu_154_p4 <= layer7_out_dout(46 downto 32);
    trunc_ln44_6_fu_164_p4 <= layer7_out_dout(62 downto 48);
    trunc_ln_fu_144_p4 <= layer7_out_dout(30 downto 16);
    zext_ln45_7_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_14_reg_271),16));
    zext_ln45_8_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_16_reg_276),16));
    zext_ln45_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_reg_266),16));
end behav;
