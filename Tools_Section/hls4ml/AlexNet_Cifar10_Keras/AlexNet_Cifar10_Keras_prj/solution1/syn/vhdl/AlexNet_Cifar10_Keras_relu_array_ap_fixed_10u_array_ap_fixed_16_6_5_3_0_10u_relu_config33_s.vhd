-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AlexNet_Cifar10_Keras_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config33_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer30_out_dout : IN STD_LOGIC_VECTOR (159 downto 0);
    layer30_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer30_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer30_out_empty_n : IN STD_LOGIC;
    layer30_out_read : OUT STD_LOGIC;
    layer33_out_din : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer33_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer33_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer33_out_full_n : IN STD_LOGIC;
    layer33_out_write : OUT STD_LOGIC );
end;


architecture behav of AlexNet_Cifar10_Keras_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config33_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer30_out_blk_n : STD_LOGIC;
    signal layer33_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln51_fu_289_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_reg_478 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_100_fu_303_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_100_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_101_fu_317_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_101_reg_488 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_102_fu_331_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_102_reg_493 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_103_fu_345_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_103_reg_498 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_104_fu_359_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_104_reg_503 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_105_fu_373_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_105_reg_508 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_106_fu_387_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_106_reg_513 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_107_fu_401_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_107_reg_518 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_108_fu_415_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_108_reg_523 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal in_data_data_fu_95_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_95_fu_99_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_38_fu_123_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_119_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_133_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_39_fu_143_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_120_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_153_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_data_40_fu_163_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_121_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_2_fu_173_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_183_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_122_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_s_fu_193_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_203_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_123_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_91_fu_213_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_83_fu_223_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_124_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_92_fu_233_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_84_fu_243_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_125_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_93_fu_253_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln145_96_fu_103_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_126_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_94_fu_263_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln145_97_fu_113_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1695_127_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_273_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1695_102_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_101_fu_444_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_100_fu_441_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_99_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_98_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_97_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_96_fu_429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_95_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1695_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln174_s_fu_450_p11 : STD_LOGIC_VECTOR (158 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer33_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                select_ln51_100_reg_483 <= select_ln51_100_fu_303_p3;
                select_ln51_101_reg_488 <= select_ln51_101_fu_317_p3;
                select_ln51_102_reg_493 <= select_ln51_102_fu_331_p3;
                select_ln51_103_reg_498 <= select_ln51_103_fu_345_p3;
                select_ln51_104_reg_503 <= select_ln51_104_fu_359_p3;
                select_ln51_105_reg_508 <= select_ln51_105_fu_373_p3;
                select_ln51_106_reg_513 <= select_ln51_106_fu_387_p3;
                select_ln51_107_reg_518 <= select_ln51_107_fu_401_p3;
                select_ln51_108_reg_523 <= select_ln51_108_fu_415_p3;
                select_ln51_reg_478 <= select_ln51_fu_289_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer30_out_empty_n, layer33_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer30_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer33_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer30_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer30_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer33_out_full_n)
    begin
        if ((layer33_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer30_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer30_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer33_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer33_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln1695_119_fu_297_p2 <= "1" when (signed(in_data_data_38_fu_123_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_120_fu_311_p2 <= "1" when (signed(in_data_data_39_fu_143_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_121_fu_325_p2 <= "1" when (signed(in_data_data_40_fu_163_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_122_fu_339_p2 <= "1" when (signed(tmp_fu_183_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_123_fu_353_p2 <= "1" when (signed(tmp_s_fu_203_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_124_fu_367_p2 <= "1" when (signed(tmp_83_fu_223_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_125_fu_381_p2 <= "1" when (signed(tmp_84_fu_243_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_126_fu_395_p2 <= "1" when (signed(trunc_ln145_96_fu_103_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_127_fu_409_p2 <= "1" when (signed(trunc_ln145_97_fu_113_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1695_fu_283_p2 <= "1" when (signed(in_data_data_fu_95_p1) > signed(ap_const_lv16_0)) else "0";
    in_data_data_38_fu_123_p4 <= layer30_out_dout(31 downto 16);
    in_data_data_39_fu_143_p4 <= layer30_out_dout(47 downto 32);
    in_data_data_40_fu_163_p4 <= layer30_out_dout(63 downto 48);
    in_data_data_fu_95_p1 <= layer30_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer33_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer33_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer30_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer30_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer30_out_blk_n <= layer30_out_empty_n;
        else 
            layer30_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer30_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer30_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer30_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer30_out_read <= ap_const_logic_1;
        else 
            layer30_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer33_out_blk_n_assign_proc : process(layer33_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer33_out_blk_n <= layer33_out_full_n;
        else 
            layer33_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer33_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln174_s_fu_450_p11),160));

    layer33_out_write_assign_proc : process(layer33_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer33_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer33_out_write <= ap_const_logic_1;
        else 
            layer33_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln174_s_fu_450_p11 <= (((((((((select_ln51_108_reg_523 & zext_ln1695_102_fu_447_p1) & zext_ln1695_101_fu_444_p1) & zext_ln1695_100_fu_441_p1) & zext_ln1695_99_fu_438_p1) & zext_ln1695_98_fu_435_p1) & zext_ln1695_97_fu_432_p1) & zext_ln1695_96_fu_429_p1) & zext_ln1695_95_fu_426_p1) & zext_ln1695_fu_423_p1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_100_fu_303_p3 <= 
        trunc_ln_fu_133_p4 when (icmp_ln1695_119_fu_297_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_101_fu_317_p3 <= 
        trunc_ln44_s_fu_153_p4 when (icmp_ln1695_120_fu_311_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_102_fu_331_p3 <= 
        trunc_ln44_2_fu_173_p4 when (icmp_ln1695_121_fu_325_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_103_fu_345_p3 <= 
        trunc_ln145_s_fu_193_p4 when (icmp_ln1695_122_fu_339_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_104_fu_359_p3 <= 
        trunc_ln145_91_fu_213_p4 when (icmp_ln1695_123_fu_353_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_105_fu_373_p3 <= 
        trunc_ln145_92_fu_233_p4 when (icmp_ln1695_124_fu_367_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_106_fu_387_p3 <= 
        trunc_ln145_93_fu_253_p4 when (icmp_ln1695_125_fu_381_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_107_fu_401_p3 <= 
        trunc_ln145_94_fu_263_p4 when (icmp_ln1695_126_fu_395_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_108_fu_415_p3 <= 
        trunc_ln6_fu_273_p4 when (icmp_ln1695_127_fu_409_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_289_p3 <= 
        trunc_ln145_95_fu_99_p1 when (icmp_ln1695_fu_283_p2(0) = '1') else 
        ap_const_lv15_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_83_fu_223_p4 <= layer30_out_dout(111 downto 96);
    tmp_84_fu_243_p4 <= layer30_out_dout(127 downto 112);
    tmp_fu_183_p4 <= layer30_out_dout(79 downto 64);
    tmp_s_fu_203_p4 <= layer30_out_dout(95 downto 80);
    trunc_ln145_91_fu_213_p4 <= layer30_out_dout(94 downto 80);
    trunc_ln145_92_fu_233_p4 <= layer30_out_dout(110 downto 96);
    trunc_ln145_93_fu_253_p4 <= layer30_out_dout(126 downto 112);
    trunc_ln145_94_fu_263_p4 <= layer30_out_dout(142 downto 128);
    trunc_ln145_95_fu_99_p1 <= layer30_out_dout(15 - 1 downto 0);
    trunc_ln145_96_fu_103_p4 <= layer30_out_dout(143 downto 128);
    trunc_ln145_97_fu_113_p4 <= layer30_out_dout(159 downto 144);
    trunc_ln145_s_fu_193_p4 <= layer30_out_dout(78 downto 64);
    trunc_ln44_2_fu_173_p4 <= layer30_out_dout(62 downto 48);
    trunc_ln44_s_fu_153_p4 <= layer30_out_dout(46 downto 32);
    trunc_ln6_fu_273_p4 <= layer30_out_dout(158 downto 144);
    trunc_ln_fu_133_p4 <= layer30_out_dout(30 downto 16);
    zext_ln1695_100_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_105_reg_508),16));
    zext_ln1695_101_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_106_reg_513),16));
    zext_ln1695_102_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_107_reg_518),16));
    zext_ln1695_95_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_100_reg_483),16));
    zext_ln1695_96_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_101_reg_488),16));
    zext_ln1695_97_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_102_reg_493),16));
    zext_ln1695_98_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_103_reg_498),16));
    zext_ln1695_99_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_104_reg_503),16));
    zext_ln1695_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_478),16));
end behav;
