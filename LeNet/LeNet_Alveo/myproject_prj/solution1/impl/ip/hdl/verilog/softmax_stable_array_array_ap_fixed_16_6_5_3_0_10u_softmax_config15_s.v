// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state10_pp0_stage4_iter1;
wire    ap_block_state15_pp0_stage4_iter2;
wire    ap_block_state20_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
reg   [9:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [16:0] exp_table3_q0;
reg   [9:0] exp_table3_address1;
reg    exp_table3_ce1;
wire   [16:0] exp_table3_q1;
wire   [9:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [17:0] invert_table4_q0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    io_acc_block_signal_op34;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state21_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_0_V_reg_2286;
reg  signed [15:0] data_array_1_V_reg_2293;
reg  signed [15:0] data_array_2_V_reg_2300;
reg  signed [15:0] data_array_3_V_reg_2307;
reg  signed [15:0] data_array_4_V_reg_2314;
reg  signed [15:0] data_array_5_V_reg_2321;
reg  signed [15:0] data_array_6_V_reg_2328;
reg  signed [15:0] data_array_7_V_reg_2335;
reg  signed [15:0] data_array_8_V_reg_2342;
reg  signed [15:0] data_array_9_V_reg_2349;
wire   [0:0] icmp_ln1496_fu_771_p2;
reg   [0:0] icmp_ln1496_reg_2356;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_state17_pp0_stage1_iter3;
wire    ap_block_state22_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1496_1_fu_775_p2;
reg   [0:0] icmp_ln1496_1_reg_2361;
wire   [0:0] icmp_ln1496_3_fu_779_p2;
reg   [0:0] icmp_ln1496_3_reg_2366;
wire   [0:0] icmp_ln1496_4_fu_783_p2;
reg   [0:0] icmp_ln1496_4_reg_2371;
wire   [15:0] select_ln65_2_fu_803_p3;
reg   [15:0] select_ln65_2_reg_2376;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_state18_pp0_stage2_iter3;
wire    io_acc_block_signal_op386;
reg    ap_block_state23_pp0_stage2_iter4;
reg    ap_block_pp0_stage2_11001;
wire   [15:0] select_ln65_5_fu_827_p3;
reg   [15:0] select_ln65_5_reg_2382;
wire   [15:0] select_ln65_6_fu_839_p3;
reg   [15:0] select_ln65_6_reg_2388;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state19_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln1496_7_fu_845_p2;
reg   [0:0] icmp_ln1496_7_reg_2394;
wire   [15:0] x_max_V_fu_859_p3;
reg   [15:0] x_max_V_reg_2399;
wire   [9:0] y_V_fu_1445_p3;
reg   [9:0] y_V_reg_2404;
wire   [9:0] y_V_1_fu_1479_p3;
reg   [9:0] y_V_1_reg_2409;
wire   [9:0] y_V_2_fu_1513_p3;
reg   [9:0] y_V_2_reg_2414;
wire   [9:0] y_V_3_fu_1547_p3;
reg   [9:0] y_V_3_reg_2419;
wire   [9:0] y_V_4_fu_1581_p3;
reg   [9:0] y_V_4_reg_2424;
wire   [9:0] y_V_5_fu_1615_p3;
reg   [9:0] y_V_5_reg_2429;
wire   [9:0] y_V_6_fu_1649_p3;
reg   [9:0] y_V_6_reg_2434;
wire   [9:0] y_V_7_fu_1683_p3;
reg   [9:0] y_V_7_reg_2439;
wire   [9:0] y_V_8_fu_1717_p3;
reg   [9:0] y_V_8_reg_2444;
wire   [9:0] y_V_9_fu_1751_p3;
reg   [9:0] y_V_9_reg_2449;
reg   [16:0] exp_res_0_V_1_reg_2464;
reg   [16:0] exp_res_0_V_1_reg_2464_pp0_iter2_reg;
reg   [16:0] exp_res_0_V_1_reg_2464_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_1_reg_2470;
reg   [16:0] exp_res_1_V_1_reg_2470_pp0_iter2_reg;
reg   [16:0] exp_res_1_V_1_reg_2470_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_1_reg_2486;
reg   [16:0] exp_res_2_V_1_reg_2486_pp0_iter2_reg;
reg   [16:0] exp_res_2_V_1_reg_2486_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_1_reg_2492;
reg   [16:0] exp_res_3_V_1_reg_2492_pp0_iter2_reg;
reg   [16:0] exp_res_3_V_1_reg_2492_pp0_iter3_reg;
reg   [16:0] exp_res_4_V_1_reg_2508;
reg   [16:0] exp_res_4_V_1_reg_2508_pp0_iter2_reg;
reg   [16:0] exp_res_4_V_1_reg_2508_pp0_iter3_reg;
reg   [16:0] exp_res_5_V_1_reg_2514;
reg   [16:0] exp_res_5_V_1_reg_2514_pp0_iter2_reg;
reg   [16:0] exp_res_5_V_1_reg_2514_pp0_iter3_reg;
reg   [16:0] exp_res_6_V_1_reg_2530;
reg   [16:0] exp_res_6_V_1_reg_2530_pp0_iter3_reg;
reg   [16:0] exp_res_7_V_1_reg_2536;
reg   [16:0] exp_res_7_V_1_reg_2536_pp0_iter3_reg;
reg   [16:0] exp_res_8_V_1_reg_2552;
reg   [16:0] exp_res_8_V_1_reg_2552_pp0_iter3_reg;
reg   [16:0] exp_res_9_V_1_reg_2559;
reg   [16:0] exp_res_9_V_1_reg_2559_pp0_iter3_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_return;
reg  signed [17:0] p_Val2_19_reg_2566;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_return;
reg  signed [17:0] p_Val2_1_reg_2572;
wire  signed [17:0] p_Val2_26_fu_1919_p3;
reg  signed [17:0] p_Val2_26_reg_2578;
wire   [16:0] p_Val2_27_fu_1951_p3;
reg   [16:0] p_Val2_27_reg_2584;
wire   [9:0] y_V_10_fu_2051_p3;
reg   [9:0] y_V_10_reg_2590;
reg   [17:0] inv_exp_sum_V_reg_2600;
wire  signed [25:0] sext_ln241_fu_2063_p1;
reg   [15:0] tmp_data_0_V_reg_2669;
reg   [15:0] tmp_data_1_V_reg_2674;
reg   [15:0] tmp_data_2_V_reg_2679;
reg   [15:0] tmp_data_3_V_reg_2684;
reg   [15:0] tmp_data_4_V_reg_2689;
reg   [15:0] tmp_data_5_V_reg_2694;
reg   [15:0] tmp_data_6_V_reg_2699;
reg   [15:0] tmp_data_7_V_reg_2704;
reg   [15:0] tmp_data_8_V_reg_2709;
reg   [15:0] tmp_data_9_V_reg_2714;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_ce;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call233;
wire    ap_block_state8_pp0_stage2_iter1_ignore_call233;
wire    ap_block_state13_pp0_stage2_iter2_ignore_call233;
wire    ap_block_state18_pp0_stage2_iter3_ignore_call233;
reg    ap_block_state23_pp0_stage2_iter4_ignore_call233;
reg    ap_block_pp0_stage2_11001_ignoreCallOp244;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call233;
wire    ap_block_state9_pp0_stage3_iter1_ignore_call233;
wire    ap_block_state14_pp0_stage3_iter2_ignore_call233;
wire    ap_block_state19_pp0_stage3_iter3_ignore_call233;
wire    ap_block_pp0_stage3_11001_ignoreCallOp246;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call233;
wire    ap_block_state10_pp0_stage4_iter1_ignore_call233;
wire    ap_block_state15_pp0_stage4_iter2_ignore_call233;
wire    ap_block_state20_pp0_stage4_iter3_ignore_call233;
wire    ap_block_pp0_stage4_11001_ignoreCallOp248;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call233;
wire    ap_block_state6_pp0_stage0_iter1_ignore_call233;
wire    ap_block_state11_pp0_stage0_iter2_ignore_call233;
wire    ap_block_state16_pp0_stage0_iter3_ignore_call233;
wire    ap_block_state21_pp0_stage0_iter4_ignore_call233;
reg    ap_block_pp0_stage0_11001_ignoreCallOp250;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_ce;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call234;
wire    ap_block_state8_pp0_stage2_iter1_ignore_call234;
wire    ap_block_state13_pp0_stage2_iter2_ignore_call234;
wire    ap_block_state18_pp0_stage2_iter3_ignore_call234;
reg    ap_block_state23_pp0_stage2_iter4_ignore_call234;
reg    ap_block_pp0_stage2_11001_ignoreCallOp245;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call234;
wire    ap_block_state9_pp0_stage3_iter1_ignore_call234;
wire    ap_block_state14_pp0_stage3_iter2_ignore_call234;
wire    ap_block_state19_pp0_stage3_iter3_ignore_call234;
wire    ap_block_pp0_stage3_11001_ignoreCallOp247;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call234;
wire    ap_block_state10_pp0_stage4_iter1_ignore_call234;
wire    ap_block_state15_pp0_stage4_iter2_ignore_call234;
wire    ap_block_state20_pp0_stage4_iter3_ignore_call234;
wire    ap_block_pp0_stage4_11001_ignoreCallOp249;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call234;
wire    ap_block_state6_pp0_stage0_iter1_ignore_call234;
wire    ap_block_state11_pp0_stage0_iter2_ignore_call234;
wire    ap_block_state16_pp0_stage0_iter3_ignore_call234;
wire    ap_block_state21_pp0_stage0_iter4_ignore_call234;
reg    ap_block_pp0_stage0_11001_ignoreCallOp251;
reg   [16:0] exp_res_0_V_fu_128;
reg   [16:0] exp_res_1_V_fu_132;
reg   [16:0] exp_res_2_V_fu_136;
reg   [16:0] exp_res_3_V_fu_140;
reg   [16:0] exp_res_4_V_fu_144;
reg   [16:0] exp_res_5_V_fu_148;
reg   [16:0] exp_res_6_V_fu_152;
reg   [16:0] exp_res_7_V_fu_156;
reg   [16:0] exp_res_8_V_fu_160;
reg   [16:0] exp_res_9_V_fu_164;
wire   [63:0] zext_ln225_fu_1759_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln225_1_fu_1763_p1;
wire   [63:0] zext_ln225_2_fu_1767_p1;
wire   [63:0] zext_ln225_3_fu_1771_p1;
wire   [63:0] zext_ln225_4_fu_1775_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_5_fu_1779_p1;
wire   [63:0] zext_ln225_6_fu_1783_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_7_fu_1787_p1;
wire   [63:0] zext_ln225_8_fu_1791_p1;
wire   [63:0] zext_ln225_9_fu_1795_p1;
wire   [63:0] zext_ln235_fu_2059_p1;
reg    ap_block_pp0_stage2_01001;
wire   [16:0] grp_fu_328_p0;
wire  signed [17:0] grp_fu_328_p1;
wire   [16:0] grp_fu_329_p0;
wire  signed [17:0] grp_fu_329_p1;
wire   [16:0] grp_fu_330_p0;
wire  signed [17:0] grp_fu_330_p1;
wire   [16:0] grp_fu_331_p0;
wire  signed [17:0] grp_fu_331_p1;
wire   [16:0] grp_fu_332_p0;
wire  signed [17:0] grp_fu_332_p1;
wire   [16:0] grp_fu_333_p0;
wire  signed [17:0] grp_fu_333_p1;
wire   [16:0] grp_fu_334_p0;
wire  signed [17:0] grp_fu_334_p1;
wire   [16:0] grp_fu_335_p0;
wire  signed [17:0] grp_fu_335_p1;
wire   [16:0] grp_fu_336_p0;
wire  signed [17:0] grp_fu_336_p1;
wire   [16:0] grp_fu_337_p0;
wire  signed [17:0] grp_fu_337_p1;
wire   [15:0] select_ln65_fu_787_p3;
wire   [15:0] select_ln65_1_fu_792_p3;
wire   [0:0] icmp_ln1496_2_fu_797_p2;
wire   [15:0] select_ln65_3_fu_811_p3;
wire   [15:0] select_ln65_4_fu_816_p3;
wire   [0:0] icmp_ln1496_5_fu_821_p2;
wire   [0:0] icmp_ln1496_6_fu_835_p2;
wire   [15:0] select_ln65_7_fu_849_p3;
wire   [0:0] icmp_ln1496_8_fu_854_p2;
wire  signed [16:0] sext_ln703_fu_866_p1;
wire  signed [16:0] sext_ln703_1_fu_869_p1;
wire   [16:0] sub_ln1193_fu_872_p2;
wire   [0:0] tmp_22_fu_886_p3;
wire   [0:0] tmp_21_fu_878_p3;
wire   [0:0] xor_ln786_fu_894_p2;
wire   [0:0] xor_ln340_fu_912_p2;
wire  signed [16:0] sext_ln703_2_fu_924_p1;
wire   [16:0] sub_ln1193_1_fu_927_p2;
wire   [0:0] tmp_24_fu_941_p3;
wire   [0:0] tmp_23_fu_933_p3;
wire   [0:0] xor_ln786_1_fu_949_p2;
wire   [0:0] xor_ln340_1_fu_967_p2;
wire  signed [16:0] sext_ln703_3_fu_979_p1;
wire   [16:0] sub_ln1193_2_fu_982_p2;
wire   [0:0] tmp_26_fu_996_p3;
wire   [0:0] tmp_25_fu_988_p3;
wire   [0:0] xor_ln786_2_fu_1004_p2;
wire   [0:0] xor_ln340_2_fu_1022_p2;
wire  signed [16:0] sext_ln703_4_fu_1034_p1;
wire   [16:0] sub_ln1193_3_fu_1037_p2;
wire   [0:0] tmp_28_fu_1051_p3;
wire   [0:0] tmp_27_fu_1043_p3;
wire   [0:0] xor_ln786_3_fu_1059_p2;
wire   [0:0] xor_ln340_3_fu_1077_p2;
wire  signed [16:0] sext_ln703_5_fu_1089_p1;
wire   [16:0] sub_ln1193_4_fu_1092_p2;
wire   [0:0] tmp_30_fu_1106_p3;
wire   [0:0] tmp_29_fu_1098_p3;
wire   [0:0] xor_ln786_4_fu_1114_p2;
wire   [0:0] xor_ln340_4_fu_1132_p2;
wire  signed [16:0] sext_ln703_6_fu_1144_p1;
wire   [16:0] sub_ln1193_5_fu_1147_p2;
wire   [0:0] tmp_32_fu_1161_p3;
wire   [0:0] tmp_31_fu_1153_p3;
wire   [0:0] xor_ln786_5_fu_1169_p2;
wire   [0:0] xor_ln340_5_fu_1187_p2;
wire  signed [16:0] sext_ln703_7_fu_1199_p1;
wire   [16:0] sub_ln1193_6_fu_1202_p2;
wire   [0:0] tmp_34_fu_1216_p3;
wire   [0:0] tmp_33_fu_1208_p3;
wire   [0:0] xor_ln786_6_fu_1224_p2;
wire   [0:0] xor_ln340_6_fu_1242_p2;
wire  signed [16:0] sext_ln703_8_fu_1254_p1;
wire   [16:0] sub_ln1193_7_fu_1257_p2;
wire   [0:0] tmp_36_fu_1271_p3;
wire   [0:0] tmp_35_fu_1263_p3;
wire   [0:0] xor_ln786_7_fu_1279_p2;
wire   [0:0] xor_ln340_7_fu_1297_p2;
wire  signed [16:0] sext_ln703_9_fu_1309_p1;
wire   [16:0] sub_ln1193_8_fu_1312_p2;
wire   [0:0] tmp_38_fu_1326_p3;
wire   [0:0] tmp_37_fu_1318_p3;
wire   [0:0] xor_ln786_8_fu_1334_p2;
wire   [0:0] xor_ln340_8_fu_1352_p2;
wire  signed [16:0] sext_ln703_10_fu_1364_p1;
wire   [16:0] sub_ln1193_9_fu_1367_p2;
wire   [0:0] tmp_40_fu_1381_p3;
wire   [0:0] tmp_39_fu_1373_p3;
wire   [0:0] xor_ln786_9_fu_1389_p2;
wire   [0:0] xor_ln340_9_fu_1407_p2;
wire   [0:0] xor_ln340_10_fu_906_p2;
wire   [9:0] tmp_fu_1419_p4;
wire   [0:0] and_ln786_fu_900_p2;
wire   [0:0] or_ln340_fu_918_p2;
wire   [9:0] select_ln340_fu_1429_p3;
wire   [9:0] select_ln388_fu_1437_p3;
wire   [0:0] xor_ln340_11_fu_961_p2;
wire   [9:0] tmp_11_fu_1453_p4;
wire   [0:0] and_ln786_1_fu_955_p2;
wire   [0:0] or_ln340_1_fu_973_p2;
wire   [9:0] select_ln340_2_fu_1463_p3;
wire   [9:0] select_ln388_1_fu_1471_p3;
wire   [0:0] xor_ln340_12_fu_1016_p2;
wire   [9:0] tmp_12_fu_1487_p4;
wire   [0:0] and_ln786_2_fu_1010_p2;
wire   [0:0] or_ln340_2_fu_1028_p2;
wire   [9:0] select_ln340_4_fu_1497_p3;
wire   [9:0] select_ln388_2_fu_1505_p3;
wire   [0:0] xor_ln340_13_fu_1071_p2;
wire   [9:0] tmp_13_fu_1521_p4;
wire   [0:0] and_ln786_3_fu_1065_p2;
wire   [0:0] or_ln340_3_fu_1083_p2;
wire   [9:0] select_ln340_6_fu_1531_p3;
wire   [9:0] select_ln388_3_fu_1539_p3;
wire   [0:0] xor_ln340_14_fu_1126_p2;
wire   [9:0] tmp_14_fu_1555_p4;
wire   [0:0] and_ln786_4_fu_1120_p2;
wire   [0:0] or_ln340_4_fu_1138_p2;
wire   [9:0] select_ln340_8_fu_1565_p3;
wire   [9:0] select_ln388_4_fu_1573_p3;
wire   [0:0] xor_ln340_15_fu_1181_p2;
wire   [9:0] tmp_15_fu_1589_p4;
wire   [0:0] and_ln786_5_fu_1175_p2;
wire   [0:0] or_ln340_5_fu_1193_p2;
wire   [9:0] select_ln340_10_fu_1599_p3;
wire   [9:0] select_ln388_5_fu_1607_p3;
wire   [0:0] xor_ln340_16_fu_1236_p2;
wire   [9:0] tmp_16_fu_1623_p4;
wire   [0:0] and_ln786_6_fu_1230_p2;
wire   [0:0] or_ln340_6_fu_1248_p2;
wire   [9:0] select_ln340_12_fu_1633_p3;
wire   [9:0] select_ln388_6_fu_1641_p3;
wire   [0:0] xor_ln340_17_fu_1291_p2;
wire   [9:0] tmp_17_fu_1657_p4;
wire   [0:0] and_ln786_7_fu_1285_p2;
wire   [0:0] or_ln340_7_fu_1303_p2;
wire   [9:0] select_ln340_14_fu_1667_p3;
wire   [9:0] select_ln388_7_fu_1675_p3;
wire   [0:0] xor_ln340_18_fu_1346_p2;
wire   [9:0] tmp_18_fu_1691_p4;
wire   [0:0] and_ln786_8_fu_1340_p2;
wire   [0:0] or_ln340_8_fu_1358_p2;
wire   [9:0] select_ln340_16_fu_1701_p3;
wire   [9:0] select_ln388_8_fu_1709_p3;
wire   [0:0] xor_ln340_19_fu_1401_p2;
wire   [9:0] tmp_19_fu_1725_p4;
wire   [0:0] and_ln786_9_fu_1395_p2;
wire   [0:0] or_ln340_9_fu_1413_p2;
wire   [9:0] select_ln340_18_fu_1735_p3;
wire   [9:0] select_ln388_9_fu_1743_p3;
wire  signed [18:0] lhs_V_fu_1841_p1;
wire  signed [18:0] rhs_V_fu_1844_p1;
wire   [18:0] ret_V_fu_1847_p2;
wire   [17:0] p_Val2_22_fu_1861_p2;
wire   [0:0] p_Result_18_fu_1865_p3;
wire   [0:0] p_Result_s_fu_1853_p3;
wire   [0:0] xor_ln786_10_fu_1873_p2;
wire   [0:0] xor_ln340_21_fu_1891_p2;
wire   [0:0] xor_ln340_20_fu_1885_p2;
wire   [0:0] underflow_fu_1879_p2;
wire   [0:0] or_ln340_10_fu_1897_p2;
wire   [17:0] select_ln340_20_fu_1903_p3;
wire   [17:0] select_ln388_10_fu_1911_p3;
wire   [17:0] p_Val2_24_fu_1930_p1;
wire   [17:0] p_Val2_23_fu_1927_p1;
wire   [17:0] p_Val2_25_fu_1933_p2;
wire   [0:0] p_Result_19_fu_1943_p3;
wire   [16:0] add_ln746_fu_1939_p2;
wire  signed [18:0] lhs_V_1_fu_1962_p1;
wire   [18:0] rhs_V_1_fu_1965_p1;
wire   [18:0] ret_V_1_fu_1968_p2;
wire   [17:0] zext_ln746_fu_1959_p1;
wire   [17:0] p_Val2_29_fu_1982_p2;
wire   [0:0] p_Result_21_fu_1987_p3;
wire   [0:0] p_Result_20_fu_1974_p3;
wire   [0:0] xor_ln786_11_fu_1995_p2;
wire   [0:0] xor_ln340_23_fu_2013_p2;
wire   [0:0] xor_ln340_22_fu_2007_p2;
wire   [9:0] tmp_20_fu_2025_p4;
wire   [0:0] underflow_1_fu_2001_p2;
wire   [0:0] or_ln340_11_fu_2019_p2;
wire   [9:0] select_ln340_22_fu_2035_p3;
wire   [9:0] select_ln388_11_fu_2043_p3;
wire   [25:0] grp_fu_328_p2;
wire   [25:0] grp_fu_335_p2;
wire   [25:0] grp_fu_329_p2;
wire   [25:0] grp_fu_332_p2;
wire   [25:0] grp_fu_330_p2;
wire   [25:0] grp_fu_334_p2;
wire   [25:0] grp_fu_331_p2;
wire   [25:0] grp_fu_333_p2;
wire   [25:0] grp_fu_336_p2;
wire   [25:0] grp_fu_337_p2;
reg    grp_fu_328_ce;
reg    grp_fu_329_ce;
reg    grp_fu_330_ce;
reg    grp_fu_331_ce;
reg    grp_fu_332_ce;
reg    grp_fu_333_ce;
reg    grp_fu_334_ce;
reg    grp_fu_335_ce;
reg    grp_fu_336_ce;
reg    grp_fu_337_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire   [25:0] grp_fu_328_p00;
wire   [25:0] grp_fu_329_p00;
wire   [25:0] grp_fu_330_p00;
wire   [25:0] grp_fu_331_p00;
wire   [25:0] grp_fu_332_p00;
wire   [25:0] grp_fu_333_p00;
wire   [25:0] grp_fu_334_p00;
wire   [25:0] grp_fu_335_p00;
wire   [25:0] grp_fu_336_p00;
wire   [25:0] grp_fu_337_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config15_s_exp_tabbBo #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0),
    .address1(exp_table3_address1),
    .ce1(exp_table3_ce1),
    .q1(exp_table3_q1)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config15_s_invert_bCo #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_0_V(exp_res_0_V_fu_128),
    .x_1_V(exp_res_1_V_fu_132),
    .x_2_V(exp_res_2_V_fu_136),
    .x_3_V(exp_res_3_V_fu_140),
    .x_4_V(exp_res_4_V_fu_144),
    .x_5_V(exp_res_5_V_fu_148),
    .x_6_V(exp_res_6_V_fu_152),
    .x_7_V(exp_res_7_V_fu_156),
    .x_8_V(exp_res_8_V_fu_160),
    .x_9_V(exp_res_9_V_fu_164),
    .x_V_offset(5'd0),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_ce)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_0_V(exp_res_0_V_fu_128),
    .x_1_V(exp_res_1_V_fu_132),
    .x_2_V(exp_res_2_V_fu_136),
    .x_3_V(exp_res_3_V_fu_140),
    .x_4_V(exp_res_4_V_fu_144),
    .x_5_V(exp_res_5_V_fu_148),
    .x_6_V(exp_res_6_V_fu_152),
    .x_7_V(exp_res_7_V_fu_156),
    .x_8_V(exp_res_8_V_fu_160),
    .x_9_V(exp_res_9_V_fu_164),
    .x_V_offset(5'd4),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_ce)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U335(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U336(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(grp_fu_329_ce),
    .dout(grp_fu_329_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U337(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_330_p0),
    .din1(grp_fu_330_p1),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U338(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_331_p0),
    .din1(grp_fu_331_p1),
    .ce(grp_fu_331_ce),
    .dout(grp_fu_331_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U339(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p0),
    .din1(grp_fu_332_p1),
    .ce(grp_fu_332_ce),
    .dout(grp_fu_332_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U340(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U341(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .ce(grp_fu_334_ce),
    .dout(grp_fu_334_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U342(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .din1(grp_fu_335_p1),
    .ce(grp_fu_335_ce),
    .dout(grp_fu_335_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U343(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .din1(grp_fu_336_p1),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p2)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U344(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_337_p0),
    .din1(grp_fu_337_p1),
    .ce(grp_fu_337_ce),
    .dout(grp_fu_337_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_2286 <= data_V_data_0_V_dout;
        data_array_1_V_reg_2293 <= data_V_data_1_V_dout;
        data_array_2_V_reg_2300 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2307 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2314 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2321 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2328 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2335 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2342 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2349 <= data_V_data_9_V_dout;
        exp_res_6_V_1_reg_2530_pp0_iter3_reg <= exp_res_6_V_1_reg_2530;
        exp_res_7_V_1_reg_2536_pp0_iter3_reg <= exp_res_7_V_1_reg_2536;
        p_Val2_19_reg_2566 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_return;
        p_Val2_1_reg_2572 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_return;
        y_V_1_reg_2409 <= y_V_1_fu_1479_p3;
        y_V_2_reg_2414 <= y_V_2_fu_1513_p3;
        y_V_3_reg_2419 <= y_V_3_fu_1547_p3;
        y_V_4_reg_2424 <= y_V_4_fu_1581_p3;
        y_V_5_reg_2429 <= y_V_5_fu_1615_p3;
        y_V_6_reg_2434 <= y_V_6_fu_1649_p3;
        y_V_7_reg_2439 <= y_V_7_fu_1683_p3;
        y_V_8_reg_2444 <= y_V_8_fu_1717_p3;
        y_V_9_reg_2449 <= y_V_9_fu_1751_p3;
        y_V_reg_2404 <= y_V_fu_1445_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_0_V_1_reg_2464 <= exp_table3_q0;
        exp_res_1_V_1_reg_2470 <= exp_table3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_0_V_1_reg_2464_pp0_iter2_reg <= exp_res_0_V_1_reg_2464;
        exp_res_0_V_1_reg_2464_pp0_iter3_reg <= exp_res_0_V_1_reg_2464_pp0_iter2_reg;
        exp_res_1_V_1_reg_2470_pp0_iter2_reg <= exp_res_1_V_1_reg_2470;
        exp_res_1_V_1_reg_2470_pp0_iter3_reg <= exp_res_1_V_1_reg_2470_pp0_iter2_reg;
        select_ln65_2_reg_2376 <= select_ln65_2_fu_803_p3;
        select_ln65_5_reg_2382 <= select_ln65_5_fu_827_p3;
        y_V_10_reg_2590 <= y_V_10_fu_2051_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_0_V_fu_128 <= exp_res_0_V_1_reg_2464;
        exp_res_1_V_fu_132 <= exp_res_1_V_1_reg_2470;
        exp_res_2_V_fu_136 <= exp_res_2_V_1_reg_2486;
        exp_res_3_V_fu_140 <= exp_res_3_V_1_reg_2492;
        exp_res_4_V_fu_144 <= exp_res_4_V_1_reg_2508;
        exp_res_5_V_fu_148 <= exp_res_5_V_1_reg_2514;
        exp_res_6_V_fu_152 <= exp_res_6_V_1_reg_2530;
        exp_res_7_V_fu_156 <= exp_res_7_V_1_reg_2536;
        exp_res_8_V_1_reg_2552 <= exp_table3_q0;
        exp_res_8_V_fu_160 <= exp_table3_q0;
        exp_res_9_V_1_reg_2559 <= exp_table3_q1;
        exp_res_9_V_fu_164 <= exp_table3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_2_V_1_reg_2486 <= exp_table3_q0;
        exp_res_3_V_1_reg_2492 <= exp_table3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_2_V_1_reg_2486_pp0_iter2_reg <= exp_res_2_V_1_reg_2486;
        exp_res_2_V_1_reg_2486_pp0_iter3_reg <= exp_res_2_V_1_reg_2486_pp0_iter2_reg;
        exp_res_3_V_1_reg_2492_pp0_iter2_reg <= exp_res_3_V_1_reg_2492;
        exp_res_3_V_1_reg_2492_pp0_iter3_reg <= exp_res_3_V_1_reg_2492_pp0_iter2_reg;
        icmp_ln1496_7_reg_2394 <= icmp_ln1496_7_fu_845_p2;
        select_ln65_6_reg_2388 <= select_ln65_6_fu_839_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_res_4_V_1_reg_2508 <= exp_table3_q0;
        exp_res_5_V_1_reg_2514 <= exp_table3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_4_V_1_reg_2508_pp0_iter2_reg <= exp_res_4_V_1_reg_2508;
        exp_res_4_V_1_reg_2508_pp0_iter3_reg <= exp_res_4_V_1_reg_2508_pp0_iter2_reg;
        exp_res_5_V_1_reg_2514_pp0_iter2_reg <= exp_res_5_V_1_reg_2514;
        exp_res_5_V_1_reg_2514_pp0_iter3_reg <= exp_res_5_V_1_reg_2514_pp0_iter2_reg;
        inv_exp_sum_V_reg_2600 <= invert_table4_q0;
        x_max_V_reg_2399 <= x_max_V_fu_859_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_6_V_1_reg_2530 <= exp_table3_q0;
        exp_res_7_V_1_reg_2536 <= exp_table3_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_8_V_1_reg_2552_pp0_iter3_reg <= exp_res_8_V_1_reg_2552;
        exp_res_9_V_1_reg_2559_pp0_iter3_reg <= exp_res_9_V_1_reg_2559;
        icmp_ln1496_1_reg_2361 <= icmp_ln1496_1_fu_775_p2;
        icmp_ln1496_3_reg_2366 <= icmp_ln1496_3_fu_779_p2;
        icmp_ln1496_4_reg_2371 <= icmp_ln1496_4_fu_783_p2;
        icmp_ln1496_reg_2356 <= icmp_ln1496_fu_771_p2;
        p_Val2_26_reg_2578 <= p_Val2_26_fu_1919_p3;
        p_Val2_27_reg_2584 <= p_Val2_27_fu_1951_p3;
        tmp_data_0_V_reg_2669 <= {{grp_fu_328_p2[25:10]}};
        tmp_data_1_V_reg_2674 <= {{grp_fu_335_p2[25:10]}};
        tmp_data_2_V_reg_2679 <= {{grp_fu_329_p2[25:10]}};
        tmp_data_3_V_reg_2684 <= {{grp_fu_332_p2[25:10]}};
        tmp_data_4_V_reg_2689 <= {{grp_fu_330_p2[25:10]}};
        tmp_data_5_V_reg_2694 <= {{grp_fu_334_p2[25:10]}};
        tmp_data_6_V_reg_2699 <= {{grp_fu_331_p2[25:10]}};
        tmp_data_7_V_reg_2704 <= {{grp_fu_333_p2[25:10]}};
        tmp_data_8_V_reg_2709 <= {{grp_fu_336_p2[25:10]}};
        tmp_data_9_V_reg_2714 <= {{grp_fu_337_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_address0 = zext_ln225_8_fu_1791_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_table3_address0 = zext_ln225_6_fu_1783_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_table3_address0 = zext_ln225_4_fu_1775_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        exp_table3_address0 = zext_ln225_2_fu_1767_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table3_address0 = zext_ln225_fu_1759_p1;
    end else begin
        exp_table3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_address1 = zext_ln225_9_fu_1795_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_table3_address1 = zext_ln225_7_fu_1787_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_table3_address1 = zext_ln225_5_fu_1779_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        exp_table3_address1 = zext_ln225_3_fu_1771_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table3_address1 = zext_ln225_1_fu_1763_p1;
    end else begin
        exp_table3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        exp_table3_ce1 = 1'b1;
    end else begin
        exp_table3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_329_ce = 1'b1;
    end else begin
        grp_fu_329_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_331_ce = 1'b1;
    end else begin
        grp_fu_331_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_332_ce = 1'b1;
    end else begin
        grp_fu_332_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_334_ce = 1'b1;
    end else begin
        grp_fu_334_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_335_ce = 1'b1;
    end else begin
        grp_fu_335_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_337_ce = 1'b1;
    end else begin
        grp_fu_337_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp248) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp246) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp250) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp244) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_699_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp249) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp247) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp251) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp245) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_715_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1939_p2 = (exp_res_8_V_1_reg_2552 + exp_res_9_V_1_reg_2559);

assign and_ln786_1_fu_955_p2 = (xor_ln786_1_fu_949_p2 & tmp_23_fu_933_p3);

assign and_ln786_2_fu_1010_p2 = (xor_ln786_2_fu_1004_p2 & tmp_25_fu_988_p3);

assign and_ln786_3_fu_1065_p2 = (xor_ln786_3_fu_1059_p2 & tmp_27_fu_1043_p3);

assign and_ln786_4_fu_1120_p2 = (xor_ln786_4_fu_1114_p2 & tmp_29_fu_1098_p3);

assign and_ln786_5_fu_1175_p2 = (xor_ln786_5_fu_1169_p2 & tmp_31_fu_1153_p3);

assign and_ln786_6_fu_1230_p2 = (xor_ln786_6_fu_1224_p2 & tmp_33_fu_1208_p3);

assign and_ln786_7_fu_1285_p2 = (xor_ln786_7_fu_1279_p2 & tmp_35_fu_1263_p3);

assign and_ln786_8_fu_1340_p2 = (xor_ln786_8_fu_1334_p2 & tmp_37_fu_1318_p3);

assign and_ln786_9_fu_1395_p2 = (xor_ln786_9_fu_1389_p2 & tmp_39_fu_1373_p3);

assign and_ln786_fu_900_p2 = (xor_ln786_fu_894_p2 & tmp_21_fu_878_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp250 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp251 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((io_acc_block_signal_op386 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((io_acc_block_signal_op386 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp244 = ((io_acc_block_signal_op386 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp245 = ((io_acc_block_signal_op386 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((io_acc_block_signal_op386 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp246 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp247 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp248 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp249 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3_ignore_call234 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call233 = ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call234 = ((io_acc_block_signal_op34 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage2_iter4 = (io_acc_block_signal_op386 == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage2_iter4_ignore_call233 = (io_acc_block_signal_op386 == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage2_iter4_ignore_call234 = (io_acc_block_signal_op386 == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_328_p0 = grp_fu_328_p00;

assign grp_fu_328_p00 = exp_res_0_V_1_reg_2464_pp0_iter3_reg;

assign grp_fu_328_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_329_p0 = grp_fu_329_p00;

assign grp_fu_329_p00 = exp_res_2_V_1_reg_2486_pp0_iter3_reg;

assign grp_fu_329_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_330_p0 = grp_fu_330_p00;

assign grp_fu_330_p00 = exp_res_4_V_1_reg_2508_pp0_iter3_reg;

assign grp_fu_330_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_331_p0 = grp_fu_331_p00;

assign grp_fu_331_p00 = exp_res_6_V_1_reg_2530_pp0_iter3_reg;

assign grp_fu_331_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_332_p0 = grp_fu_332_p00;

assign grp_fu_332_p00 = exp_res_3_V_1_reg_2492_pp0_iter3_reg;

assign grp_fu_332_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_333_p0 = grp_fu_333_p00;

assign grp_fu_333_p00 = exp_res_7_V_1_reg_2536_pp0_iter3_reg;

assign grp_fu_333_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_334_p0 = grp_fu_334_p00;

assign grp_fu_334_p00 = exp_res_5_V_1_reg_2514_pp0_iter3_reg;

assign grp_fu_334_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_335_p0 = grp_fu_335_p00;

assign grp_fu_335_p00 = exp_res_1_V_1_reg_2470_pp0_iter3_reg;

assign grp_fu_335_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_336_p0 = grp_fu_336_p00;

assign grp_fu_336_p00 = exp_res_8_V_1_reg_2552_pp0_iter3_reg;

assign grp_fu_336_p1 = sext_ln241_fu_2063_p1;

assign grp_fu_337_p0 = grp_fu_337_p00;

assign grp_fu_337_p00 = exp_res_9_V_1_reg_2559_pp0_iter3_reg;

assign grp_fu_337_p1 = sext_ln241_fu_2063_p1;

assign icmp_ln1496_1_fu_775_p2 = (($signed(data_array_2_V_reg_2300) < $signed(data_array_3_V_reg_2307)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_797_p2 = (($signed(select_ln65_fu_787_p3) < $signed(select_ln65_1_fu_792_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_779_p2 = (($signed(data_array_4_V_reg_2314) < $signed(data_array_5_V_reg_2321)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_783_p2 = (($signed(data_array_6_V_reg_2328) < $signed(data_array_7_V_reg_2335)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_821_p2 = (($signed(select_ln65_3_fu_811_p3) < $signed(select_ln65_4_fu_816_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_835_p2 = (($signed(select_ln65_2_reg_2376) < $signed(select_ln65_5_reg_2382)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_845_p2 = (($signed(data_array_8_V_reg_2342) < $signed(data_array_9_V_reg_2349)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_854_p2 = (($signed(select_ln65_6_reg_2388) < $signed(select_ln65_7_fu_849_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_771_p2 = (($signed(data_array_0_V_reg_2286) < $signed(data_array_1_V_reg_2293)) ? 1'b1 : 1'b0);

assign invert_table4_address0 = zext_ln235_fu_2059_p1;

assign io_acc_block_signal_op34 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op386 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign lhs_V_1_fu_1962_p1 = p_Val2_26_reg_2578;

assign lhs_V_fu_1841_p1 = p_Val2_19_reg_2566;

assign or_ln340_10_fu_1897_p2 = (xor_ln340_21_fu_1891_p2 | p_Result_18_fu_1865_p3);

assign or_ln340_11_fu_2019_p2 = (xor_ln340_23_fu_2013_p2 | p_Result_21_fu_1987_p3);

assign or_ln340_1_fu_973_p2 = (xor_ln340_1_fu_967_p2 | tmp_24_fu_941_p3);

assign or_ln340_2_fu_1028_p2 = (xor_ln340_2_fu_1022_p2 | tmp_26_fu_996_p3);

assign or_ln340_3_fu_1083_p2 = (xor_ln340_3_fu_1077_p2 | tmp_28_fu_1051_p3);

assign or_ln340_4_fu_1138_p2 = (xor_ln340_4_fu_1132_p2 | tmp_30_fu_1106_p3);

assign or_ln340_5_fu_1193_p2 = (xor_ln340_5_fu_1187_p2 | tmp_32_fu_1161_p3);

assign or_ln340_6_fu_1248_p2 = (xor_ln340_6_fu_1242_p2 | tmp_34_fu_1216_p3);

assign or_ln340_7_fu_1303_p2 = (xor_ln340_7_fu_1297_p2 | tmp_36_fu_1271_p3);

assign or_ln340_8_fu_1358_p2 = (xor_ln340_8_fu_1352_p2 | tmp_38_fu_1326_p3);

assign or_ln340_9_fu_1413_p2 = (xor_ln340_9_fu_1407_p2 | tmp_40_fu_1381_p3);

assign or_ln340_fu_918_p2 = (xor_ln340_fu_912_p2 | tmp_22_fu_886_p3);

assign p_Result_18_fu_1865_p3 = p_Val2_22_fu_1861_p2[32'd17];

assign p_Result_19_fu_1943_p3 = p_Val2_25_fu_1933_p2[32'd17];

assign p_Result_20_fu_1974_p3 = ret_V_1_fu_1968_p2[32'd18];

assign p_Result_21_fu_1987_p3 = p_Val2_29_fu_1982_p2[32'd17];

assign p_Result_s_fu_1853_p3 = ret_V_fu_1847_p2[32'd18];

assign p_Val2_22_fu_1861_p2 = ($signed(p_Val2_1_reg_2572) + $signed(p_Val2_19_reg_2566));

assign p_Val2_23_fu_1927_p1 = exp_res_8_V_1_reg_2552;

assign p_Val2_24_fu_1930_p1 = exp_res_9_V_1_reg_2559;

assign p_Val2_25_fu_1933_p2 = (p_Val2_24_fu_1930_p1 + p_Val2_23_fu_1927_p1);

assign p_Val2_26_fu_1919_p3 = ((or_ln340_10_fu_1897_p2[0:0] === 1'b1) ? select_ln340_20_fu_1903_p3 : select_ln388_10_fu_1911_p3);

assign p_Val2_27_fu_1951_p3 = ((p_Result_19_fu_1943_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1939_p2);

assign p_Val2_29_fu_1982_p2 = ($signed(zext_ln746_fu_1959_p1) + $signed(p_Val2_26_reg_2578));

assign res_V_data_0_V_din = tmp_data_0_V_reg_2669;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2674;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2679;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2684;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2689;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2694;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2699;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2704;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2709;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2714;

assign ret_V_1_fu_1968_p2 = ($signed(lhs_V_1_fu_1962_p1) + $signed(rhs_V_1_fu_1965_p1));

assign ret_V_fu_1847_p2 = ($signed(lhs_V_fu_1841_p1) + $signed(rhs_V_fu_1844_p1));

assign rhs_V_1_fu_1965_p1 = p_Val2_27_reg_2584;

assign rhs_V_fu_1844_p1 = p_Val2_1_reg_2572;

assign select_ln340_10_fu_1599_p3 = ((xor_ln340_15_fu_1181_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1589_p4);

assign select_ln340_12_fu_1633_p3 = ((xor_ln340_16_fu_1236_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1623_p4);

assign select_ln340_14_fu_1667_p3 = ((xor_ln340_17_fu_1291_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1657_p4);

assign select_ln340_16_fu_1701_p3 = ((xor_ln340_18_fu_1346_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1691_p4);

assign select_ln340_18_fu_1735_p3 = ((xor_ln340_19_fu_1401_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1725_p4);

assign select_ln340_20_fu_1903_p3 = ((xor_ln340_20_fu_1885_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_1861_p2);

assign select_ln340_22_fu_2035_p3 = ((xor_ln340_22_fu_2007_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_2025_p4);

assign select_ln340_2_fu_1463_p3 = ((xor_ln340_11_fu_961_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1453_p4);

assign select_ln340_4_fu_1497_p3 = ((xor_ln340_12_fu_1016_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1487_p4);

assign select_ln340_6_fu_1531_p3 = ((xor_ln340_13_fu_1071_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1521_p4);

assign select_ln340_8_fu_1565_p3 = ((xor_ln340_14_fu_1126_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1555_p4);

assign select_ln340_fu_1429_p3 = ((xor_ln340_10_fu_906_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1419_p4);

assign select_ln388_10_fu_1911_p3 = ((underflow_fu_1879_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_1861_p2);

assign select_ln388_11_fu_2043_p3 = ((underflow_1_fu_2001_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_2025_p4);

assign select_ln388_1_fu_1471_p3 = ((and_ln786_1_fu_955_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1453_p4);

assign select_ln388_2_fu_1505_p3 = ((and_ln786_2_fu_1010_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1487_p4);

assign select_ln388_3_fu_1539_p3 = ((and_ln786_3_fu_1065_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1521_p4);

assign select_ln388_4_fu_1573_p3 = ((and_ln786_4_fu_1120_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1555_p4);

assign select_ln388_5_fu_1607_p3 = ((and_ln786_5_fu_1175_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1589_p4);

assign select_ln388_6_fu_1641_p3 = ((and_ln786_6_fu_1230_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1623_p4);

assign select_ln388_7_fu_1675_p3 = ((and_ln786_7_fu_1285_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1657_p4);

assign select_ln388_8_fu_1709_p3 = ((and_ln786_8_fu_1340_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1691_p4);

assign select_ln388_9_fu_1743_p3 = ((and_ln786_9_fu_1395_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1725_p4);

assign select_ln388_fu_1437_p3 = ((and_ln786_fu_900_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1419_p4);

assign select_ln65_1_fu_792_p3 = ((icmp_ln1496_1_reg_2361[0:0] === 1'b1) ? data_array_3_V_reg_2307 : data_array_2_V_reg_2300);

assign select_ln65_2_fu_803_p3 = ((icmp_ln1496_2_fu_797_p2[0:0] === 1'b1) ? select_ln65_1_fu_792_p3 : select_ln65_fu_787_p3);

assign select_ln65_3_fu_811_p3 = ((icmp_ln1496_3_reg_2366[0:0] === 1'b1) ? data_array_5_V_reg_2321 : data_array_4_V_reg_2314);

assign select_ln65_4_fu_816_p3 = ((icmp_ln1496_4_reg_2371[0:0] === 1'b1) ? data_array_7_V_reg_2335 : data_array_6_V_reg_2328);

assign select_ln65_5_fu_827_p3 = ((icmp_ln1496_5_fu_821_p2[0:0] === 1'b1) ? select_ln65_4_fu_816_p3 : select_ln65_3_fu_811_p3);

assign select_ln65_6_fu_839_p3 = ((icmp_ln1496_6_fu_835_p2[0:0] === 1'b1) ? select_ln65_5_reg_2382 : select_ln65_2_reg_2376);

assign select_ln65_7_fu_849_p3 = ((icmp_ln1496_7_reg_2394[0:0] === 1'b1) ? data_array_9_V_reg_2349 : data_array_8_V_reg_2342);

assign select_ln65_fu_787_p3 = ((icmp_ln1496_reg_2356[0:0] === 1'b1) ? data_array_1_V_reg_2293 : data_array_0_V_reg_2286);

assign sext_ln241_fu_2063_p1 = $signed(inv_exp_sum_V_reg_2600);

assign sext_ln703_10_fu_1364_p1 = data_array_9_V_reg_2349;

assign sext_ln703_1_fu_869_p1 = $signed(x_max_V_reg_2399);

assign sext_ln703_2_fu_924_p1 = data_array_1_V_reg_2293;

assign sext_ln703_3_fu_979_p1 = data_array_2_V_reg_2300;

assign sext_ln703_4_fu_1034_p1 = data_array_3_V_reg_2307;

assign sext_ln703_5_fu_1089_p1 = data_array_4_V_reg_2314;

assign sext_ln703_6_fu_1144_p1 = data_array_5_V_reg_2321;

assign sext_ln703_7_fu_1199_p1 = data_array_6_V_reg_2328;

assign sext_ln703_8_fu_1254_p1 = data_array_7_V_reg_2335;

assign sext_ln703_9_fu_1309_p1 = data_array_8_V_reg_2342;

assign sext_ln703_fu_866_p1 = data_array_0_V_reg_2286;

assign sub_ln1193_1_fu_927_p2 = ($signed(sext_ln703_2_fu_924_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_2_fu_982_p2 = ($signed(sext_ln703_3_fu_979_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_3_fu_1037_p2 = ($signed(sext_ln703_4_fu_1034_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_4_fu_1092_p2 = ($signed(sext_ln703_5_fu_1089_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_5_fu_1147_p2 = ($signed(sext_ln703_6_fu_1144_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_6_fu_1202_p2 = ($signed(sext_ln703_7_fu_1199_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_7_fu_1257_p2 = ($signed(sext_ln703_8_fu_1254_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_8_fu_1312_p2 = ($signed(sext_ln703_9_fu_1309_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_9_fu_1367_p2 = ($signed(sext_ln703_10_fu_1364_p1) - $signed(sext_ln703_1_fu_869_p1));

assign sub_ln1193_fu_872_p2 = ($signed(sext_ln703_fu_866_p1) - $signed(sext_ln703_1_fu_869_p1));

assign tmp_11_fu_1453_p4 = {{sub_ln1193_1_fu_927_p2[15:6]}};

assign tmp_12_fu_1487_p4 = {{sub_ln1193_2_fu_982_p2[15:6]}};

assign tmp_13_fu_1521_p4 = {{sub_ln1193_3_fu_1037_p2[15:6]}};

assign tmp_14_fu_1555_p4 = {{sub_ln1193_4_fu_1092_p2[15:6]}};

assign tmp_15_fu_1589_p4 = {{sub_ln1193_5_fu_1147_p2[15:6]}};

assign tmp_16_fu_1623_p4 = {{sub_ln1193_6_fu_1202_p2[15:6]}};

assign tmp_17_fu_1657_p4 = {{sub_ln1193_7_fu_1257_p2[15:6]}};

assign tmp_18_fu_1691_p4 = {{sub_ln1193_8_fu_1312_p2[15:6]}};

assign tmp_19_fu_1725_p4 = {{sub_ln1193_9_fu_1367_p2[15:6]}};

assign tmp_20_fu_2025_p4 = {{p_Val2_29_fu_1982_p2[17:8]}};

assign tmp_21_fu_878_p3 = sub_ln1193_fu_872_p2[32'd16];

assign tmp_22_fu_886_p3 = sub_ln1193_fu_872_p2[32'd15];

assign tmp_23_fu_933_p3 = sub_ln1193_1_fu_927_p2[32'd16];

assign tmp_24_fu_941_p3 = sub_ln1193_1_fu_927_p2[32'd15];

assign tmp_25_fu_988_p3 = sub_ln1193_2_fu_982_p2[32'd16];

assign tmp_26_fu_996_p3 = sub_ln1193_2_fu_982_p2[32'd15];

assign tmp_27_fu_1043_p3 = sub_ln1193_3_fu_1037_p2[32'd16];

assign tmp_28_fu_1051_p3 = sub_ln1193_3_fu_1037_p2[32'd15];

assign tmp_29_fu_1098_p3 = sub_ln1193_4_fu_1092_p2[32'd16];

assign tmp_30_fu_1106_p3 = sub_ln1193_4_fu_1092_p2[32'd15];

assign tmp_31_fu_1153_p3 = sub_ln1193_5_fu_1147_p2[32'd16];

assign tmp_32_fu_1161_p3 = sub_ln1193_5_fu_1147_p2[32'd15];

assign tmp_33_fu_1208_p3 = sub_ln1193_6_fu_1202_p2[32'd16];

assign tmp_34_fu_1216_p3 = sub_ln1193_6_fu_1202_p2[32'd15];

assign tmp_35_fu_1263_p3 = sub_ln1193_7_fu_1257_p2[32'd16];

assign tmp_36_fu_1271_p3 = sub_ln1193_7_fu_1257_p2[32'd15];

assign tmp_37_fu_1318_p3 = sub_ln1193_8_fu_1312_p2[32'd16];

assign tmp_38_fu_1326_p3 = sub_ln1193_8_fu_1312_p2[32'd15];

assign tmp_39_fu_1373_p3 = sub_ln1193_9_fu_1367_p2[32'd16];

assign tmp_40_fu_1381_p3 = sub_ln1193_9_fu_1367_p2[32'd15];

assign tmp_fu_1419_p4 = {{sub_ln1193_fu_872_p2[15:6]}};

assign underflow_1_fu_2001_p2 = (xor_ln786_11_fu_1995_p2 & p_Result_20_fu_1974_p3);

assign underflow_fu_1879_p2 = (xor_ln786_10_fu_1873_p2 & p_Result_s_fu_1853_p3);

assign x_max_V_fu_859_p3 = ((icmp_ln1496_8_fu_854_p2[0:0] === 1'b1) ? select_ln65_7_fu_849_p3 : select_ln65_6_reg_2388);

assign xor_ln340_10_fu_906_p2 = (tmp_22_fu_886_p3 ^ tmp_21_fu_878_p3);

assign xor_ln340_11_fu_961_p2 = (tmp_24_fu_941_p3 ^ tmp_23_fu_933_p3);

assign xor_ln340_12_fu_1016_p2 = (tmp_26_fu_996_p3 ^ tmp_25_fu_988_p3);

assign xor_ln340_13_fu_1071_p2 = (tmp_28_fu_1051_p3 ^ tmp_27_fu_1043_p3);

assign xor_ln340_14_fu_1126_p2 = (tmp_30_fu_1106_p3 ^ tmp_29_fu_1098_p3);

assign xor_ln340_15_fu_1181_p2 = (tmp_32_fu_1161_p3 ^ tmp_31_fu_1153_p3);

assign xor_ln340_16_fu_1236_p2 = (tmp_34_fu_1216_p3 ^ tmp_33_fu_1208_p3);

assign xor_ln340_17_fu_1291_p2 = (tmp_36_fu_1271_p3 ^ tmp_35_fu_1263_p3);

assign xor_ln340_18_fu_1346_p2 = (tmp_38_fu_1326_p3 ^ tmp_37_fu_1318_p3);

assign xor_ln340_19_fu_1401_p2 = (tmp_40_fu_1381_p3 ^ tmp_39_fu_1373_p3);

assign xor_ln340_1_fu_967_p2 = (tmp_23_fu_933_p3 ^ 1'd1);

assign xor_ln340_20_fu_1885_p2 = (p_Result_s_fu_1853_p3 ^ p_Result_18_fu_1865_p3);

assign xor_ln340_21_fu_1891_p2 = (p_Result_s_fu_1853_p3 ^ 1'd1);

assign xor_ln340_22_fu_2007_p2 = (p_Result_21_fu_1987_p3 ^ p_Result_20_fu_1974_p3);

assign xor_ln340_23_fu_2013_p2 = (p_Result_20_fu_1974_p3 ^ 1'd1);

assign xor_ln340_2_fu_1022_p2 = (tmp_25_fu_988_p3 ^ 1'd1);

assign xor_ln340_3_fu_1077_p2 = (tmp_27_fu_1043_p3 ^ 1'd1);

assign xor_ln340_4_fu_1132_p2 = (tmp_29_fu_1098_p3 ^ 1'd1);

assign xor_ln340_5_fu_1187_p2 = (tmp_31_fu_1153_p3 ^ 1'd1);

assign xor_ln340_6_fu_1242_p2 = (tmp_33_fu_1208_p3 ^ 1'd1);

assign xor_ln340_7_fu_1297_p2 = (tmp_35_fu_1263_p3 ^ 1'd1);

assign xor_ln340_8_fu_1352_p2 = (tmp_37_fu_1318_p3 ^ 1'd1);

assign xor_ln340_9_fu_1407_p2 = (tmp_39_fu_1373_p3 ^ 1'd1);

assign xor_ln340_fu_912_p2 = (tmp_21_fu_878_p3 ^ 1'd1);

assign xor_ln786_10_fu_1873_p2 = (p_Result_18_fu_1865_p3 ^ 1'd1);

assign xor_ln786_11_fu_1995_p2 = (p_Result_21_fu_1987_p3 ^ 1'd1);

assign xor_ln786_1_fu_949_p2 = (tmp_24_fu_941_p3 ^ 1'd1);

assign xor_ln786_2_fu_1004_p2 = (tmp_26_fu_996_p3 ^ 1'd1);

assign xor_ln786_3_fu_1059_p2 = (tmp_28_fu_1051_p3 ^ 1'd1);

assign xor_ln786_4_fu_1114_p2 = (tmp_30_fu_1106_p3 ^ 1'd1);

assign xor_ln786_5_fu_1169_p2 = (tmp_32_fu_1161_p3 ^ 1'd1);

assign xor_ln786_6_fu_1224_p2 = (tmp_34_fu_1216_p3 ^ 1'd1);

assign xor_ln786_7_fu_1279_p2 = (tmp_36_fu_1271_p3 ^ 1'd1);

assign xor_ln786_8_fu_1334_p2 = (tmp_38_fu_1326_p3 ^ 1'd1);

assign xor_ln786_9_fu_1389_p2 = (tmp_40_fu_1381_p3 ^ 1'd1);

assign xor_ln786_fu_894_p2 = (tmp_22_fu_886_p3 ^ 1'd1);

assign y_V_10_fu_2051_p3 = ((or_ln340_11_fu_2019_p2[0:0] === 1'b1) ? select_ln340_22_fu_2035_p3 : select_ln388_11_fu_2043_p3);

assign y_V_1_fu_1479_p3 = ((or_ln340_1_fu_973_p2[0:0] === 1'b1) ? select_ln340_2_fu_1463_p3 : select_ln388_1_fu_1471_p3);

assign y_V_2_fu_1513_p3 = ((or_ln340_2_fu_1028_p2[0:0] === 1'b1) ? select_ln340_4_fu_1497_p3 : select_ln388_2_fu_1505_p3);

assign y_V_3_fu_1547_p3 = ((or_ln340_3_fu_1083_p2[0:0] === 1'b1) ? select_ln340_6_fu_1531_p3 : select_ln388_3_fu_1539_p3);

assign y_V_4_fu_1581_p3 = ((or_ln340_4_fu_1138_p2[0:0] === 1'b1) ? select_ln340_8_fu_1565_p3 : select_ln388_4_fu_1573_p3);

assign y_V_5_fu_1615_p3 = ((or_ln340_5_fu_1193_p2[0:0] === 1'b1) ? select_ln340_10_fu_1599_p3 : select_ln388_5_fu_1607_p3);

assign y_V_6_fu_1649_p3 = ((or_ln340_6_fu_1248_p2[0:0] === 1'b1) ? select_ln340_12_fu_1633_p3 : select_ln388_6_fu_1641_p3);

assign y_V_7_fu_1683_p3 = ((or_ln340_7_fu_1303_p2[0:0] === 1'b1) ? select_ln340_14_fu_1667_p3 : select_ln388_7_fu_1675_p3);

assign y_V_8_fu_1717_p3 = ((or_ln340_8_fu_1358_p2[0:0] === 1'b1) ? select_ln340_16_fu_1701_p3 : select_ln388_8_fu_1709_p3);

assign y_V_9_fu_1751_p3 = ((or_ln340_9_fu_1413_p2[0:0] === 1'b1) ? select_ln340_18_fu_1735_p3 : select_ln388_9_fu_1743_p3);

assign y_V_fu_1445_p3 = ((or_ln340_fu_918_p2[0:0] === 1'b1) ? select_ln340_fu_1429_p3 : select_ln388_fu_1437_p3);

assign zext_ln225_1_fu_1763_p1 = y_V_1_reg_2409;

assign zext_ln225_2_fu_1767_p1 = y_V_2_reg_2414;

assign zext_ln225_3_fu_1771_p1 = y_V_3_reg_2419;

assign zext_ln225_4_fu_1775_p1 = y_V_4_reg_2424;

assign zext_ln225_5_fu_1779_p1 = y_V_5_reg_2429;

assign zext_ln225_6_fu_1783_p1 = y_V_6_reg_2434;

assign zext_ln225_7_fu_1787_p1 = y_V_7_reg_2439;

assign zext_ln225_8_fu_1791_p1 = y_V_8_reg_2444;

assign zext_ln225_9_fu_1795_p1 = y_V_9_reg_2449;

assign zext_ln225_fu_1759_p1 = y_V_reg_2404;

assign zext_ln235_fu_2059_p1 = y_V_10_reg_2590;

assign zext_ln746_fu_1959_p1 = p_Val2_27_reg_2584;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config15_s
