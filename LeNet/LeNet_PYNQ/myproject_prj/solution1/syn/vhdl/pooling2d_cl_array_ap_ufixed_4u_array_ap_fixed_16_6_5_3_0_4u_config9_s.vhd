-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3_4 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_5 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_6 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_7 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_12 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_13 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_14 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal kernel_data_V_3_15 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal line_buffer_Array_V_3_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_Array_V_3_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_Array_V_3_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_Array_V_3_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln241_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal and_ln191_2_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln241_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln241_reg_937 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_data_0_V_2_reg_942 : STD_LOGIC_VECTOR (3 downto 0);
    signal io_acc_block_signal_op20 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal io_acc_block_signal_op153 : STD_LOGIC;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_data_1_V_2_reg_948 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_2_V_2_reg_954 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_3_V_2_reg_960 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataOut_V_4_reg_966 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataOut_V_5_reg_972 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataOut_V_6_reg_978 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataOut_V_reg_984 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln191_2_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln222_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_0_V_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_reg_1012 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_fu_458_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_reg_1017 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_fu_465_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_reg_1022 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_fu_473_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_reg_1027 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_11_fu_526_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_11_reg_1032 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_2_fu_534_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_2_reg_1037 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_2_fu_542_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_2_reg_1042 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_2_fu_549_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_2_reg_1047 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_2_fu_557_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_2_reg_1052 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_15_fu_610_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_15_reg_1057 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_4_fu_618_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_4_reg_1062 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_4_fu_626_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_4_reg_1067 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_4_fu_633_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_4_reg_1072 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_4_fu_641_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_4_reg_1077 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_17_fu_694_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_17_reg_1082 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_6_fu_702_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_6_reg_1087 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_6_fu_710_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_6_reg_1092 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_6_fu_717_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_6_reg_1097 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_6_fu_725_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_6_reg_1102 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_19_fu_778_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_19_reg_1107 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_152_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln191_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_486_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_2_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_2_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_9_fu_500_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_522_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_4_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_570_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_6_fu_592_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_6_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_584_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_606_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_7_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_8_fu_654_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_10_fu_676_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_9_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_668_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_690_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_3_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_12_fu_738_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln65_14_fu_760_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_11_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_18_fu_752_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_774_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_803_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_803_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_803_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_803_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_803_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_837_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_837_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_837_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_837_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_837_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_871_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_871_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_871_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_871_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_871_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_905_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_905_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_905_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_905_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_905_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_345 : BOOLEAN;
    signal ap_condition_309 : BOOLEAN;

    component myproject_axi_mux_42_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    line_buffer_Array_V_3_0_0_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => line_buffer_Array_V_3_0_0_ce0,
        we0 => line_buffer_Array_V_3_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_3_0_0_q0);

    line_buffer_Array_V_3_0_1_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => line_buffer_Array_V_3_0_1_ce0,
        we0 => line_buffer_Array_V_3_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_3_0_1_q0);

    line_buffer_Array_V_3_0_2_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => line_buffer_Array_V_3_0_2_ce0,
        we0 => line_buffer_Array_V_3_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_3_0_2_q0);

    line_buffer_Array_V_3_0_3_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_7,
        ce0 => line_buffer_Array_V_3_0_3_ce0,
        we0 => line_buffer_Array_V_3_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_3_0_3_q0);

    myproject_axi_mux_42_12_1_1_U138 : component myproject_axi_mux_42_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 2,
        dout_WIDTH => 12)
    port map (
        din0 => tmp_21_fu_803_p1,
        din1 => tmp_21_fu_803_p2,
        din2 => tmp_21_fu_803_p3,
        din3 => tmp_21_fu_803_p4,
        din4 => select_ln65_11_reg_1032,
        dout => tmp_21_fu_803_p6);

    myproject_axi_mux_42_12_1_1_U139 : component myproject_axi_mux_42_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 2,
        dout_WIDTH => 12)
    port map (
        din0 => tmp_22_fu_837_p1,
        din1 => tmp_22_fu_837_p2,
        din2 => tmp_22_fu_837_p3,
        din3 => tmp_22_fu_837_p4,
        din4 => select_ln65_15_reg_1057,
        dout => tmp_22_fu_837_p6);

    myproject_axi_mux_42_12_1_1_U140 : component myproject_axi_mux_42_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 2,
        dout_WIDTH => 12)
    port map (
        din0 => tmp_23_fu_871_p1,
        din1 => tmp_23_fu_871_p2,
        din2 => tmp_23_fu_871_p3,
        din3 => tmp_23_fu_871_p4,
        din4 => select_ln65_17_reg_1082,
        dout => tmp_23_fu_871_p6);

    myproject_axi_mux_42_12_1_1_U141 : component myproject_axi_mux_42_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 2,
        dout_WIDTH => 12)
    port map (
        din0 => tmp_24_fu_905_p1,
        din1 => tmp_24_fu_905_p2,
        din2 => tmp_24_fu_905_p3,
        din3 => tmp_24_fu_905_p4,
        din4 => select_ln65_19_reg_1107,
        dout => tmp_24_fu_905_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln216_fu_340_p2 = ap_const_lv1_1) and (icmp_ln212_fu_296_p2 = ap_const_lv1_1) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_994 = ap_const_lv1_1) and (icmp_ln216_reg_1003 = ap_const_lv1_0) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= select_ln222_reg_1007;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
                indvar_flatten_reg_148 <= add_ln241_reg_937;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_148 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_345)) then
                if ((icmp_ln212_fu_296_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_296_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_302_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_309)) then
                if ((icmp_ln216_fu_340_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_340_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_346_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_994 = ap_const_lv1_0))) then 
                sX <= select_ln227_reg_998;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_fu_296_p2 = ap_const_lv1_1) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
                sX <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then
                DataOut_V_4_reg_966 <= line_buffer_Array_V_3_0_0_q0;
                DataOut_V_5_reg_972 <= line_buffer_Array_V_3_0_1_q0;
                DataOut_V_6_reg_978 <= line_buffer_Array_V_3_0_2_q0;
                DataOut_V_reg_984 <= line_buffer_Array_V_3_0_3_q0;
                and_ln191_2_reg_990 <= and_ln191_2_fu_290_p2;
                icmp_ln212_reg_994 <= icmp_ln212_fu_296_p2;
                tmp_data_0_V_2_reg_942 <= data_V_data_0_V_dout;
                tmp_data_1_V_2_reg_948 <= data_V_data_1_V_dout;
                tmp_data_2_V_2_reg_954 <= data_V_data_2_V_dout;
                tmp_data_3_V_2_reg_960 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln241_reg_937 <= add_ln241_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_fu_296_p2 = ap_const_lv1_1) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then
                icmp_ln216_reg_1003 <= icmp_ln216_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln241_reg_933 <= icmp_ln241_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then
                kernel_data_V_3_12 <= tmp_data_0_V_2_reg_942;
                kernel_data_V_3_13 <= tmp_data_1_V_2_reg_948;
                kernel_data_V_3_14 <= tmp_data_2_V_2_reg_954;
                kernel_data_V_3_15 <= tmp_data_3_V_2_reg_960;
                kernel_data_V_3_4 <= DataOut_V_4_reg_966;
                kernel_data_V_3_5 <= DataOut_V_5_reg_972;
                kernel_data_V_3_6 <= DataOut_V_6_reg_978;
                kernel_data_V_3_7 <= DataOut_V_reg_984;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_990))) then
                    pool_window_0_V_2_reg_1037(5 downto 2) <= pool_window_0_V_2_fu_534_p3(5 downto 2);
                    pool_window_0_V_4_reg_1062(5 downto 2) <= pool_window_0_V_4_fu_618_p3(5 downto 2);
                    pool_window_0_V_6_reg_1087(5 downto 2) <= pool_window_0_V_6_fu_702_p3(5 downto 2);
                    pool_window_0_V_reg_1012(5 downto 2) <= pool_window_0_V_fu_450_p3(5 downto 2);
                    pool_window_1_V_2_reg_1042(5 downto 2) <= pool_window_1_V_2_fu_542_p3(5 downto 2);
                    pool_window_1_V_4_reg_1067(5 downto 2) <= pool_window_1_V_4_fu_626_p3(5 downto 2);
                    pool_window_1_V_6_reg_1092(5 downto 2) <= pool_window_1_V_6_fu_710_p3(5 downto 2);
                    pool_window_1_V_reg_1017(5 downto 2) <= pool_window_1_V_fu_458_p3(5 downto 2);
                    pool_window_2_V_2_reg_1047(5 downto 2) <= pool_window_2_V_2_fu_549_p3(5 downto 2);
                    pool_window_2_V_4_reg_1072(5 downto 2) <= pool_window_2_V_4_fu_633_p3(5 downto 2);
                    pool_window_2_V_6_reg_1097(5 downto 2) <= pool_window_2_V_6_fu_717_p3(5 downto 2);
                    pool_window_2_V_reg_1022(5 downto 2) <= pool_window_2_V_fu_465_p3(5 downto 2);
                    pool_window_3_V_2_reg_1052(5 downto 2) <= pool_window_3_V_2_fu_557_p3(5 downto 2);
                    pool_window_3_V_4_reg_1077(5 downto 2) <= pool_window_3_V_4_fu_641_p3(5 downto 2);
                    pool_window_3_V_6_reg_1102(5 downto 2) <= pool_window_3_V_6_fu_725_p3(5 downto 2);
                    pool_window_3_V_reg_1027(5 downto 2) <= pool_window_3_V_fu_473_p3(5 downto 2);
                select_ln65_11_reg_1032 <= select_ln65_11_fu_526_p3;
                select_ln65_15_reg_1057 <= select_ln65_15_fu_610_p3;
                select_ln65_17_reg_1082 <= select_ln65_17_fu_694_p3;
                select_ln65_19_reg_1107 <= select_ln65_19_fu_778_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_994 = ap_const_lv1_1))) then
                sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_fu_296_p2 = ap_const_lv1_1) and (icmp_ln216_fu_340_p2 = ap_const_lv1_0) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then
                select_ln222_reg_1007 <= select_ln222_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_fu_296_p2 = ap_const_lv1_0) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then
                select_ln227_reg_998 <= select_ln227_fu_320_p3;
            end if;
        end if;
    end process;
    pool_window_0_V_reg_1012(1 downto 0) <= "00";
    pool_window_1_V_reg_1017(1 downto 0) <= "00";
    pool_window_2_V_reg_1022(1 downto 0) <= "00";
    pool_window_3_V_reg_1027(1 downto 0) <= "00";
    pool_window_0_V_2_reg_1037(1 downto 0) <= "00";
    pool_window_1_V_2_reg_1042(1 downto 0) <= "00";
    pool_window_2_V_2_reg_1047(1 downto 0) <= "00";
    pool_window_3_V_2_reg_1052(1 downto 0) <= "00";
    pool_window_0_V_4_reg_1062(1 downto 0) <= "00";
    pool_window_1_V_4_reg_1067(1 downto 0) <= "00";
    pool_window_2_V_4_reg_1072(1 downto 0) <= "00";
    pool_window_3_V_4_reg_1077(1 downto 0) <= "00";
    pool_window_0_V_6_reg_1087(1 downto 0) <= "00";
    pool_window_1_V_6_reg_1092(1 downto 0) <= "00";
    pool_window_2_V_6_reg_1097(1 downto 0) <= "00";
    pool_window_3_V_6_reg_1102(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln241_fu_170_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_170_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_170_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln220_fu_346_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_358_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_302_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_314_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_176_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_152_p4) + unsigned(ap_const_lv7_1));
    and_ln191_1_fu_284_p2 <= (icmp_ln191_3_fu_272_p2 and icmp_ln191_2_fu_262_p2);
    and_ln191_2_fu_290_p2 <= (and_ln191_fu_278_p2 and and_ln191_1_fu_284_p2);
    and_ln191_fu_278_p2 <= (icmp_ln191_fu_242_p2 and icmp_ln191_1_fu_252_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, io_acc_block_signal_op20, io_acc_block_signal_op153)
    begin
                ap_block_pp0_stage1_01001 <= (((io_acc_block_signal_op153 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_990)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_933 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, io_acc_block_signal_op20, io_acc_block_signal_op153)
    begin
                ap_block_pp0_stage1_11001 <= (((io_acc_block_signal_op153 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_990)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_933 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, io_acc_block_signal_op20, io_acc_block_signal_op153)
    begin
                ap_block_pp0_stage1_subdone <= (((io_acc_block_signal_op153 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_990)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_933 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln241_reg_933, io_acc_block_signal_op20)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op20 = ap_const_logic_0) and (icmp_ln241_reg_933 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(and_ln191_2_reg_990, io_acc_block_signal_op153)
    begin
                ap_block_state5_pp0_stage1_iter1 <= ((io_acc_block_signal_op153 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_990));
    end process;


    ap_condition_309_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001, icmp_ln212_fu_296_p2)
    begin
                ap_condition_309 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_fu_296_p2 = ap_const_lv1_1) and (icmp_ln241_reg_933 = ap_const_lv1_0));
    end process;


    ap_condition_345_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
                ap_condition_345 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_170_p2)
    begin
        if ((icmp_ln241_fu_170_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_152_p4_assign_proc : process(icmp_ln241_reg_933, ap_enable_reg_pp0_iter1, indvar_flatten_reg_148, ap_CS_fsm_pp0_stage0, add_ln241_reg_937, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= add_ln241_reg_937;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= indvar_flatten_reg_148;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln212_reg_994, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln212_reg_994 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_933)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_933 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_933)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_933 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_933)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_933 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_933)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_933 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_746_p2 <= "1" when (unsigned(pool_window_2_V_6_fu_717_p3) < unsigned(pool_window_3_V_6_fu_725_p3)) else "0";
    icmp_ln1496_11_fu_768_p2 <= "1" when (unsigned(select_ln65_12_fu_738_p3) < unsigned(select_ln65_14_fu_760_p3)) else "0";
    icmp_ln1496_1_fu_494_p2 <= "1" when (unsigned(pool_window_2_V_fu_465_p3) < unsigned(pool_window_3_V_fu_473_p3)) else "0";
    icmp_ln1496_2_fu_516_p2 <= "1" when (unsigned(select_ln65_fu_486_p3) < unsigned(select_ln65_2_fu_508_p3)) else "0";
    icmp_ln1496_3_fu_732_p2 <= "1" when (unsigned(pool_window_0_V_6_fu_702_p3) < unsigned(pool_window_1_V_6_fu_710_p3)) else "0";
    icmp_ln1496_4_fu_564_p2 <= "1" when (unsigned(pool_window_0_V_2_fu_534_p3) < unsigned(pool_window_1_V_2_fu_542_p3)) else "0";
    icmp_ln1496_5_fu_578_p2 <= "1" when (unsigned(pool_window_2_V_2_fu_549_p3) < unsigned(pool_window_3_V_2_fu_557_p3)) else "0";
    icmp_ln1496_6_fu_600_p2 <= "1" when (unsigned(select_ln65_4_fu_570_p3) < unsigned(select_ln65_6_fu_592_p3)) else "0";
    icmp_ln1496_7_fu_648_p2 <= "1" when (unsigned(pool_window_0_V_4_fu_618_p3) < unsigned(pool_window_1_V_4_fu_626_p3)) else "0";
    icmp_ln1496_8_fu_662_p2 <= "1" when (unsigned(pool_window_2_V_4_fu_633_p3) < unsigned(pool_window_3_V_4_fu_641_p3)) else "0";
    icmp_ln1496_9_fu_684_p2 <= "1" when (unsigned(select_ln65_8_fu_654_p3) < unsigned(select_ln65_10_fu_676_p3)) else "0";
    icmp_ln1496_fu_480_p2 <= "1" when (unsigned(pool_window_0_V_fu_450_p3) < unsigned(pool_window_1_V_fu_458_p3)) else "0";
    icmp_ln191_1_fu_252_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_262_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_272_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_242_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_296_p2 <= "1" when (pX = ap_const_lv32_7) else "0";
    icmp_ln216_fu_340_p2 <= "1" when (pY = ap_const_lv32_7) else "0";
    icmp_ln241_fu_170_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_152_p4 = ap_const_lv7_40) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op153 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op20 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_3_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_933, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_933 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_window_0_V_2_fu_534_p3 <= (kernel_data_V_3_5 & ap_const_lv2_0);
    pool_window_0_V_4_fu_618_p3 <= (kernel_data_V_3_6 & ap_const_lv2_0);
    pool_window_0_V_6_fu_702_p3 <= (kernel_data_V_3_7 & ap_const_lv2_0);
    pool_window_0_V_fu_450_p3 <= (kernel_data_V_3_4 & ap_const_lv2_0);
    pool_window_1_V_2_fu_542_p3 <= (DataOut_V_5_reg_972 & ap_const_lv2_0);
    pool_window_1_V_4_fu_626_p3 <= (DataOut_V_6_reg_978 & ap_const_lv2_0);
    pool_window_1_V_6_fu_710_p3 <= (DataOut_V_reg_984 & ap_const_lv2_0);
    pool_window_1_V_fu_458_p3 <= (DataOut_V_4_reg_966 & ap_const_lv2_0);
    pool_window_2_V_2_fu_549_p3 <= (kernel_data_V_3_13 & ap_const_lv2_0);
    pool_window_2_V_4_fu_633_p3 <= (kernel_data_V_3_14 & ap_const_lv2_0);
    pool_window_2_V_6_fu_717_p3 <= (kernel_data_V_3_15 & ap_const_lv2_0);
    pool_window_2_V_fu_465_p3 <= (kernel_data_V_3_12 & ap_const_lv2_0);
    pool_window_3_V_2_fu_557_p3 <= (tmp_data_1_V_2_reg_948 & ap_const_lv2_0);
    pool_window_3_V_4_fu_641_p3 <= (tmp_data_2_V_2_reg_954 & ap_const_lv2_0);
    pool_window_3_V_6_fu_725_p3 <= (tmp_data_3_V_2_reg_960 & ap_const_lv2_0);
    pool_window_3_V_fu_473_p3 <= (tmp_data_0_V_2_reg_942 & ap_const_lv2_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln191_2_reg_990) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= (tmp_21_fu_803_p6 & ap_const_lv4_0);

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_990))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln191_2_reg_990) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= (tmp_22_fu_837_p6 & ap_const_lv4_0);

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_990))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln191_2_reg_990) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= (tmp_23_fu_871_p6 & ap_const_lv4_0);

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_990))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln191_2_reg_990) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= (tmp_24_fu_905_p6 & ap_const_lv4_0);

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_990, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_990))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_364_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_252_p2(0) = '1') else 
        add_ln222_fu_358_p2;
    select_ln227_fu_320_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_242_p2(0) = '1') else 
        add_ln227_fu_314_p2;
    select_ln65_10_fu_676_p3 <= 
        pool_window_3_V_4_fu_641_p3 when (icmp_ln1496_8_fu_662_p2(0) = '1') else 
        pool_window_2_V_4_fu_633_p3;
    select_ln65_11_fu_526_p3 <= 
        select_ln65_9_fu_500_p3 when (icmp_ln1496_2_fu_516_p2(0) = '1') else 
        zext_ln65_fu_522_p1;
    select_ln65_12_fu_738_p3 <= 
        pool_window_1_V_6_fu_710_p3 when (icmp_ln1496_3_fu_732_p2(0) = '1') else 
        pool_window_0_V_6_fu_702_p3;
    select_ln65_13_fu_584_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_5_fu_578_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_14_fu_760_p3 <= 
        pool_window_3_V_6_fu_725_p3 when (icmp_ln1496_10_fu_746_p2(0) = '1') else 
        pool_window_2_V_6_fu_717_p3;
    select_ln65_15_fu_610_p3 <= 
        select_ln65_13_fu_584_p3 when (icmp_ln1496_6_fu_600_p2(0) = '1') else 
        zext_ln65_1_fu_606_p1;
    select_ln65_16_fu_668_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_8_fu_662_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_17_fu_694_p3 <= 
        select_ln65_16_fu_668_p3 when (icmp_ln1496_9_fu_684_p2(0) = '1') else 
        zext_ln65_2_fu_690_p1;
    select_ln65_18_fu_752_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_10_fu_746_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_19_fu_778_p3 <= 
        select_ln65_18_fu_752_p3 when (icmp_ln1496_11_fu_768_p2(0) = '1') else 
        zext_ln65_3_fu_774_p1;
    select_ln65_2_fu_508_p3 <= 
        pool_window_3_V_fu_473_p3 when (icmp_ln1496_1_fu_494_p2(0) = '1') else 
        pool_window_2_V_fu_465_p3;
    select_ln65_4_fu_570_p3 <= 
        pool_window_1_V_2_fu_542_p3 when (icmp_ln1496_4_fu_564_p2(0) = '1') else 
        pool_window_0_V_2_fu_534_p3;
    select_ln65_6_fu_592_p3 <= 
        pool_window_3_V_2_fu_557_p3 when (icmp_ln1496_5_fu_578_p2(0) = '1') else 
        pool_window_2_V_2_fu_549_p3;
    select_ln65_8_fu_654_p3 <= 
        pool_window_1_V_4_fu_626_p3 when (icmp_ln1496_7_fu_648_p2(0) = '1') else 
        pool_window_0_V_4_fu_618_p3;
    select_ln65_9_fu_500_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_fu_494_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_fu_486_p3 <= 
        pool_window_1_V_fu_458_p3 when (icmp_ln1496_fu_480_p2(0) = '1') else 
        pool_window_0_V_fu_450_p3;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_reg_1012),12));
    tmp_21_fu_803_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_reg_1017),12));
    tmp_21_fu_803_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_reg_1022),12));
    tmp_21_fu_803_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_reg_1027),12));
    tmp_22_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_2_reg_1037),12));
    tmp_22_fu_837_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_2_reg_1042),12));
    tmp_22_fu_837_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_2_reg_1047),12));
    tmp_22_fu_837_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_2_reg_1052),12));
    tmp_23_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_4_reg_1062),12));
    tmp_23_fu_871_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_4_reg_1067),12));
    tmp_23_fu_871_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_4_reg_1072),12));
    tmp_23_fu_871_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_4_reg_1077),12));
    tmp_24_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_6_reg_1087),12));
    tmp_24_fu_905_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_6_reg_1092),12));
    tmp_24_fu_905_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_6_reg_1097),12));
    tmp_24_fu_905_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_6_reg_1102),12));
    zext_ln65_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_fu_564_p2),2));
    zext_ln65_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_fu_648_p2),2));
    zext_ln65_3_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_fu_732_p2),2));
    zext_ln65_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_480_p2),2));
end behav;
