// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_30u_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write,
        res_stream_V_data_16_V_din,
        res_stream_V_data_16_V_full_n,
        res_stream_V_data_16_V_write,
        res_stream_V_data_17_V_din,
        res_stream_V_data_17_V_full_n,
        res_stream_V_data_17_V_write,
        res_stream_V_data_18_V_din,
        res_stream_V_data_18_V_full_n,
        res_stream_V_data_18_V_write,
        res_stream_V_data_19_V_din,
        res_stream_V_data_19_V_full_n,
        res_stream_V_data_19_V_write,
        res_stream_V_data_20_V_din,
        res_stream_V_data_20_V_full_n,
        res_stream_V_data_20_V_write,
        res_stream_V_data_21_V_din,
        res_stream_V_data_21_V_full_n,
        res_stream_V_data_21_V_write,
        res_stream_V_data_22_V_din,
        res_stream_V_data_22_V_full_n,
        res_stream_V_data_22_V_write,
        res_stream_V_data_23_V_din,
        res_stream_V_data_23_V_full_n,
        res_stream_V_data_23_V_write,
        res_stream_V_data_24_V_din,
        res_stream_V_data_24_V_full_n,
        res_stream_V_data_24_V_write,
        res_stream_V_data_25_V_din,
        res_stream_V_data_25_V_full_n,
        res_stream_V_data_25_V_write,
        res_stream_V_data_26_V_din,
        res_stream_V_data_26_V_full_n,
        res_stream_V_data_26_V_write,
        res_stream_V_data_27_V_din,
        res_stream_V_data_27_V_full_n,
        res_stream_V_data_27_V_write,
        res_stream_V_data_28_V_din,
        res_stream_V_data_28_V_full_n,
        res_stream_V_data_28_V_write,
        res_stream_V_data_29_V_din,
        res_stream_V_data_29_V_full_n,
        res_stream_V_data_29_V_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_state4 = 10'd4;
parameter    ap_ST_fsm_state5 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_state7 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_state10 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [15:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [15:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [15:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;
output  [15:0] res_stream_V_data_16_V_din;
input   res_stream_V_data_16_V_full_n;
output   res_stream_V_data_16_V_write;
output  [15:0] res_stream_V_data_17_V_din;
input   res_stream_V_data_17_V_full_n;
output   res_stream_V_data_17_V_write;
output  [15:0] res_stream_V_data_18_V_din;
input   res_stream_V_data_18_V_full_n;
output   res_stream_V_data_18_V_write;
output  [15:0] res_stream_V_data_19_V_din;
input   res_stream_V_data_19_V_full_n;
output   res_stream_V_data_19_V_write;
output  [15:0] res_stream_V_data_20_V_din;
input   res_stream_V_data_20_V_full_n;
output   res_stream_V_data_20_V_write;
output  [15:0] res_stream_V_data_21_V_din;
input   res_stream_V_data_21_V_full_n;
output   res_stream_V_data_21_V_write;
output  [15:0] res_stream_V_data_22_V_din;
input   res_stream_V_data_22_V_full_n;
output   res_stream_V_data_22_V_write;
output  [15:0] res_stream_V_data_23_V_din;
input   res_stream_V_data_23_V_full_n;
output   res_stream_V_data_23_V_write;
output  [15:0] res_stream_V_data_24_V_din;
input   res_stream_V_data_24_V_full_n;
output   res_stream_V_data_24_V_write;
output  [15:0] res_stream_V_data_25_V_din;
input   res_stream_V_data_25_V_full_n;
output   res_stream_V_data_25_V_write;
output  [15:0] res_stream_V_data_26_V_din;
input   res_stream_V_data_26_V_full_n;
output   res_stream_V_data_26_V_write;
output  [15:0] res_stream_V_data_27_V_din;
input   res_stream_V_data_27_V_full_n;
output   res_stream_V_data_27_V_write;
output  [15:0] res_stream_V_data_28_V_din;
input   res_stream_V_data_28_V_full_n;
output   res_stream_V_data_28_V_write;
output  [15:0] res_stream_V_data_29_V_din;
input   res_stream_V_data_29_V_full_n;
output   res_stream_V_data_29_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;
reg res_stream_V_data_16_V_write;
reg res_stream_V_data_17_V_write;
reg res_stream_V_data_18_V_write;
reg res_stream_V_data_19_V_write;
reg res_stream_V_data_20_V_write;
reg res_stream_V_data_21_V_write;
reg res_stream_V_data_22_V_write;
reg res_stream_V_data_23_V_write;
reg res_stream_V_data_24_V_write;
reg res_stream_V_data_25_V_write;
reg res_stream_V_data_26_V_write;
reg res_stream_V_data_27_V_write;
reg res_stream_V_data_28_V_write;
reg res_stream_V_data_29_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state11;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg    res_stream_V_data_16_V_blk_n;
reg    res_stream_V_data_17_V_blk_n;
reg    res_stream_V_data_18_V_blk_n;
reg    res_stream_V_data_19_V_blk_n;
reg    res_stream_V_data_20_V_blk_n;
reg    res_stream_V_data_21_V_blk_n;
reg    res_stream_V_data_22_V_blk_n;
reg    res_stream_V_data_23_V_blk_n;
reg    res_stream_V_data_24_V_blk_n;
reg    res_stream_V_data_25_V_blk_n;
reg    res_stream_V_data_26_V_blk_n;
reg    res_stream_V_data_27_V_blk_n;
reg    res_stream_V_data_28_V_blk_n;
reg    res_stream_V_data_29_V_blk_n;
reg   [4:0] i_in_0_reg_508;
wire   [0:0] icmp_ln36_fu_587_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op185;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_in_fu_593_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln203_fu_599_p1;
reg   [3:0] trunc_ln203_reg_1708;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_data_0_V18_reg_2032;
wire    ap_CS_fsm_state10;
reg   [15:0] tmp_data_1_V18_reg_2037;
reg   [15:0] tmp_data_2_V18_reg_2042;
reg   [15:0] tmp_data_3_V18_reg_2047;
reg   [15:0] tmp_data_4_V_reg_2052;
reg   [15:0] tmp_data_5_V_reg_2057;
reg   [15:0] tmp_data_6_V_reg_2062;
reg   [15:0] tmp_data_7_V_reg_2067;
reg   [15:0] tmp_data_8_V_reg_2072;
reg   [15:0] tmp_data_9_V_reg_2077;
reg   [15:0] tmp_data_10_V_reg_2082;
reg   [15:0] tmp_data_11_V_reg_2087;
reg   [15:0] tmp_data_12_V_reg_2092;
reg   [15:0] tmp_data_13_V_reg_2097;
reg   [15:0] tmp_data_14_V_reg_2102;
reg   [15:0] tmp_data_15_V_reg_2107;
reg   [15:0] tmp_data_16_V_reg_2112;
reg   [15:0] tmp_data_17_V_reg_2117;
reg   [15:0] tmp_data_18_V_reg_2122;
reg   [15:0] tmp_data_19_V_reg_2127;
reg   [15:0] tmp_data_20_V_reg_2132;
reg   [15:0] tmp_data_21_V_reg_2137;
reg   [15:0] tmp_data_22_V_reg_2142;
reg   [15:0] tmp_data_23_V_reg_2147;
reg   [15:0] tmp_data_24_V_reg_2152;
reg   [15:0] tmp_data_25_V_reg_2157;
reg   [15:0] tmp_data_26_V_reg_2162;
reg   [15:0] tmp_data_27_V_reg_2167;
reg   [15:0] tmp_data_28_V_reg_2172;
reg   [15:0] tmp_data_29_V_reg_2177;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_15;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_16;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_17;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_18;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_19;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_20;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_21;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_22;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_23;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_24;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_25;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_26;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_27;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_28;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_29;
reg   [15:0] tmp_data_0_V_fu_146;
reg   [15:0] tmp_data_1_V_fu_150;
reg   [15:0] tmp_data_2_V_fu_154;
reg   [15:0] tmp_data_3_V_fu_158;
reg   [15:0] tmp_data_0_V_3_fu_162;
reg   [15:0] tmp_data_1_V_3_fu_166;
reg   [15:0] tmp_data_2_V_3_fu_170;
reg   [15:0] tmp_data_3_V_3_fu_174;
reg   [15:0] tmp_data_0_V_4_fu_178;
reg   [15:0] tmp_data_1_V_4_fu_182;
reg   [15:0] tmp_data_2_V_4_fu_186;
reg   [15:0] tmp_data_3_V_4_fu_190;
reg   [15:0] tmp_data_0_V_5_fu_194;
reg   [15:0] tmp_data_1_V_5_fu_198;
reg   [15:0] tmp_data_2_V_5_fu_202;
reg   [15:0] tmp_data_3_V_5_fu_206;
reg   [15:0] tmp_data_0_V_6_fu_210;
reg   [15:0] tmp_data_1_V_6_fu_214;
reg   [15:0] tmp_data_2_V_6_fu_218;
reg   [15:0] tmp_data_3_V_6_fu_222;
reg   [15:0] tmp_data_0_V_7_fu_226;
reg   [15:0] tmp_data_1_V_7_fu_230;
reg   [15:0] tmp_data_2_V_7_fu_234;
reg   [15:0] tmp_data_3_V_7_fu_238;
reg   [15:0] tmp_data_0_V_8_fu_242;
reg   [15:0] tmp_data_1_V_8_fu_246;
reg   [15:0] tmp_data_2_V_8_fu_250;
reg   [15:0] tmp_data_3_V_8_fu_254;
reg   [15:0] tmp_data_0_V_9_fu_258;
reg   [15:0] tmp_data_1_V_9_fu_262;
reg   [15:0] tmp_data_2_V_9_fu_266;
reg   [15:0] tmp_data_3_V_9_fu_270;
reg   [15:0] tmp_data_0_V_10_fu_274;
reg   [15:0] tmp_data_1_V_10_fu_278;
reg   [15:0] tmp_data_2_V_10_fu_282;
reg   [15:0] tmp_data_3_V_10_fu_286;
reg   [15:0] tmp_data_0_V_11_fu_290;
reg   [15:0] tmp_data_1_V_11_fu_294;
reg   [15:0] tmp_data_2_V_11_fu_298;
reg   [15:0] tmp_data_3_V_11_fu_302;
reg   [15:0] tmp_data_0_V_12_fu_306;
reg   [15:0] tmp_data_1_V_12_fu_310;
reg   [15:0] tmp_data_2_V_12_fu_314;
reg   [15:0] tmp_data_3_V_12_fu_318;
reg   [15:0] tmp_data_0_V_13_fu_322;
reg   [15:0] tmp_data_1_V_13_fu_326;
reg   [15:0] tmp_data_2_V_13_fu_330;
reg   [15:0] tmp_data_3_V_13_fu_334;
reg   [15:0] tmp_data_0_V_14_fu_338;
reg   [15:0] tmp_data_1_V_14_fu_342;
reg   [15:0] tmp_data_2_V_14_fu_346;
reg   [15:0] tmp_data_3_V_14_fu_350;
reg   [15:0] tmp_data_0_V_15_fu_354;
reg   [15:0] tmp_data_1_V_15_fu_358;
reg   [15:0] tmp_data_2_V_15_fu_362;
reg   [15:0] tmp_data_3_V_15_fu_366;
reg   [15:0] tmp_data_0_V_16_fu_370;
reg   [15:0] tmp_data_1_V_16_fu_374;
reg   [15:0] tmp_data_2_V_16_fu_378;
reg   [15:0] tmp_data_3_V_16_fu_382;
reg   [15:0] tmp_data_0_V_17_fu_386;
reg   [15:0] tmp_data_1_V_17_fu_390;
reg   [15:0] tmp_data_2_V_17_fu_394;
reg   [15:0] tmp_data_3_V_17_fu_398;
wire    io_acc_block_signal_op361;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_V_read(tmp_data_0_V_fu_146),
    .data_1_V_read(tmp_data_1_V_fu_150),
    .data_2_V_read(tmp_data_2_V_fu_154),
    .data_3_V_read(tmp_data_3_V_fu_158),
    .data_4_V_read(tmp_data_0_V_3_fu_162),
    .data_5_V_read(tmp_data_1_V_3_fu_166),
    .data_6_V_read(tmp_data_2_V_3_fu_170),
    .data_7_V_read(tmp_data_3_V_3_fu_174),
    .data_8_V_read(tmp_data_0_V_4_fu_178),
    .data_9_V_read(tmp_data_1_V_4_fu_182),
    .data_10_V_read(tmp_data_2_V_4_fu_186),
    .data_11_V_read(tmp_data_3_V_4_fu_190),
    .data_12_V_read(tmp_data_0_V_5_fu_194),
    .data_13_V_read(tmp_data_1_V_5_fu_198),
    .data_14_V_read(tmp_data_2_V_5_fu_202),
    .data_15_V_read(tmp_data_3_V_5_fu_206),
    .data_16_V_read(tmp_data_0_V_6_fu_210),
    .data_17_V_read(tmp_data_1_V_6_fu_214),
    .data_18_V_read(tmp_data_2_V_6_fu_218),
    .data_19_V_read(tmp_data_3_V_6_fu_222),
    .data_20_V_read(tmp_data_0_V_7_fu_226),
    .data_21_V_read(tmp_data_1_V_7_fu_230),
    .data_22_V_read(tmp_data_2_V_7_fu_234),
    .data_23_V_read(tmp_data_3_V_7_fu_238),
    .data_24_V_read(tmp_data_0_V_8_fu_242),
    .data_25_V_read(tmp_data_1_V_8_fu_246),
    .data_26_V_read(tmp_data_2_V_8_fu_250),
    .data_27_V_read(tmp_data_3_V_8_fu_254),
    .data_28_V_read(tmp_data_0_V_9_fu_258),
    .data_29_V_read(tmp_data_1_V_9_fu_262),
    .data_30_V_read(tmp_data_2_V_9_fu_266),
    .data_31_V_read(tmp_data_3_V_9_fu_270),
    .data_32_V_read(tmp_data_0_V_10_fu_274),
    .data_33_V_read(tmp_data_1_V_10_fu_278),
    .data_34_V_read(tmp_data_2_V_10_fu_282),
    .data_35_V_read(tmp_data_3_V_10_fu_286),
    .data_36_V_read(tmp_data_0_V_11_fu_290),
    .data_37_V_read(tmp_data_1_V_11_fu_294),
    .data_38_V_read(tmp_data_2_V_11_fu_298),
    .data_39_V_read(tmp_data_3_V_11_fu_302),
    .data_40_V_read(tmp_data_0_V_12_fu_306),
    .data_41_V_read(tmp_data_1_V_12_fu_310),
    .data_42_V_read(tmp_data_2_V_12_fu_314),
    .data_43_V_read(tmp_data_3_V_12_fu_318),
    .data_44_V_read(tmp_data_0_V_13_fu_322),
    .data_45_V_read(tmp_data_1_V_13_fu_326),
    .data_46_V_read(tmp_data_2_V_13_fu_330),
    .data_47_V_read(tmp_data_3_V_13_fu_334),
    .data_48_V_read(tmp_data_0_V_14_fu_338),
    .data_49_V_read(tmp_data_1_V_14_fu_342),
    .data_50_V_read(tmp_data_2_V_14_fu_346),
    .data_51_V_read(tmp_data_3_V_14_fu_350),
    .data_52_V_read(tmp_data_0_V_15_fu_354),
    .data_53_V_read(tmp_data_1_V_15_fu_358),
    .data_54_V_read(tmp_data_2_V_15_fu_362),
    .data_55_V_read(tmp_data_3_V_15_fu_366),
    .data_56_V_read(tmp_data_0_V_16_fu_370),
    .data_57_V_read(tmp_data_1_V_16_fu_374),
    .data_58_V_read(tmp_data_2_V_16_fu_378),
    .data_59_V_read(tmp_data_3_V_16_fu_382),
    .data_60_V_read(tmp_data_0_V_17_fu_386),
    .data_61_V_read(tmp_data_1_V_17_fu_390),
    .data_62_V_read(tmp_data_2_V_17_fu_394),
    .data_63_V_read(tmp_data_3_V_17_fu_398),
    .ap_return_0(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_15),
    .ap_return_16(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_16),
    .ap_return_17(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_17),
    .ap_return_18(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_18),
    .ap_return_19(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_19),
    .ap_return_20(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_20),
    .ap_return_21(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_21),
    .ap_return_22(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_22),
    .ap_return_23(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_23),
    .ap_return_24(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_24),
    .ap_return_25(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_25),
    .ap_return_26(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_26),
    .ap_return_27(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_27),
    .ap_return_28(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_28),
    .ap_return_29(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_29)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_587_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_reg_508 <= i_in_fu_593_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_508 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_data_0_V18_reg_2032 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_0;
        tmp_data_10_V_reg_2082 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_10;
        tmp_data_11_V_reg_2087 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_11;
        tmp_data_12_V_reg_2092 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_12;
        tmp_data_13_V_reg_2097 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_13;
        tmp_data_14_V_reg_2102 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_14;
        tmp_data_15_V_reg_2107 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_15;
        tmp_data_16_V_reg_2112 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_16;
        tmp_data_17_V_reg_2117 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_17;
        tmp_data_18_V_reg_2122 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_18;
        tmp_data_19_V_reg_2127 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_19;
        tmp_data_1_V18_reg_2037 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_1;
        tmp_data_20_V_reg_2132 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_20;
        tmp_data_21_V_reg_2137 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_21;
        tmp_data_22_V_reg_2142 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_22;
        tmp_data_23_V_reg_2147 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_23;
        tmp_data_24_V_reg_2152 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_24;
        tmp_data_25_V_reg_2157 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_25;
        tmp_data_26_V_reg_2162 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_26;
        tmp_data_27_V_reg_2167 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_27;
        tmp_data_28_V_reg_2172 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_28;
        tmp_data_29_V_reg_2177 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_29;
        tmp_data_2_V18_reg_2042 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_2;
        tmp_data_3_V18_reg_2047 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_3;
        tmp_data_4_V_reg_2052 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_4;
        tmp_data_5_V_reg_2057 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_5;
        tmp_data_6_V_reg_2062 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_6;
        tmp_data_7_V_reg_2067 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_7;
        tmp_data_8_V_reg_2072 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_8;
        tmp_data_9_V_reg_2077 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_fu_519_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_10_fu_274 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_10_fu_278 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_10_fu_282 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_10_fu_286 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_11_fu_290 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_11_fu_294 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_11_fu_298 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_11_fu_302 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_12_fu_306 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_12_fu_310 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_12_fu_314 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_12_fu_318 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_13_fu_322 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_13_fu_326 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_13_fu_330 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_13_fu_334 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_14_fu_338 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_14_fu_342 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_14_fu_346 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_14_fu_350 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_15_fu_354 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_15_fu_358 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_15_fu_362 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_15_fu_366 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_16_fu_370 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_16_fu_374 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_16_fu_378 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_16_fu_382 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_17_fu_386 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_17_fu_390 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_17_fu_394 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_17_fu_398 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_3_fu_162 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_3_fu_166 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_3_fu_170 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_3_fu_174 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_4_fu_178 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_4_fu_182 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_4_fu_186 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_4_fu_190 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_5_fu_194 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_5_fu_198 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_5_fu_202 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_5_fu_206 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_6_fu_210 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_6_fu_214 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_6_fu_218 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_6_fu_222 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_7_fu_226 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_7_fu_230 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_7_fu_234 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_7_fu_238 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_8_fu_242 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_8_fu_246 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_8_fu_250 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_8_fu_254 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_9_fu_258 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_9_fu_262 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_9_fu_266 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_9_fu_270 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_1708 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_fu_146 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_fu_150 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_fu_154 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_fu_158 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln203_reg_1708 <= trunc_ln203_fu_599_p1;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_587_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_16_V_blk_n = res_stream_V_data_16_V_full_n;
    end else begin
        res_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_16_V_write = 1'b1;
    end else begin
        res_stream_V_data_16_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_17_V_blk_n = res_stream_V_data_17_V_full_n;
    end else begin
        res_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_17_V_write = 1'b1;
    end else begin
        res_stream_V_data_17_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_18_V_blk_n = res_stream_V_data_18_V_full_n;
    end else begin
        res_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_18_V_write = 1'b1;
    end else begin
        res_stream_V_data_18_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_19_V_blk_n = res_stream_V_data_19_V_full_n;
    end else begin
        res_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_19_V_write = 1'b1;
    end else begin
        res_stream_V_data_19_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_20_V_blk_n = res_stream_V_data_20_V_full_n;
    end else begin
        res_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_20_V_write = 1'b1;
    end else begin
        res_stream_V_data_20_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_21_V_blk_n = res_stream_V_data_21_V_full_n;
    end else begin
        res_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_21_V_write = 1'b1;
    end else begin
        res_stream_V_data_21_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_22_V_blk_n = res_stream_V_data_22_V_full_n;
    end else begin
        res_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_22_V_write = 1'b1;
    end else begin
        res_stream_V_data_22_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_23_V_blk_n = res_stream_V_data_23_V_full_n;
    end else begin
        res_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_23_V_write = 1'b1;
    end else begin
        res_stream_V_data_23_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_24_V_blk_n = res_stream_V_data_24_V_full_n;
    end else begin
        res_stream_V_data_24_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_24_V_write = 1'b1;
    end else begin
        res_stream_V_data_24_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_25_V_blk_n = res_stream_V_data_25_V_full_n;
    end else begin
        res_stream_V_data_25_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_25_V_write = 1'b1;
    end else begin
        res_stream_V_data_25_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_26_V_blk_n = res_stream_V_data_26_V_full_n;
    end else begin
        res_stream_V_data_26_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_26_V_write = 1'b1;
    end else begin
        res_stream_V_data_26_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_27_V_blk_n = res_stream_V_data_27_V_full_n;
    end else begin
        res_stream_V_data_27_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_27_V_write = 1'b1;
    end else begin
        res_stream_V_data_27_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_28_V_blk_n = res_stream_V_data_28_V_full_n;
    end else begin
        res_stream_V_data_28_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_28_V_write = 1'b1;
    end else begin
        res_stream_V_data_28_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_29_V_blk_n = res_stream_V_data_29_V_full_n;
    end else begin
        res_stream_V_data_29_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_29_V_write = 1'b1;
    end else begin
        res_stream_V_data_29_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_587_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_587_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((io_acc_block_signal_op361 == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op185 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op185 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op185 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_593_p2 = (i_in_0_reg_508 + 5'd1);

assign icmp_ln36_fu_587_p2 = ((i_in_0_reg_508 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op185 = (data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op361 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_29_V_full_n & res_stream_V_data_28_V_full_n & res_stream_V_data_27_V_full_n & res_stream_V_data_26_V_full_n & res_stream_V_data_25_V_full_n & res_stream_V_data_24_V_full_n & res_stream_V_data_23_V_full_n & res_stream_V_data_22_V_full_n & res_stream_V_data_21_V_full_n & res_stream_V_data_20_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_19_V_full_n & res_stream_V_data_18_V_full_n & res_stream_V_data_17_V_full_n & res_stream_V_data_16_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V18_reg_2032;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_2082;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_2087;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_2092;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_2097;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_2102;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_2107;

assign res_stream_V_data_16_V_din = tmp_data_16_V_reg_2112;

assign res_stream_V_data_17_V_din = tmp_data_17_V_reg_2117;

assign res_stream_V_data_18_V_din = tmp_data_18_V_reg_2122;

assign res_stream_V_data_19_V_din = tmp_data_19_V_reg_2127;

assign res_stream_V_data_1_V_din = tmp_data_1_V18_reg_2037;

assign res_stream_V_data_20_V_din = tmp_data_20_V_reg_2132;

assign res_stream_V_data_21_V_din = tmp_data_21_V_reg_2137;

assign res_stream_V_data_22_V_din = tmp_data_22_V_reg_2142;

assign res_stream_V_data_23_V_din = tmp_data_23_V_reg_2147;

assign res_stream_V_data_24_V_din = tmp_data_24_V_reg_2152;

assign res_stream_V_data_25_V_din = tmp_data_25_V_reg_2157;

assign res_stream_V_data_26_V_din = tmp_data_26_V_reg_2162;

assign res_stream_V_data_27_V_din = tmp_data_27_V_reg_2167;

assign res_stream_V_data_28_V_din = tmp_data_28_V_reg_2172;

assign res_stream_V_data_29_V_din = tmp_data_29_V_reg_2177;

assign res_stream_V_data_2_V_din = tmp_data_2_V18_reg_2042;

assign res_stream_V_data_3_V_din = tmp_data_3_V18_reg_2047;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_2052;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_2057;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_2062;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_2067;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_2072;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_2077;

assign start_out = real_start;

assign trunc_ln203_fu_599_p1 = i_in_0_reg_508[3:0];

endmodule //dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_30u_config11_s
