-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_array_ap_fixed_4u_array_ap_ufixed_4_0_4_0_0_4u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of relu_array_ap_fixed_4u_array_ap_ufixed_4_0_4_0_0_4u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln41_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln41_reg_679_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal i_0_reg_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln41_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal io_acc_block_signal_op109 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln41_reg_679_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_137_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_reg_688 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_706 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_715 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln718_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_1_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_1_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_2_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_2_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_reg_759 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_3_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_3_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_1_fu_377_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_0_V_1_reg_784 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_1_V_1_fu_475_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_1_V_1_reg_789 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_2_V_1_fu_573_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_2_V_1_reg_794 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_3_V_1_fu_671_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_3_V_1_reg_799 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln718_fu_159_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_169_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_1_fu_191_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_10_1_fu_201_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_2_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_10_2_fu_233_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_3_fu_255_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_10_3_fu_265_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_292_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln415_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_50_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_431_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln708_s_fu_390_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln415_1_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_53_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_1_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_1_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_467_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_497_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_2_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_2_fu_529_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln708_1_fu_488_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln415_2_fu_533_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_2_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_2_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_565_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_3_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_3_fu_627_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln708_2_fu_586_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln415_3_fu_631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_61_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_3_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_3_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_663_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_120 <= i_fu_137_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_120 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln41_reg_679 <= icmp_ln41_fu_131_p2;
                icmp_ln41_reg_679_pp0_iter1_reg <= icmp_ln41_reg_679;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln41_reg_679_pp0_iter2_reg <= icmp_ln41_reg_679_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln718_1_reg_739 <= icmp_ln718_1_fu_195_p2;
                icmp_ln718_2_reg_754 <= icmp_ln718_2_fu_227_p2;
                icmp_ln718_3_reg_769 <= icmp_ln718_3_fu_259_p2;
                icmp_ln718_reg_724 <= icmp_ln718_fu_163_p2;
                icmp_ln768_1_reg_749 <= icmp_ln768_1_fu_217_p2;
                icmp_ln768_2_reg_764 <= icmp_ln768_2_fu_249_p2;
                icmp_ln768_3_reg_779 <= icmp_ln768_3_fu_281_p2;
                icmp_ln768_reg_734 <= icmp_ln768_fu_185_p2;
                icmp_ln879_1_reg_744 <= icmp_ln879_1_fu_211_p2;
                icmp_ln879_2_reg_759 <= icmp_ln879_2_fu_243_p2;
                icmp_ln879_3_reg_774 <= icmp_ln879_3_fu_275_p2;
                icmp_ln879_reg_729 <= icmp_ln879_fu_179_p2;
                tmp_data_0_V_reg_688 <= data_V_data_0_V_dout;
                tmp_data_1_V_reg_697 <= data_V_data_1_V_dout;
                tmp_data_2_V_reg_706 <= data_V_data_2_V_dout;
                tmp_data_3_V_reg_715 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_679_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_0_V_1_reg_784 <= tmp_data_0_V_1_fu_377_p3;
                tmp_data_1_V_1_reg_789 <= tmp_data_1_V_1_fu_475_p3;
                tmp_data_2_V_1_reg_794 <= tmp_data_2_V_1_fu_573_p3;
                tmp_data_3_V_1_reg_799 <= tmp_data_3_V_1_fu_671_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln41_fu_131_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_131_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_131_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln415_1_fu_435_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_431_p1) + unsigned(trunc_ln708_s_fu_390_p4));
    add_ln415_2_fu_533_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_529_p1) + unsigned(trunc_ln708_1_fu_488_p4));
    add_ln415_3_fu_631_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_627_p1) + unsigned(trunc_ln708_2_fu_586_p4));
    add_ln415_fu_337_p2 <= std_logic_vector(unsigned(zext_ln415_fu_333_p1) + unsigned(trunc_ln_fu_292_p4));
    and_ln415_1_fu_425_p2 <= (tmp_52_fu_418_p3 and or_ln412_1_fu_413_p2);
    and_ln415_2_fu_523_p2 <= (tmp_56_fu_516_p3 and or_ln412_2_fu_511_p2);
    and_ln415_3_fu_621_p2 <= (tmp_60_fu_614_p3 and or_ln412_3_fu_609_p2);
    and_ln415_fu_327_p2 <= (tmp_48_fu_320_p3 and or_ln412_fu_315_p2);
    and_ln416_1_fu_455_p2 <= (xor_ln416_1_fu_449_p2 and tmp_51_fu_406_p3);
    and_ln416_2_fu_553_p2 <= (xor_ln416_2_fu_547_p2 and tmp_55_fu_504_p3);
    and_ln416_3_fu_651_p2 <= (xor_ln416_3_fu_645_p2 and tmp_59_fu_602_p3);
    and_ln416_fu_357_p2 <= (xor_ln416_fu_351_p2 and tmp_47_fu_308_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_679 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_679 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_679 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln41_reg_679, io_acc_block_signal_op21)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln41_reg_679 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(icmp_ln41_reg_679_pp0_iter2_reg, io_acc_block_signal_op109)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln41_fu_131_p2)
    begin
        if ((icmp_ln41_fu_131_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_679)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_679)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_679)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_679)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_679, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_137_p2 <= std_logic_vector(unsigned(i_0_reg_120) + unsigned(ap_const_lv7_1));
    icmp_ln1494_1_fu_385_p2 <= "1" when (signed(tmp_data_1_V_reg_697) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_2_fu_483_p2 <= "1" when (signed(tmp_data_2_V_reg_706) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_3_fu_581_p2 <= "1" when (signed(tmp_data_3_V_reg_715) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_287_p2 <= "1" when (signed(tmp_data_0_V_reg_688) > signed(ap_const_lv16_0)) else "0";
    icmp_ln41_fu_131_p2 <= "1" when (i_0_reg_120 = ap_const_lv7_40) else "0";
    icmp_ln718_1_fu_195_p2 <= "0" when (trunc_ln718_1_fu_191_p1 = ap_const_lv5_0) else "1";
    icmp_ln718_2_fu_227_p2 <= "0" when (trunc_ln718_2_fu_223_p1 = ap_const_lv5_0) else "1";
    icmp_ln718_3_fu_259_p2 <= "0" when (trunc_ln718_3_fu_255_p1 = ap_const_lv5_0) else "1";
    icmp_ln718_fu_163_p2 <= "0" when (trunc_ln718_fu_159_p1 = ap_const_lv5_0) else "1";
    icmp_ln768_1_fu_217_p2 <= "1" when (p_Result_10_1_fu_201_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_2_fu_249_p2 <= "1" when (p_Result_10_2_fu_233_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_3_fu_281_p2 <= "1" when (p_Result_10_3_fu_265_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_185_p2 <= "1" when (p_Result_s_fu_169_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_1_fu_211_p2 <= "1" when (p_Result_10_1_fu_201_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_2_fu_243_p2 <= "1" when (p_Result_10_2_fu_233_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_3_fu_275_p2 <= "1" when (p_Result_10_3_fu_265_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_179_p2 <= "1" when (p_Result_s_fu_169_p4 = ap_const_lv6_3F) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op109 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op21 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    or_ln412_1_fu_413_p2 <= (tmp_50_fu_399_p3 or icmp_ln718_1_reg_739);
    or_ln412_2_fu_511_p2 <= (tmp_54_fu_497_p3 or icmp_ln718_2_reg_754);
    or_ln412_3_fu_609_p2 <= (tmp_58_fu_595_p3 or icmp_ln718_3_reg_769);
    or_ln412_fu_315_p2 <= (tmp_46_fu_301_p3 or icmp_ln718_reg_724);
    p_Result_10_1_fu_201_p4 <= data_V_data_1_V_dout(15 downto 10);
    p_Result_10_2_fu_233_p4 <= data_V_data_2_V_dout(15 downto 10);
    p_Result_10_3_fu_265_p4 <= data_V_data_3_V_dout(15 downto 10);
    p_Result_s_fu_169_p4 <= data_V_data_0_V_dout(15 downto 10);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_1_reg_784;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_1_reg_789;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_1_reg_794;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_1_reg_799;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_679_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_679_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_1_fu_467_p3 <= 
        add_ln415_1_fu_435_p2 when (select_ln777_1_fu_461_p3(0) = '1') else 
        ap_const_lv4_F;
    select_ln340_2_fu_565_p3 <= 
        add_ln415_2_fu_533_p2 when (select_ln777_2_fu_559_p3(0) = '1') else 
        ap_const_lv4_F;
    select_ln340_3_fu_663_p3 <= 
        add_ln415_3_fu_631_p2 when (select_ln777_3_fu_657_p3(0) = '1') else 
        ap_const_lv4_F;
    select_ln340_fu_369_p3 <= 
        add_ln415_fu_337_p2 when (select_ln777_fu_363_p3(0) = '1') else 
        ap_const_lv4_F;
    select_ln777_1_fu_461_p3 <= 
        icmp_ln879_1_reg_744 when (and_ln416_1_fu_455_p2(0) = '1') else 
        icmp_ln768_1_reg_749;
    select_ln777_2_fu_559_p3 <= 
        icmp_ln879_2_reg_759 when (and_ln416_2_fu_553_p2(0) = '1') else 
        icmp_ln768_2_reg_764;
    select_ln777_3_fu_657_p3 <= 
        icmp_ln879_3_reg_774 when (and_ln416_3_fu_651_p2(0) = '1') else 
        icmp_ln768_3_reg_779;
    select_ln777_fu_363_p3 <= 
        icmp_ln879_reg_729 when (and_ln416_fu_357_p2(0) = '1') else 
        icmp_ln768_reg_734;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_46_fu_301_p3 <= tmp_data_0_V_reg_688(6 downto 6);
    tmp_47_fu_308_p3 <= tmp_data_0_V_reg_688(9 downto 9);
    tmp_48_fu_320_p3 <= tmp_data_0_V_reg_688(5 downto 5);
    tmp_49_fu_343_p3 <= add_ln415_fu_337_p2(3 downto 3);
    tmp_50_fu_399_p3 <= tmp_data_1_V_reg_697(6 downto 6);
    tmp_51_fu_406_p3 <= tmp_data_1_V_reg_697(9 downto 9);
    tmp_52_fu_418_p3 <= tmp_data_1_V_reg_697(5 downto 5);
    tmp_53_fu_441_p3 <= add_ln415_1_fu_435_p2(3 downto 3);
    tmp_54_fu_497_p3 <= tmp_data_2_V_reg_706(6 downto 6);
    tmp_55_fu_504_p3 <= tmp_data_2_V_reg_706(9 downto 9);
    tmp_56_fu_516_p3 <= tmp_data_2_V_reg_706(5 downto 5);
    tmp_57_fu_539_p3 <= add_ln415_2_fu_533_p2(3 downto 3);
    tmp_58_fu_595_p3 <= tmp_data_3_V_reg_715(6 downto 6);
    tmp_59_fu_602_p3 <= tmp_data_3_V_reg_715(9 downto 9);
    tmp_60_fu_614_p3 <= tmp_data_3_V_reg_715(5 downto 5);
    tmp_61_fu_637_p3 <= add_ln415_3_fu_631_p2(3 downto 3);
    tmp_data_0_V_1_fu_377_p3 <= 
        select_ln340_fu_369_p3 when (icmp_ln1494_fu_287_p2(0) = '1') else 
        ap_const_lv4_0;
    tmp_data_1_V_1_fu_475_p3 <= 
        select_ln340_1_fu_467_p3 when (icmp_ln1494_1_fu_385_p2(0) = '1') else 
        ap_const_lv4_0;
    tmp_data_2_V_1_fu_573_p3 <= 
        select_ln340_2_fu_565_p3 when (icmp_ln1494_2_fu_483_p2(0) = '1') else 
        ap_const_lv4_0;
    tmp_data_3_V_1_fu_671_p3 <= 
        select_ln340_3_fu_663_p3 when (icmp_ln1494_3_fu_581_p2(0) = '1') else 
        ap_const_lv4_0;
    trunc_ln708_1_fu_488_p4 <= tmp_data_2_V_reg_706(9 downto 6);
    trunc_ln708_2_fu_586_p4 <= tmp_data_3_V_reg_715(9 downto 6);
    trunc_ln708_s_fu_390_p4 <= tmp_data_1_V_reg_697(9 downto 6);
    trunc_ln718_1_fu_191_p1 <= data_V_data_1_V_dout(5 - 1 downto 0);
    trunc_ln718_2_fu_223_p1 <= data_V_data_2_V_dout(5 - 1 downto 0);
    trunc_ln718_3_fu_255_p1 <= data_V_data_3_V_dout(5 - 1 downto 0);
    trunc_ln718_fu_159_p1 <= data_V_data_0_V_dout(5 - 1 downto 0);
    trunc_ln_fu_292_p4 <= tmp_data_0_V_reg_688(9 downto 6);
    xor_ln416_1_fu_449_p2 <= (tmp_53_fu_441_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_547_p2 <= (tmp_57_fu_539_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_645_p2 <= (tmp_61_fu_637_p3 xor ap_const_lv1_1);
    xor_ln416_fu_351_p2 <= (tmp_49_fu_343_p3 xor ap_const_lv1_1);
    zext_ln415_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_425_p2),4));
    zext_ln415_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_2_fu_523_p2),4));
    zext_ln415_3_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_3_fu_621_p2),4));
    zext_ln415_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_327_p2),4));
end behav;
