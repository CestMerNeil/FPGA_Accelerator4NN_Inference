// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [3:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [3:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [3:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [3:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [3:0] kernel_data_V_3_4;
reg   [3:0] kernel_data_V_3_5;
reg   [3:0] kernel_data_V_3_6;
reg   [3:0] kernel_data_V_3_7;
reg   [3:0] kernel_data_V_3_12;
reg   [3:0] kernel_data_V_3_13;
reg   [3:0] kernel_data_V_3_14;
reg   [3:0] kernel_data_V_3_15;
reg    line_buffer_Array_V_3_0_0_ce0;
reg    line_buffer_Array_V_3_0_0_we0;
wire   [3:0] line_buffer_Array_V_3_0_0_q0;
reg    line_buffer_Array_V_3_0_1_ce0;
reg    line_buffer_Array_V_3_0_1_we0;
wire   [3:0] line_buffer_Array_V_3_0_1_q0;
reg    line_buffer_Array_V_3_0_2_ce0;
reg    line_buffer_Array_V_3_0_2_we0;
wire   [3:0] line_buffer_Array_V_3_0_2_q0;
reg    line_buffer_Array_V_3_0_3_ce0;
reg    line_buffer_Array_V_3_0_3_we0;
wire   [3:0] line_buffer_Array_V_3_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_933;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln191_2_reg_990;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [6:0] indvar_flatten_reg_148;
wire   [0:0] icmp_ln241_fu_170_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln241_fu_176_p2;
reg   [6:0] add_ln241_reg_937;
reg   [3:0] tmp_data_0_V_2_reg_942;
wire    io_acc_block_signal_op20;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op153;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] tmp_data_1_V_2_reg_948;
reg   [3:0] tmp_data_2_V_2_reg_954;
reg   [3:0] tmp_data_3_V_2_reg_960;
reg   [3:0] DataOut_V_4_reg_966;
reg   [3:0] DataOut_V_5_reg_972;
reg   [3:0] DataOut_V_6_reg_978;
reg   [3:0] DataOut_V_reg_984;
wire   [0:0] and_ln191_2_fu_290_p2;
wire   [0:0] icmp_ln212_fu_296_p2;
reg   [0:0] icmp_ln212_reg_994;
wire   [31:0] select_ln227_fu_320_p3;
reg   [31:0] select_ln227_reg_998;
wire   [0:0] icmp_ln216_fu_340_p2;
reg   [0:0] icmp_ln216_reg_1003;
wire   [31:0] select_ln222_fu_364_p3;
reg   [31:0] select_ln222_reg_1007;
wire   [5:0] pool_window_0_V_fu_450_p3;
reg   [5:0] pool_window_0_V_reg_1012;
wire   [5:0] pool_window_1_V_fu_458_p3;
reg   [5:0] pool_window_1_V_reg_1017;
wire   [5:0] pool_window_2_V_fu_465_p3;
reg   [5:0] pool_window_2_V_reg_1022;
wire   [5:0] pool_window_3_V_fu_473_p3;
reg   [5:0] pool_window_3_V_reg_1027;
wire   [1:0] select_ln65_11_fu_526_p3;
reg   [1:0] select_ln65_11_reg_1032;
wire   [5:0] pool_window_0_V_2_fu_534_p3;
reg   [5:0] pool_window_0_V_2_reg_1037;
wire   [5:0] pool_window_1_V_2_fu_542_p3;
reg   [5:0] pool_window_1_V_2_reg_1042;
wire   [5:0] pool_window_2_V_2_fu_549_p3;
reg   [5:0] pool_window_2_V_2_reg_1047;
wire   [5:0] pool_window_3_V_2_fu_557_p3;
reg   [5:0] pool_window_3_V_2_reg_1052;
wire   [1:0] select_ln65_15_fu_610_p3;
reg   [1:0] select_ln65_15_reg_1057;
wire   [5:0] pool_window_0_V_4_fu_618_p3;
reg   [5:0] pool_window_0_V_4_reg_1062;
wire   [5:0] pool_window_1_V_4_fu_626_p3;
reg   [5:0] pool_window_1_V_4_reg_1067;
wire   [5:0] pool_window_2_V_4_fu_633_p3;
reg   [5:0] pool_window_2_V_4_reg_1072;
wire   [5:0] pool_window_3_V_4_fu_641_p3;
reg   [5:0] pool_window_3_V_4_reg_1077;
wire   [1:0] select_ln65_17_fu_694_p3;
reg   [1:0] select_ln65_17_reg_1082;
wire   [5:0] pool_window_0_V_6_fu_702_p3;
reg   [5:0] pool_window_0_V_6_reg_1087;
wire   [5:0] pool_window_1_V_6_fu_710_p3;
reg   [5:0] pool_window_1_V_6_reg_1092;
wire   [5:0] pool_window_2_V_6_fu_717_p3;
reg   [5:0] pool_window_2_V_6_reg_1097;
wire   [5:0] pool_window_3_V_6_fu_725_p3;
reg   [5:0] pool_window_3_V_6_reg_1102;
wire   [1:0] select_ln65_19_fu_778_p3;
reg   [1:0] select_ln65_19_reg_1107;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_152_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
wire   [31:0] add_ln225_fu_302_p2;
wire   [31:0] add_ln220_fu_346_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln191_fu_242_p2;
wire   [0:0] icmp_ln191_1_fu_252_p2;
wire   [0:0] icmp_ln191_2_fu_262_p2;
wire   [0:0] icmp_ln191_3_fu_272_p2;
wire   [0:0] and_ln191_1_fu_284_p2;
wire   [0:0] and_ln191_fu_278_p2;
wire   [31:0] add_ln227_fu_314_p2;
wire   [31:0] add_ln222_fu_358_p2;
wire   [0:0] icmp_ln1496_fu_480_p2;
wire   [0:0] icmp_ln1496_1_fu_494_p2;
wire   [5:0] select_ln65_fu_486_p3;
wire   [5:0] select_ln65_2_fu_508_p3;
wire   [0:0] icmp_ln1496_2_fu_516_p2;
wire   [1:0] select_ln65_9_fu_500_p3;
wire   [1:0] zext_ln65_fu_522_p1;
wire   [0:0] icmp_ln1496_4_fu_564_p2;
wire   [0:0] icmp_ln1496_5_fu_578_p2;
wire   [5:0] select_ln65_4_fu_570_p3;
wire   [5:0] select_ln65_6_fu_592_p3;
wire   [0:0] icmp_ln1496_6_fu_600_p2;
wire   [1:0] select_ln65_13_fu_584_p3;
wire   [1:0] zext_ln65_1_fu_606_p1;
wire   [0:0] icmp_ln1496_7_fu_648_p2;
wire   [0:0] icmp_ln1496_8_fu_662_p2;
wire   [5:0] select_ln65_8_fu_654_p3;
wire   [5:0] select_ln65_10_fu_676_p3;
wire   [0:0] icmp_ln1496_9_fu_684_p2;
wire   [1:0] select_ln65_16_fu_668_p3;
wire   [1:0] zext_ln65_2_fu_690_p1;
wire   [0:0] icmp_ln1496_3_fu_732_p2;
wire   [0:0] icmp_ln1496_10_fu_746_p2;
wire   [5:0] select_ln65_12_fu_738_p3;
wire   [5:0] select_ln65_14_fu_760_p3;
wire   [0:0] icmp_ln1496_11_fu_768_p2;
wire   [1:0] select_ln65_18_fu_752_p3;
wire   [1:0] zext_ln65_3_fu_774_p1;
wire   [11:0] tmp_21_fu_803_p1;
wire   [11:0] tmp_21_fu_803_p2;
wire   [11:0] tmp_21_fu_803_p3;
wire   [11:0] tmp_21_fu_803_p4;
wire   [11:0] tmp_21_fu_803_p6;
wire   [11:0] tmp_22_fu_837_p1;
wire   [11:0] tmp_22_fu_837_p2;
wire   [11:0] tmp_22_fu_837_p3;
wire   [11:0] tmp_22_fu_837_p4;
wire   [11:0] tmp_22_fu_837_p6;
wire   [11:0] tmp_23_fu_871_p1;
wire   [11:0] tmp_23_fu_871_p2;
wire   [11:0] tmp_23_fu_871_p3;
wire   [11:0] tmp_23_fu_871_p4;
wire   [11:0] tmp_23_fu_871_p6;
wire   [11:0] tmp_24_fu_905_p1;
wire   [11:0] tmp_24_fu_905_p2;
wire   [11:0] tmp_24_fu_905_p3;
wire   [11:0] tmp_24_fu_905_p4;
wire   [11:0] tmp_24_fu_905_p6;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_345;
reg    ap_condition_309;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_3_4 = 4'd0;
#0 kernel_data_V_3_5 = 4'd0;
#0 kernel_data_V_3_6 = 4'd0;
#0 kernel_data_V_3_7 = 4'd0;
#0 kernel_data_V_3_12 = 4'd0;
#0 kernel_data_V_3_13 = 4'd0;
#0 kernel_data_V_3_14 = 4'd0;
#0 kernel_data_V_3_15 = 4'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_3_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(line_buffer_Array_V_3_0_0_ce0),
    .we0(line_buffer_Array_V_3_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_3_0_0_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_3_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(line_buffer_Array_V_3_0_1_ce0),
    .we0(line_buffer_Array_V_3_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_3_0_1_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_3_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(line_buffer_Array_V_3_0_2_ce0),
    .we0(line_buffer_Array_V_3_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_3_0_2_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bbxn #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_3_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd7),
    .ce0(line_buffer_Array_V_3_0_3_ce0),
    .we0(line_buffer_Array_V_3_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_3_0_3_q0)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U138(
    .din0(tmp_21_fu_803_p1),
    .din1(tmp_21_fu_803_p2),
    .din2(tmp_21_fu_803_p3),
    .din3(tmp_21_fu_803_p4),
    .din4(select_ln65_11_reg_1032),
    .dout(tmp_21_fu_803_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U139(
    .din0(tmp_22_fu_837_p1),
    .din1(tmp_22_fu_837_p2),
    .din2(tmp_22_fu_837_p3),
    .din3(tmp_22_fu_837_p4),
    .din4(select_ln65_15_reg_1057),
    .dout(tmp_22_fu_837_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U140(
    .din0(tmp_23_fu_871_p1),
    .din1(tmp_23_fu_871_p2),
    .din2(tmp_23_fu_871_p3),
    .din3(tmp_23_fu_871_p4),
    .din4(select_ln65_17_reg_1082),
    .dout(tmp_23_fu_871_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U141(
    .din0(tmp_24_fu_905_p1),
    .din1(tmp_24_fu_905_p2),
    .din2(tmp_24_fu_905_p3),
    .din3(tmp_24_fu_905_p4),
    .din4(select_ln65_19_reg_1107),
    .dout(tmp_24_fu_905_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln216_fu_340_p2 == 1'd1) & (icmp_ln212_fu_296_p2 == 1'd1) & (icmp_ln241_reg_933 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_994 == 1'd1) & (icmp_ln216_reg_1003 == 1'd0) & (icmp_ln241_reg_933 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= select_ln222_reg_1007;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        indvar_flatten_reg_148 <= add_ln241_reg_937;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_148 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_345)) begin
        if ((icmp_ln212_fu_296_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_296_p2 == 1'd0)) begin
            pX <= add_ln225_fu_302_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_309)) begin
        if ((icmp_ln216_fu_340_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln216_fu_340_p2 == 1'd0)) begin
            pY <= add_ln220_fu_346_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_994 == 1'd0))) begin
        sX <= select_ln227_reg_998;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_296_p2 == 1'd1) & (icmp_ln241_reg_933 == 1'd0))) begin
        sX <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        DataOut_V_4_reg_966 <= line_buffer_Array_V_3_0_0_q0;
        DataOut_V_5_reg_972 <= line_buffer_Array_V_3_0_1_q0;
        DataOut_V_6_reg_978 <= line_buffer_Array_V_3_0_2_q0;
        DataOut_V_reg_984 <= line_buffer_Array_V_3_0_3_q0;
        and_ln191_2_reg_990 <= and_ln191_2_fu_290_p2;
        icmp_ln212_reg_994 <= icmp_ln212_fu_296_p2;
        tmp_data_0_V_2_reg_942 <= data_V_data_0_V_dout;
        tmp_data_1_V_2_reg_948 <= data_V_data_1_V_dout;
        tmp_data_2_V_2_reg_954 <= data_V_data_2_V_dout;
        tmp_data_3_V_2_reg_960 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln241_reg_937 <= add_ln241_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_296_p2 == 1'd1) & (icmp_ln241_reg_933 == 1'd0))) begin
        icmp_ln216_reg_1003 <= icmp_ln216_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln241_reg_933 <= icmp_ln241_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        kernel_data_V_3_12 <= tmp_data_0_V_2_reg_942;
        kernel_data_V_3_13 <= tmp_data_1_V_2_reg_948;
        kernel_data_V_3_14 <= tmp_data_2_V_2_reg_954;
        kernel_data_V_3_15 <= tmp_data_3_V_2_reg_960;
        kernel_data_V_3_4 <= DataOut_V_4_reg_966;
        kernel_data_V_3_5 <= DataOut_V_5_reg_972;
        kernel_data_V_3_6 <= DataOut_V_6_reg_978;
        kernel_data_V_3_7 <= DataOut_V_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_990))) begin
        pool_window_0_V_2_reg_1037[5 : 2] <= pool_window_0_V_2_fu_534_p3[5 : 2];
        pool_window_0_V_4_reg_1062[5 : 2] <= pool_window_0_V_4_fu_618_p3[5 : 2];
        pool_window_0_V_6_reg_1087[5 : 2] <= pool_window_0_V_6_fu_702_p3[5 : 2];
        pool_window_0_V_reg_1012[5 : 2] <= pool_window_0_V_fu_450_p3[5 : 2];
        pool_window_1_V_2_reg_1042[5 : 2] <= pool_window_1_V_2_fu_542_p3[5 : 2];
        pool_window_1_V_4_reg_1067[5 : 2] <= pool_window_1_V_4_fu_626_p3[5 : 2];
        pool_window_1_V_6_reg_1092[5 : 2] <= pool_window_1_V_6_fu_710_p3[5 : 2];
        pool_window_1_V_reg_1017[5 : 2] <= pool_window_1_V_fu_458_p3[5 : 2];
        pool_window_2_V_2_reg_1047[5 : 2] <= pool_window_2_V_2_fu_549_p3[5 : 2];
        pool_window_2_V_4_reg_1072[5 : 2] <= pool_window_2_V_4_fu_633_p3[5 : 2];
        pool_window_2_V_6_reg_1097[5 : 2] <= pool_window_2_V_6_fu_717_p3[5 : 2];
        pool_window_2_V_reg_1022[5 : 2] <= pool_window_2_V_fu_465_p3[5 : 2];
        pool_window_3_V_2_reg_1052[5 : 2] <= pool_window_3_V_2_fu_557_p3[5 : 2];
        pool_window_3_V_4_reg_1077[5 : 2] <= pool_window_3_V_4_fu_641_p3[5 : 2];
        pool_window_3_V_6_reg_1102[5 : 2] <= pool_window_3_V_6_fu_725_p3[5 : 2];
        pool_window_3_V_reg_1027[5 : 2] <= pool_window_3_V_fu_473_p3[5 : 2];
        select_ln65_11_reg_1032 <= select_ln65_11_fu_526_p3;
        select_ln65_15_reg_1057 <= select_ln65_15_fu_610_p3;
        select_ln65_17_reg_1082 <= select_ln65_17_fu_694_p3;
        select_ln65_19_reg_1107 <= select_ln65_19_fu_778_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_994 == 1'd1))) begin
        sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_296_p2 == 1'd1) & (icmp_ln216_fu_340_p2 == 1'd0) & (icmp_ln241_reg_933 == 1'd0))) begin
        select_ln222_reg_1007 <= select_ln222_fu_364_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_296_p2 == 1'd0) & (icmp_ln241_reg_933 == 1'd0))) begin
        select_ln227_reg_998 <= select_ln227_fu_320_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_170_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_933 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_152_p4 = add_ln241_reg_937;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_152_p4 = indvar_flatten_reg_148;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln212_reg_994 == 1'd1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_933 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_933 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_933 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln241_reg_933 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0))) begin
        line_buffer_Array_V_3_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_990) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_990))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_990) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_990))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_990) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_990))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln191_2_reg_990) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_990))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_346_p2 = (pY + 32'd1);

assign add_ln222_fu_358_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln225_fu_302_p2 = (pX + 32'd1);

assign add_ln227_fu_314_p2 = (sX + 32'd1);

assign add_ln241_fu_176_p2 = (ap_phi_mux_indvar_flatten_phi_fu_152_p4 + 7'd1);

assign and_ln191_1_fu_284_p2 = (icmp_ln191_3_fu_272_p2 & icmp_ln191_2_fu_262_p2);

assign and_ln191_2_fu_290_p2 = (and_ln191_fu_278_p2 & and_ln191_1_fu_284_p2);

assign and_ln191_fu_278_p2 = (icmp_ln191_fu_242_p2 & icmp_ln191_1_fu_252_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((io_acc_block_signal_op153 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_990)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_933 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((io_acc_block_signal_op153 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_990)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_933 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((io_acc_block_signal_op153 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln191_2_reg_990)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_reg_933 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op20 == 1'b0) & (icmp_ln241_reg_933 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((io_acc_block_signal_op153 == 1'b0) & (1'd1 == and_ln191_2_reg_990));
end

always @ (*) begin
    ap_condition_309 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_fu_296_p2 == 1'd1) & (icmp_ln241_reg_933 == 1'd0));
end

always @ (*) begin
    ap_condition_345 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_933 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_746_p2 = ((pool_window_2_V_6_fu_717_p3 < pool_window_3_V_6_fu_725_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_768_p2 = ((select_ln65_12_fu_738_p3 < select_ln65_14_fu_760_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_494_p2 = ((pool_window_2_V_fu_465_p3 < pool_window_3_V_fu_473_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_516_p2 = ((select_ln65_fu_486_p3 < select_ln65_2_fu_508_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_732_p2 = ((pool_window_0_V_6_fu_702_p3 < pool_window_1_V_6_fu_710_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_564_p2 = ((pool_window_0_V_2_fu_534_p3 < pool_window_1_V_2_fu_542_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_578_p2 = ((pool_window_2_V_2_fu_549_p3 < pool_window_3_V_2_fu_557_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_600_p2 = ((select_ln65_4_fu_570_p3 < select_ln65_6_fu_592_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_648_p2 = ((pool_window_0_V_4_fu_618_p3 < pool_window_1_V_4_fu_626_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_662_p2 = ((pool_window_2_V_4_fu_633_p3 < pool_window_3_V_4_fu_641_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_684_p2 = ((select_ln65_8_fu_654_p3 < select_ln65_10_fu_676_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_480_p2 = ((pool_window_0_V_fu_450_p3 < pool_window_1_V_fu_458_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_252_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_262_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_272_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_242_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_296_p2 = ((pX == 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_340_p2 = ((pY == 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_170_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_152_p4 == 7'd64) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op153 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op20 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_2_fu_534_p3 = {{kernel_data_V_3_5}, {2'd0}};

assign pool_window_0_V_4_fu_618_p3 = {{kernel_data_V_3_6}, {2'd0}};

assign pool_window_0_V_6_fu_702_p3 = {{kernel_data_V_3_7}, {2'd0}};

assign pool_window_0_V_fu_450_p3 = {{kernel_data_V_3_4}, {2'd0}};

assign pool_window_1_V_2_fu_542_p3 = {{DataOut_V_5_reg_972}, {2'd0}};

assign pool_window_1_V_4_fu_626_p3 = {{DataOut_V_6_reg_978}, {2'd0}};

assign pool_window_1_V_6_fu_710_p3 = {{DataOut_V_reg_984}, {2'd0}};

assign pool_window_1_V_fu_458_p3 = {{DataOut_V_4_reg_966}, {2'd0}};

assign pool_window_2_V_2_fu_549_p3 = {{kernel_data_V_3_13}, {2'd0}};

assign pool_window_2_V_4_fu_633_p3 = {{kernel_data_V_3_14}, {2'd0}};

assign pool_window_2_V_6_fu_717_p3 = {{kernel_data_V_3_15}, {2'd0}};

assign pool_window_2_V_fu_465_p3 = {{kernel_data_V_3_12}, {2'd0}};

assign pool_window_3_V_2_fu_557_p3 = {{tmp_data_1_V_2_reg_948}, {2'd0}};

assign pool_window_3_V_4_fu_641_p3 = {{tmp_data_2_V_2_reg_954}, {2'd0}};

assign pool_window_3_V_6_fu_725_p3 = {{tmp_data_3_V_2_reg_960}, {2'd0}};

assign pool_window_3_V_fu_473_p3 = {{tmp_data_0_V_2_reg_942}, {2'd0}};

assign res_V_data_0_V_din = {{tmp_21_fu_803_p6}, {4'd0}};

assign res_V_data_1_V_din = {{tmp_22_fu_837_p6}, {4'd0}};

assign res_V_data_2_V_din = {{tmp_23_fu_871_p6}, {4'd0}};

assign res_V_data_3_V_din = {{tmp_24_fu_905_p6}, {4'd0}};

assign select_ln222_fu_364_p3 = ((icmp_ln191_1_fu_252_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_358_p2);

assign select_ln227_fu_320_p3 = ((icmp_ln191_fu_242_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_314_p2);

assign select_ln65_10_fu_676_p3 = ((icmp_ln1496_8_fu_662_p2[0:0] === 1'b1) ? pool_window_3_V_4_fu_641_p3 : pool_window_2_V_4_fu_633_p3);

assign select_ln65_11_fu_526_p3 = ((icmp_ln1496_2_fu_516_p2[0:0] === 1'b1) ? select_ln65_9_fu_500_p3 : zext_ln65_fu_522_p1);

assign select_ln65_12_fu_738_p3 = ((icmp_ln1496_3_fu_732_p2[0:0] === 1'b1) ? pool_window_1_V_6_fu_710_p3 : pool_window_0_V_6_fu_702_p3);

assign select_ln65_13_fu_584_p3 = ((icmp_ln1496_5_fu_578_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_14_fu_760_p3 = ((icmp_ln1496_10_fu_746_p2[0:0] === 1'b1) ? pool_window_3_V_6_fu_725_p3 : pool_window_2_V_6_fu_717_p3);

assign select_ln65_15_fu_610_p3 = ((icmp_ln1496_6_fu_600_p2[0:0] === 1'b1) ? select_ln65_13_fu_584_p3 : zext_ln65_1_fu_606_p1);

assign select_ln65_16_fu_668_p3 = ((icmp_ln1496_8_fu_662_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_17_fu_694_p3 = ((icmp_ln1496_9_fu_684_p2[0:0] === 1'b1) ? select_ln65_16_fu_668_p3 : zext_ln65_2_fu_690_p1);

assign select_ln65_18_fu_752_p3 = ((icmp_ln1496_10_fu_746_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_19_fu_778_p3 = ((icmp_ln1496_11_fu_768_p2[0:0] === 1'b1) ? select_ln65_18_fu_752_p3 : zext_ln65_3_fu_774_p1);

assign select_ln65_2_fu_508_p3 = ((icmp_ln1496_1_fu_494_p2[0:0] === 1'b1) ? pool_window_3_V_fu_473_p3 : pool_window_2_V_fu_465_p3);

assign select_ln65_4_fu_570_p3 = ((icmp_ln1496_4_fu_564_p2[0:0] === 1'b1) ? pool_window_1_V_2_fu_542_p3 : pool_window_0_V_2_fu_534_p3);

assign select_ln65_6_fu_592_p3 = ((icmp_ln1496_5_fu_578_p2[0:0] === 1'b1) ? pool_window_3_V_2_fu_557_p3 : pool_window_2_V_2_fu_549_p3);

assign select_ln65_8_fu_654_p3 = ((icmp_ln1496_7_fu_648_p2[0:0] === 1'b1) ? pool_window_1_V_4_fu_626_p3 : pool_window_0_V_4_fu_618_p3);

assign select_ln65_9_fu_500_p3 = ((icmp_ln1496_1_fu_494_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_fu_486_p3 = ((icmp_ln1496_fu_480_p2[0:0] === 1'b1) ? pool_window_1_V_fu_458_p3 : pool_window_0_V_fu_450_p3);

assign start_out = real_start;

assign tmp_21_fu_803_p1 = pool_window_0_V_reg_1012;

assign tmp_21_fu_803_p2 = pool_window_1_V_reg_1017;

assign tmp_21_fu_803_p3 = pool_window_2_V_reg_1022;

assign tmp_21_fu_803_p4 = pool_window_3_V_reg_1027;

assign tmp_22_fu_837_p1 = pool_window_0_V_2_reg_1037;

assign tmp_22_fu_837_p2 = pool_window_1_V_2_reg_1042;

assign tmp_22_fu_837_p3 = pool_window_2_V_2_reg_1047;

assign tmp_22_fu_837_p4 = pool_window_3_V_2_reg_1052;

assign tmp_23_fu_871_p1 = pool_window_0_V_4_reg_1062;

assign tmp_23_fu_871_p2 = pool_window_1_V_4_reg_1067;

assign tmp_23_fu_871_p3 = pool_window_2_V_4_reg_1072;

assign tmp_23_fu_871_p4 = pool_window_3_V_4_reg_1077;

assign tmp_24_fu_905_p1 = pool_window_0_V_6_reg_1087;

assign tmp_24_fu_905_p2 = pool_window_1_V_6_reg_1092;

assign tmp_24_fu_905_p3 = pool_window_2_V_6_reg_1097;

assign tmp_24_fu_905_p4 = pool_window_3_V_6_reg_1102;

assign zext_ln65_1_fu_606_p1 = icmp_ln1496_4_fu_564_p2;

assign zext_ln65_2_fu_690_p1 = icmp_ln1496_7_fu_648_p2;

assign zext_ln65_3_fu_774_p1 = icmp_ln1496_3_fu_732_p2;

assign zext_ln65_fu_522_p1 = icmp_ln1496_fu_480_p2;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_1012[1:0] <= 2'b00;
    pool_window_1_V_reg_1017[1:0] <= 2'b00;
    pool_window_2_V_reg_1022[1:0] <= 2'b00;
    pool_window_3_V_reg_1027[1:0] <= 2'b00;
    pool_window_0_V_2_reg_1037[1:0] <= 2'b00;
    pool_window_1_V_2_reg_1042[1:0] <= 2'b00;
    pool_window_2_V_2_reg_1047[1:0] <= 2'b00;
    pool_window_3_V_2_reg_1052[1:0] <= 2'b00;
    pool_window_0_V_4_reg_1062[1:0] <= 2'b00;
    pool_window_1_V_4_reg_1067[1:0] <= 2'b00;
    pool_window_2_V_4_reg_1072[1:0] <= 2'b00;
    pool_window_3_V_4_reg_1077[1:0] <= 2'b00;
    pool_window_0_V_6_reg_1087[1:0] <= 2'b00;
    pool_window_1_V_6_reg_1092[1:0] <= 2'b00;
    pool_window_2_V_6_reg_1097[1:0] <= 2'b00;
    pool_window_3_V_6_reg_1102[1:0] <= 2'b00;
end

endmodule //pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s
