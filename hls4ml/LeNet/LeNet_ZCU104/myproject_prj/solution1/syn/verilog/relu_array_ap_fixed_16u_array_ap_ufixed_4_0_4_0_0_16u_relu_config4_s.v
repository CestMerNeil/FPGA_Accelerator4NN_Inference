// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_16u_array_ap_ufixed_4_0_4_0_0_16u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [3:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [3:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [3:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [3:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [3:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [3:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [3:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [3:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [3:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [3:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [3:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [3:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [3:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [3:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [3:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [3:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_2395;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_2395_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] i_0_reg_228;
wire   [0:0] icmp_ln41_fu_239_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op45;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op385;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_2395_pp0_iter1_reg;
wire   [9:0] i_fu_245_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_V_0_reg_2404;
reg   [15:0] tmp_data_V_1_reg_2413;
reg   [15:0] tmp_data_V_2_reg_2422;
reg   [15:0] tmp_data_V_326_reg_2431;
reg   [15:0] tmp_data_V_4_reg_2440;
reg   [15:0] tmp_data_V_5_reg_2449;
reg   [15:0] tmp_data_V_6_reg_2458;
reg   [15:0] tmp_data_V_7_reg_2467;
reg   [15:0] tmp_data_V_8_reg_2476;
reg   [15:0] tmp_data_V_9_reg_2485;
reg   [15:0] tmp_data_V_10_reg_2494;
reg   [15:0] tmp_data_V_11_reg_2503;
reg   [15:0] tmp_data_V_12_reg_2512;
reg   [15:0] tmp_data_V_13_reg_2521;
reg   [15:0] tmp_data_V_14_reg_2530;
reg   [15:0] tmp_data_V_15_reg_2539;
wire   [0:0] icmp_ln718_fu_319_p2;
reg   [0:0] icmp_ln718_reg_2548;
wire   [0:0] icmp_ln879_fu_335_p2;
reg   [0:0] icmp_ln879_reg_2553;
wire   [0:0] icmp_ln768_fu_341_p2;
reg   [0:0] icmp_ln768_reg_2558;
wire   [0:0] icmp_ln718_4_fu_351_p2;
reg   [0:0] icmp_ln718_4_reg_2563;
wire   [0:0] icmp_ln879_4_fu_367_p2;
reg   [0:0] icmp_ln879_4_reg_2568;
wire   [0:0] icmp_ln768_4_fu_373_p2;
reg   [0:0] icmp_ln768_4_reg_2573;
wire   [0:0] icmp_ln718_5_fu_383_p2;
reg   [0:0] icmp_ln718_5_reg_2578;
wire   [0:0] icmp_ln879_5_fu_399_p2;
reg   [0:0] icmp_ln879_5_reg_2583;
wire   [0:0] icmp_ln768_5_fu_405_p2;
reg   [0:0] icmp_ln768_5_reg_2588;
wire   [0:0] icmp_ln718_6_fu_415_p2;
reg   [0:0] icmp_ln718_6_reg_2593;
wire   [0:0] icmp_ln879_6_fu_431_p2;
reg   [0:0] icmp_ln879_6_reg_2598;
wire   [0:0] icmp_ln768_6_fu_437_p2;
reg   [0:0] icmp_ln768_6_reg_2603;
wire   [0:0] icmp_ln718_7_fu_447_p2;
reg   [0:0] icmp_ln718_7_reg_2608;
wire   [0:0] icmp_ln879_7_fu_463_p2;
reg   [0:0] icmp_ln879_7_reg_2613;
wire   [0:0] icmp_ln768_7_fu_469_p2;
reg   [0:0] icmp_ln768_7_reg_2618;
wire   [0:0] icmp_ln718_8_fu_479_p2;
reg   [0:0] icmp_ln718_8_reg_2623;
wire   [0:0] icmp_ln879_8_fu_495_p2;
reg   [0:0] icmp_ln879_8_reg_2628;
wire   [0:0] icmp_ln768_8_fu_501_p2;
reg   [0:0] icmp_ln768_8_reg_2633;
wire   [0:0] icmp_ln718_9_fu_511_p2;
reg   [0:0] icmp_ln718_9_reg_2638;
wire   [0:0] icmp_ln879_9_fu_527_p2;
reg   [0:0] icmp_ln879_9_reg_2643;
wire   [0:0] icmp_ln768_9_fu_533_p2;
reg   [0:0] icmp_ln768_9_reg_2648;
wire   [0:0] icmp_ln718_10_fu_543_p2;
reg   [0:0] icmp_ln718_10_reg_2653;
wire   [0:0] icmp_ln879_10_fu_559_p2;
reg   [0:0] icmp_ln879_10_reg_2658;
wire   [0:0] icmp_ln768_10_fu_565_p2;
reg   [0:0] icmp_ln768_10_reg_2663;
wire   [0:0] icmp_ln718_11_fu_575_p2;
reg   [0:0] icmp_ln718_11_reg_2668;
wire   [0:0] icmp_ln879_11_fu_591_p2;
reg   [0:0] icmp_ln879_11_reg_2673;
wire   [0:0] icmp_ln768_11_fu_597_p2;
reg   [0:0] icmp_ln768_11_reg_2678;
wire   [0:0] icmp_ln718_12_fu_607_p2;
reg   [0:0] icmp_ln718_12_reg_2683;
wire   [0:0] icmp_ln879_12_fu_623_p2;
reg   [0:0] icmp_ln879_12_reg_2688;
wire   [0:0] icmp_ln768_12_fu_629_p2;
reg   [0:0] icmp_ln768_12_reg_2693;
wire   [0:0] icmp_ln718_13_fu_639_p2;
reg   [0:0] icmp_ln718_13_reg_2698;
wire   [0:0] icmp_ln879_13_fu_655_p2;
reg   [0:0] icmp_ln879_13_reg_2703;
wire   [0:0] icmp_ln768_13_fu_661_p2;
reg   [0:0] icmp_ln768_13_reg_2708;
wire   [0:0] icmp_ln718_14_fu_671_p2;
reg   [0:0] icmp_ln718_14_reg_2713;
wire   [0:0] icmp_ln879_14_fu_687_p2;
reg   [0:0] icmp_ln879_14_reg_2718;
wire   [0:0] icmp_ln768_14_fu_693_p2;
reg   [0:0] icmp_ln768_14_reg_2723;
wire   [0:0] icmp_ln718_15_fu_703_p2;
reg   [0:0] icmp_ln718_15_reg_2728;
wire   [0:0] icmp_ln879_15_fu_719_p2;
reg   [0:0] icmp_ln879_15_reg_2733;
wire   [0:0] icmp_ln768_15_fu_725_p2;
reg   [0:0] icmp_ln768_15_reg_2738;
wire   [0:0] icmp_ln718_16_fu_735_p2;
reg   [0:0] icmp_ln718_16_reg_2743;
wire   [0:0] icmp_ln879_16_fu_751_p2;
reg   [0:0] icmp_ln879_16_reg_2748;
wire   [0:0] icmp_ln768_16_fu_757_p2;
reg   [0:0] icmp_ln768_16_reg_2753;
wire   [0:0] icmp_ln718_17_fu_767_p2;
reg   [0:0] icmp_ln718_17_reg_2758;
wire   [0:0] icmp_ln879_17_fu_783_p2;
reg   [0:0] icmp_ln879_17_reg_2763;
wire   [0:0] icmp_ln768_17_fu_789_p2;
reg   [0:0] icmp_ln768_17_reg_2768;
wire   [0:0] icmp_ln718_18_fu_799_p2;
reg   [0:0] icmp_ln718_18_reg_2773;
wire   [0:0] icmp_ln879_18_fu_815_p2;
reg   [0:0] icmp_ln879_18_reg_2778;
wire   [0:0] icmp_ln768_18_fu_821_p2;
reg   [0:0] icmp_ln768_18_reg_2783;
wire   [3:0] tmp_data_0_V_fu_917_p3;
reg   [3:0] tmp_data_0_V_reg_2788;
wire   [3:0] tmp_data_1_V_fu_1015_p3;
reg   [3:0] tmp_data_1_V_reg_2793;
wire   [3:0] tmp_data_2_V_fu_1113_p3;
reg   [3:0] tmp_data_2_V_reg_2798;
wire   [3:0] tmp_data_3_V_fu_1211_p3;
reg   [3:0] tmp_data_3_V_reg_2803;
wire   [3:0] tmp_data_4_V_fu_1309_p3;
reg   [3:0] tmp_data_4_V_reg_2808;
wire   [3:0] tmp_data_5_V_fu_1407_p3;
reg   [3:0] tmp_data_5_V_reg_2813;
wire   [3:0] tmp_data_6_V_fu_1505_p3;
reg   [3:0] tmp_data_6_V_reg_2818;
wire   [3:0] tmp_data_7_V_fu_1603_p3;
reg   [3:0] tmp_data_7_V_reg_2823;
wire   [3:0] tmp_data_8_V_fu_1701_p3;
reg   [3:0] tmp_data_8_V_reg_2828;
wire   [3:0] tmp_data_9_V_fu_1799_p3;
reg   [3:0] tmp_data_9_V_reg_2833;
wire   [3:0] tmp_data_10_V_fu_1897_p3;
reg   [3:0] tmp_data_10_V_reg_2838;
wire   [3:0] tmp_data_11_V_fu_1995_p3;
reg   [3:0] tmp_data_11_V_reg_2843;
wire   [3:0] tmp_data_12_V_fu_2093_p3;
reg   [3:0] tmp_data_12_V_reg_2848;
wire   [3:0] tmp_data_13_V_fu_2191_p3;
reg   [3:0] tmp_data_13_V_reg_2853;
wire   [3:0] tmp_data_14_V_fu_2289_p3;
reg   [3:0] tmp_data_14_V_reg_2858;
wire   [3:0] tmp_data_15_V_fu_2387_p3;
reg   [3:0] tmp_data_15_V_reg_2863;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln718_fu_315_p1;
wire   [5:0] p_Result_s_fu_325_p4;
wire   [4:0] trunc_ln718_4_fu_347_p1;
wire   [5:0] p_Result_16_1_fu_357_p4;
wire   [4:0] trunc_ln718_5_fu_379_p1;
wire   [5:0] p_Result_16_2_fu_389_p4;
wire   [4:0] trunc_ln718_6_fu_411_p1;
wire   [5:0] p_Result_16_3_fu_421_p4;
wire   [4:0] trunc_ln718_7_fu_443_p1;
wire   [5:0] p_Result_16_4_fu_453_p4;
wire   [4:0] trunc_ln718_8_fu_475_p1;
wire   [5:0] p_Result_16_5_fu_485_p4;
wire   [4:0] trunc_ln718_9_fu_507_p1;
wire   [5:0] p_Result_16_6_fu_517_p4;
wire   [4:0] trunc_ln718_10_fu_539_p1;
wire   [5:0] p_Result_16_7_fu_549_p4;
wire   [4:0] trunc_ln718_11_fu_571_p1;
wire   [5:0] p_Result_16_8_fu_581_p4;
wire   [4:0] trunc_ln718_12_fu_603_p1;
wire   [5:0] p_Result_16_9_fu_613_p4;
wire   [4:0] trunc_ln718_13_fu_635_p1;
wire   [5:0] p_Result_16_s_fu_645_p4;
wire   [4:0] trunc_ln718_14_fu_667_p1;
wire   [5:0] p_Result_16_10_fu_677_p4;
wire   [4:0] trunc_ln718_15_fu_699_p1;
wire   [5:0] p_Result_16_11_fu_709_p4;
wire   [4:0] trunc_ln718_16_fu_731_p1;
wire   [5:0] p_Result_16_12_fu_741_p4;
wire   [4:0] trunc_ln718_17_fu_763_p1;
wire   [5:0] p_Result_16_13_fu_773_p4;
wire   [4:0] trunc_ln718_18_fu_795_p1;
wire   [5:0] p_Result_16_14_fu_805_p4;
wire   [0:0] tmp_62_fu_841_p3;
wire   [0:0] or_ln412_fu_855_p2;
wire   [0:0] tmp_64_fu_860_p3;
wire   [0:0] and_ln415_fu_867_p2;
wire   [3:0] zext_ln415_fu_873_p1;
wire   [3:0] trunc_ln_fu_832_p4;
wire   [3:0] add_ln415_fu_877_p2;
wire   [0:0] tmp_65_fu_883_p3;
wire   [0:0] tmp_63_fu_848_p3;
wire   [0:0] xor_ln416_fu_891_p2;
wire   [0:0] and_ln416_fu_897_p2;
wire   [0:0] select_ln777_fu_903_p3;
wire   [0:0] icmp_ln1494_fu_827_p2;
wire   [3:0] select_ln340_fu_909_p3;
wire   [0:0] tmp_66_fu_939_p3;
wire   [0:0] or_ln412_4_fu_953_p2;
wire   [0:0] tmp_68_fu_958_p3;
wire   [0:0] and_ln415_1_fu_965_p2;
wire   [3:0] zext_ln415_4_fu_971_p1;
wire   [3:0] trunc_ln708_s_fu_930_p4;
wire   [3:0] add_ln415_4_fu_975_p2;
wire   [0:0] tmp_69_fu_981_p3;
wire   [0:0] tmp_67_fu_946_p3;
wire   [0:0] xor_ln416_4_fu_989_p2;
wire   [0:0] and_ln416_4_fu_995_p2;
wire   [0:0] select_ln777_4_fu_1001_p3;
wire   [0:0] icmp_ln1494_1_fu_925_p2;
wire   [3:0] select_ln340_1_fu_1007_p3;
wire   [0:0] tmp_70_fu_1037_p3;
wire   [0:0] or_ln412_5_fu_1051_p2;
wire   [0:0] tmp_72_fu_1056_p3;
wire   [0:0] and_ln415_2_fu_1063_p2;
wire   [3:0] zext_ln415_5_fu_1069_p1;
wire   [3:0] trunc_ln708_3_fu_1028_p4;
wire   [3:0] add_ln415_5_fu_1073_p2;
wire   [0:0] tmp_73_fu_1079_p3;
wire   [0:0] tmp_71_fu_1044_p3;
wire   [0:0] xor_ln416_5_fu_1087_p2;
wire   [0:0] and_ln416_5_fu_1093_p2;
wire   [0:0] select_ln777_5_fu_1099_p3;
wire   [0:0] icmp_ln1494_2_fu_1023_p2;
wire   [3:0] select_ln340_2_fu_1105_p3;
wire   [0:0] tmp_74_fu_1135_p3;
wire   [0:0] or_ln412_6_fu_1149_p2;
wire   [0:0] tmp_76_fu_1154_p3;
wire   [0:0] and_ln415_3_fu_1161_p2;
wire   [3:0] zext_ln415_6_fu_1167_p1;
wire   [3:0] trunc_ln708_4_fu_1126_p4;
wire   [3:0] add_ln415_6_fu_1171_p2;
wire   [0:0] tmp_77_fu_1177_p3;
wire   [0:0] tmp_75_fu_1142_p3;
wire   [0:0] xor_ln416_6_fu_1185_p2;
wire   [0:0] and_ln416_6_fu_1191_p2;
wire   [0:0] select_ln777_6_fu_1197_p3;
wire   [0:0] icmp_ln1494_3_fu_1121_p2;
wire   [3:0] select_ln340_3_fu_1203_p3;
wire   [0:0] tmp_78_fu_1233_p3;
wire   [0:0] or_ln412_7_fu_1247_p2;
wire   [0:0] tmp_80_fu_1252_p3;
wire   [0:0] and_ln415_4_fu_1259_p2;
wire   [3:0] zext_ln415_7_fu_1265_p1;
wire   [3:0] trunc_ln708_5_fu_1224_p4;
wire   [3:0] add_ln415_7_fu_1269_p2;
wire   [0:0] tmp_81_fu_1275_p3;
wire   [0:0] tmp_79_fu_1240_p3;
wire   [0:0] xor_ln416_7_fu_1283_p2;
wire   [0:0] and_ln416_7_fu_1289_p2;
wire   [0:0] select_ln777_7_fu_1295_p3;
wire   [0:0] icmp_ln1494_4_fu_1219_p2;
wire   [3:0] select_ln340_4_fu_1301_p3;
wire   [0:0] tmp_82_fu_1331_p3;
wire   [0:0] or_ln412_8_fu_1345_p2;
wire   [0:0] tmp_84_fu_1350_p3;
wire   [0:0] and_ln415_5_fu_1357_p2;
wire   [3:0] zext_ln415_8_fu_1363_p1;
wire   [3:0] trunc_ln708_6_fu_1322_p4;
wire   [3:0] add_ln415_8_fu_1367_p2;
wire   [0:0] tmp_85_fu_1373_p3;
wire   [0:0] tmp_83_fu_1338_p3;
wire   [0:0] xor_ln416_8_fu_1381_p2;
wire   [0:0] and_ln416_8_fu_1387_p2;
wire   [0:0] select_ln777_8_fu_1393_p3;
wire   [0:0] icmp_ln1494_5_fu_1317_p2;
wire   [3:0] select_ln340_5_fu_1399_p3;
wire   [0:0] tmp_86_fu_1429_p3;
wire   [0:0] or_ln412_9_fu_1443_p2;
wire   [0:0] tmp_88_fu_1448_p3;
wire   [0:0] and_ln415_6_fu_1455_p2;
wire   [3:0] zext_ln415_9_fu_1461_p1;
wire   [3:0] trunc_ln708_7_fu_1420_p4;
wire   [3:0] add_ln415_9_fu_1465_p2;
wire   [0:0] tmp_89_fu_1471_p3;
wire   [0:0] tmp_87_fu_1436_p3;
wire   [0:0] xor_ln416_9_fu_1479_p2;
wire   [0:0] and_ln416_9_fu_1485_p2;
wire   [0:0] select_ln777_9_fu_1491_p3;
wire   [0:0] icmp_ln1494_6_fu_1415_p2;
wire   [3:0] select_ln340_6_fu_1497_p3;
wire   [0:0] tmp_90_fu_1527_p3;
wire   [0:0] or_ln412_10_fu_1541_p2;
wire   [0:0] tmp_92_fu_1546_p3;
wire   [0:0] and_ln415_7_fu_1553_p2;
wire   [3:0] zext_ln415_10_fu_1559_p1;
wire   [3:0] trunc_ln708_8_fu_1518_p4;
wire   [3:0] add_ln415_10_fu_1563_p2;
wire   [0:0] tmp_93_fu_1569_p3;
wire   [0:0] tmp_91_fu_1534_p3;
wire   [0:0] xor_ln416_10_fu_1577_p2;
wire   [0:0] and_ln416_10_fu_1583_p2;
wire   [0:0] select_ln777_10_fu_1589_p3;
wire   [0:0] icmp_ln1494_7_fu_1513_p2;
wire   [3:0] select_ln340_7_fu_1595_p3;
wire   [0:0] tmp_94_fu_1625_p3;
wire   [0:0] or_ln412_11_fu_1639_p2;
wire   [0:0] tmp_96_fu_1644_p3;
wire   [0:0] and_ln415_8_fu_1651_p2;
wire   [3:0] zext_ln415_11_fu_1657_p1;
wire   [3:0] trunc_ln708_9_fu_1616_p4;
wire   [3:0] add_ln415_11_fu_1661_p2;
wire   [0:0] tmp_97_fu_1667_p3;
wire   [0:0] tmp_95_fu_1632_p3;
wire   [0:0] xor_ln416_11_fu_1675_p2;
wire   [0:0] and_ln416_11_fu_1681_p2;
wire   [0:0] select_ln777_11_fu_1687_p3;
wire   [0:0] icmp_ln1494_8_fu_1611_p2;
wire   [3:0] select_ln340_8_fu_1693_p3;
wire   [0:0] tmp_98_fu_1723_p3;
wire   [0:0] or_ln412_12_fu_1737_p2;
wire   [0:0] tmp_100_fu_1742_p3;
wire   [0:0] and_ln415_9_fu_1749_p2;
wire   [3:0] zext_ln415_12_fu_1755_p1;
wire   [3:0] trunc_ln708_1_fu_1714_p4;
wire   [3:0] add_ln415_12_fu_1759_p2;
wire   [0:0] tmp_101_fu_1765_p3;
wire   [0:0] tmp_99_fu_1730_p3;
wire   [0:0] xor_ln416_12_fu_1773_p2;
wire   [0:0] and_ln416_12_fu_1779_p2;
wire   [0:0] select_ln777_12_fu_1785_p3;
wire   [0:0] icmp_ln1494_9_fu_1709_p2;
wire   [3:0] select_ln340_9_fu_1791_p3;
wire   [0:0] tmp_102_fu_1821_p3;
wire   [0:0] or_ln412_13_fu_1835_p2;
wire   [0:0] tmp_104_fu_1840_p3;
wire   [0:0] and_ln415_10_fu_1847_p2;
wire   [3:0] zext_ln415_13_fu_1853_p1;
wire   [3:0] trunc_ln708_2_fu_1812_p4;
wire   [3:0] add_ln415_13_fu_1857_p2;
wire   [0:0] tmp_105_fu_1863_p3;
wire   [0:0] tmp_103_fu_1828_p3;
wire   [0:0] xor_ln416_13_fu_1871_p2;
wire   [0:0] and_ln416_13_fu_1877_p2;
wire   [0:0] select_ln777_13_fu_1883_p3;
wire   [0:0] icmp_ln1494_10_fu_1807_p2;
wire   [3:0] select_ln340_10_fu_1889_p3;
wire   [0:0] tmp_106_fu_1919_p3;
wire   [0:0] or_ln412_14_fu_1933_p2;
wire   [0:0] tmp_108_fu_1938_p3;
wire   [0:0] and_ln415_11_fu_1945_p2;
wire   [3:0] zext_ln415_14_fu_1951_p1;
wire   [3:0] trunc_ln708_10_fu_1910_p4;
wire   [3:0] add_ln415_14_fu_1955_p2;
wire   [0:0] tmp_109_fu_1961_p3;
wire   [0:0] tmp_107_fu_1926_p3;
wire   [0:0] xor_ln416_14_fu_1969_p2;
wire   [0:0] and_ln416_14_fu_1975_p2;
wire   [0:0] select_ln777_14_fu_1981_p3;
wire   [0:0] icmp_ln1494_11_fu_1905_p2;
wire   [3:0] select_ln340_11_fu_1987_p3;
wire   [0:0] tmp_110_fu_2017_p3;
wire   [0:0] or_ln412_15_fu_2031_p2;
wire   [0:0] tmp_112_fu_2036_p3;
wire   [0:0] and_ln415_12_fu_2043_p2;
wire   [3:0] zext_ln415_15_fu_2049_p1;
wire   [3:0] trunc_ln708_11_fu_2008_p4;
wire   [3:0] add_ln415_15_fu_2053_p2;
wire   [0:0] tmp_113_fu_2059_p3;
wire   [0:0] tmp_111_fu_2024_p3;
wire   [0:0] xor_ln416_15_fu_2067_p2;
wire   [0:0] and_ln416_15_fu_2073_p2;
wire   [0:0] select_ln777_15_fu_2079_p3;
wire   [0:0] icmp_ln1494_12_fu_2003_p2;
wire   [3:0] select_ln340_12_fu_2085_p3;
wire   [0:0] tmp_114_fu_2115_p3;
wire   [0:0] or_ln412_16_fu_2129_p2;
wire   [0:0] tmp_116_fu_2134_p3;
wire   [0:0] and_ln415_13_fu_2141_p2;
wire   [3:0] zext_ln415_16_fu_2147_p1;
wire   [3:0] trunc_ln708_12_fu_2106_p4;
wire   [3:0] add_ln415_16_fu_2151_p2;
wire   [0:0] tmp_117_fu_2157_p3;
wire   [0:0] tmp_115_fu_2122_p3;
wire   [0:0] xor_ln416_16_fu_2165_p2;
wire   [0:0] and_ln416_16_fu_2171_p2;
wire   [0:0] select_ln777_16_fu_2177_p3;
wire   [0:0] icmp_ln1494_13_fu_2101_p2;
wire   [3:0] select_ln340_13_fu_2183_p3;
wire   [0:0] tmp_118_fu_2213_p3;
wire   [0:0] or_ln412_17_fu_2227_p2;
wire   [0:0] tmp_120_fu_2232_p3;
wire   [0:0] and_ln415_14_fu_2239_p2;
wire   [3:0] zext_ln415_17_fu_2245_p1;
wire   [3:0] trunc_ln708_13_fu_2204_p4;
wire   [3:0] add_ln415_17_fu_2249_p2;
wire   [0:0] tmp_121_fu_2255_p3;
wire   [0:0] tmp_119_fu_2220_p3;
wire   [0:0] xor_ln416_17_fu_2263_p2;
wire   [0:0] and_ln416_17_fu_2269_p2;
wire   [0:0] select_ln777_17_fu_2275_p3;
wire   [0:0] icmp_ln1494_14_fu_2199_p2;
wire   [3:0] select_ln340_14_fu_2281_p3;
wire   [0:0] tmp_122_fu_2311_p3;
wire   [0:0] or_ln412_18_fu_2325_p2;
wire   [0:0] tmp_124_fu_2330_p3;
wire   [0:0] and_ln415_15_fu_2337_p2;
wire   [3:0] zext_ln415_18_fu_2343_p1;
wire   [3:0] trunc_ln708_14_fu_2302_p4;
wire   [3:0] add_ln415_18_fu_2347_p2;
wire   [0:0] tmp_125_fu_2353_p3;
wire   [0:0] tmp_123_fu_2318_p3;
wire   [0:0] xor_ln416_18_fu_2361_p2;
wire   [0:0] and_ln416_18_fu_2367_p2;
wire   [0:0] select_ln777_18_fu_2373_p3;
wire   [0:0] icmp_ln1494_15_fu_2297_p2;
wire   [3:0] select_ln340_15_fu_2379_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_fu_239_p2 == 1'd0))) begin
        i_0_reg_228 <= i_fu_245_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_228 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln41_reg_2395 <= icmp_ln41_fu_239_p2;
        icmp_ln41_reg_2395_pp0_iter1_reg <= icmp_ln41_reg_2395;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_2395_pp0_iter2_reg <= icmp_ln41_reg_2395_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        icmp_ln718_10_reg_2653 <= icmp_ln718_10_fu_543_p2;
        icmp_ln718_11_reg_2668 <= icmp_ln718_11_fu_575_p2;
        icmp_ln718_12_reg_2683 <= icmp_ln718_12_fu_607_p2;
        icmp_ln718_13_reg_2698 <= icmp_ln718_13_fu_639_p2;
        icmp_ln718_14_reg_2713 <= icmp_ln718_14_fu_671_p2;
        icmp_ln718_15_reg_2728 <= icmp_ln718_15_fu_703_p2;
        icmp_ln718_16_reg_2743 <= icmp_ln718_16_fu_735_p2;
        icmp_ln718_17_reg_2758 <= icmp_ln718_17_fu_767_p2;
        icmp_ln718_18_reg_2773 <= icmp_ln718_18_fu_799_p2;
        icmp_ln718_4_reg_2563 <= icmp_ln718_4_fu_351_p2;
        icmp_ln718_5_reg_2578 <= icmp_ln718_5_fu_383_p2;
        icmp_ln718_6_reg_2593 <= icmp_ln718_6_fu_415_p2;
        icmp_ln718_7_reg_2608 <= icmp_ln718_7_fu_447_p2;
        icmp_ln718_8_reg_2623 <= icmp_ln718_8_fu_479_p2;
        icmp_ln718_9_reg_2638 <= icmp_ln718_9_fu_511_p2;
        icmp_ln718_reg_2548 <= icmp_ln718_fu_319_p2;
        icmp_ln768_10_reg_2663 <= icmp_ln768_10_fu_565_p2;
        icmp_ln768_11_reg_2678 <= icmp_ln768_11_fu_597_p2;
        icmp_ln768_12_reg_2693 <= icmp_ln768_12_fu_629_p2;
        icmp_ln768_13_reg_2708 <= icmp_ln768_13_fu_661_p2;
        icmp_ln768_14_reg_2723 <= icmp_ln768_14_fu_693_p2;
        icmp_ln768_15_reg_2738 <= icmp_ln768_15_fu_725_p2;
        icmp_ln768_16_reg_2753 <= icmp_ln768_16_fu_757_p2;
        icmp_ln768_17_reg_2768 <= icmp_ln768_17_fu_789_p2;
        icmp_ln768_18_reg_2783 <= icmp_ln768_18_fu_821_p2;
        icmp_ln768_4_reg_2573 <= icmp_ln768_4_fu_373_p2;
        icmp_ln768_5_reg_2588 <= icmp_ln768_5_fu_405_p2;
        icmp_ln768_6_reg_2603 <= icmp_ln768_6_fu_437_p2;
        icmp_ln768_7_reg_2618 <= icmp_ln768_7_fu_469_p2;
        icmp_ln768_8_reg_2633 <= icmp_ln768_8_fu_501_p2;
        icmp_ln768_9_reg_2648 <= icmp_ln768_9_fu_533_p2;
        icmp_ln768_reg_2558 <= icmp_ln768_fu_341_p2;
        icmp_ln879_10_reg_2658 <= icmp_ln879_10_fu_559_p2;
        icmp_ln879_11_reg_2673 <= icmp_ln879_11_fu_591_p2;
        icmp_ln879_12_reg_2688 <= icmp_ln879_12_fu_623_p2;
        icmp_ln879_13_reg_2703 <= icmp_ln879_13_fu_655_p2;
        icmp_ln879_14_reg_2718 <= icmp_ln879_14_fu_687_p2;
        icmp_ln879_15_reg_2733 <= icmp_ln879_15_fu_719_p2;
        icmp_ln879_16_reg_2748 <= icmp_ln879_16_fu_751_p2;
        icmp_ln879_17_reg_2763 <= icmp_ln879_17_fu_783_p2;
        icmp_ln879_18_reg_2778 <= icmp_ln879_18_fu_815_p2;
        icmp_ln879_4_reg_2568 <= icmp_ln879_4_fu_367_p2;
        icmp_ln879_5_reg_2583 <= icmp_ln879_5_fu_399_p2;
        icmp_ln879_6_reg_2598 <= icmp_ln879_6_fu_431_p2;
        icmp_ln879_7_reg_2613 <= icmp_ln879_7_fu_463_p2;
        icmp_ln879_8_reg_2628 <= icmp_ln879_8_fu_495_p2;
        icmp_ln879_9_reg_2643 <= icmp_ln879_9_fu_527_p2;
        icmp_ln879_reg_2553 <= icmp_ln879_fu_335_p2;
        tmp_data_V_0_reg_2404 <= data_V_data_0_V_dout;
        tmp_data_V_10_reg_2494 <= data_V_data_10_V_dout;
        tmp_data_V_11_reg_2503 <= data_V_data_11_V_dout;
        tmp_data_V_12_reg_2512 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_2521 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_2530 <= data_V_data_14_V_dout;
        tmp_data_V_15_reg_2539 <= data_V_data_15_V_dout;
        tmp_data_V_1_reg_2413 <= data_V_data_1_V_dout;
        tmp_data_V_2_reg_2422 <= data_V_data_2_V_dout;
        tmp_data_V_326_reg_2431 <= data_V_data_3_V_dout;
        tmp_data_V_4_reg_2440 <= data_V_data_4_V_dout;
        tmp_data_V_5_reg_2449 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_2458 <= data_V_data_6_V_dout;
        tmp_data_V_7_reg_2467 <= data_V_data_7_V_dout;
        tmp_data_V_8_reg_2476 <= data_V_data_8_V_dout;
        tmp_data_V_9_reg_2485 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_2395_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_2788 <= tmp_data_0_V_fu_917_p3;
        tmp_data_10_V_reg_2838 <= tmp_data_10_V_fu_1897_p3;
        tmp_data_11_V_reg_2843 <= tmp_data_11_V_fu_1995_p3;
        tmp_data_12_V_reg_2848 <= tmp_data_12_V_fu_2093_p3;
        tmp_data_13_V_reg_2853 <= tmp_data_13_V_fu_2191_p3;
        tmp_data_14_V_reg_2858 <= tmp_data_14_V_fu_2289_p3;
        tmp_data_15_V_reg_2863 <= tmp_data_15_V_fu_2387_p3;
        tmp_data_1_V_reg_2793 <= tmp_data_1_V_fu_1015_p3;
        tmp_data_2_V_reg_2798 <= tmp_data_2_V_fu_1113_p3;
        tmp_data_3_V_reg_2803 <= tmp_data_3_V_fu_1211_p3;
        tmp_data_4_V_reg_2808 <= tmp_data_4_V_fu_1309_p3;
        tmp_data_5_V_reg_2813 <= tmp_data_5_V_fu_1407_p3;
        tmp_data_6_V_reg_2818 <= tmp_data_6_V_fu_1505_p3;
        tmp_data_7_V_reg_2823 <= tmp_data_7_V_fu_1603_p3;
        tmp_data_8_V_reg_2828 <= tmp_data_8_V_fu_1701_p3;
        tmp_data_9_V_reg_2833 <= tmp_data_9_V_fu_1799_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_239_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2395 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_1563_p2 = (zext_ln415_10_fu_1559_p1 + trunc_ln708_8_fu_1518_p4);

assign add_ln415_11_fu_1661_p2 = (zext_ln415_11_fu_1657_p1 + trunc_ln708_9_fu_1616_p4);

assign add_ln415_12_fu_1759_p2 = (zext_ln415_12_fu_1755_p1 + trunc_ln708_1_fu_1714_p4);

assign add_ln415_13_fu_1857_p2 = (zext_ln415_13_fu_1853_p1 + trunc_ln708_2_fu_1812_p4);

assign add_ln415_14_fu_1955_p2 = (zext_ln415_14_fu_1951_p1 + trunc_ln708_10_fu_1910_p4);

assign add_ln415_15_fu_2053_p2 = (zext_ln415_15_fu_2049_p1 + trunc_ln708_11_fu_2008_p4);

assign add_ln415_16_fu_2151_p2 = (zext_ln415_16_fu_2147_p1 + trunc_ln708_12_fu_2106_p4);

assign add_ln415_17_fu_2249_p2 = (zext_ln415_17_fu_2245_p1 + trunc_ln708_13_fu_2204_p4);

assign add_ln415_18_fu_2347_p2 = (zext_ln415_18_fu_2343_p1 + trunc_ln708_14_fu_2302_p4);

assign add_ln415_4_fu_975_p2 = (zext_ln415_4_fu_971_p1 + trunc_ln708_s_fu_930_p4);

assign add_ln415_5_fu_1073_p2 = (zext_ln415_5_fu_1069_p1 + trunc_ln708_3_fu_1028_p4);

assign add_ln415_6_fu_1171_p2 = (zext_ln415_6_fu_1167_p1 + trunc_ln708_4_fu_1126_p4);

assign add_ln415_7_fu_1269_p2 = (zext_ln415_7_fu_1265_p1 + trunc_ln708_5_fu_1224_p4);

assign add_ln415_8_fu_1367_p2 = (zext_ln415_8_fu_1363_p1 + trunc_ln708_6_fu_1322_p4);

assign add_ln415_9_fu_1465_p2 = (zext_ln415_9_fu_1461_p1 + trunc_ln708_7_fu_1420_p4);

assign add_ln415_fu_877_p2 = (zext_ln415_fu_873_p1 + trunc_ln_fu_832_p4);

assign and_ln415_10_fu_1847_p2 = (tmp_104_fu_1840_p3 & or_ln412_13_fu_1835_p2);

assign and_ln415_11_fu_1945_p2 = (tmp_108_fu_1938_p3 & or_ln412_14_fu_1933_p2);

assign and_ln415_12_fu_2043_p2 = (tmp_112_fu_2036_p3 & or_ln412_15_fu_2031_p2);

assign and_ln415_13_fu_2141_p2 = (tmp_116_fu_2134_p3 & or_ln412_16_fu_2129_p2);

assign and_ln415_14_fu_2239_p2 = (tmp_120_fu_2232_p3 & or_ln412_17_fu_2227_p2);

assign and_ln415_15_fu_2337_p2 = (tmp_124_fu_2330_p3 & or_ln412_18_fu_2325_p2);

assign and_ln415_1_fu_965_p2 = (tmp_68_fu_958_p3 & or_ln412_4_fu_953_p2);

assign and_ln415_2_fu_1063_p2 = (tmp_72_fu_1056_p3 & or_ln412_5_fu_1051_p2);

assign and_ln415_3_fu_1161_p2 = (tmp_76_fu_1154_p3 & or_ln412_6_fu_1149_p2);

assign and_ln415_4_fu_1259_p2 = (tmp_80_fu_1252_p3 & or_ln412_7_fu_1247_p2);

assign and_ln415_5_fu_1357_p2 = (tmp_84_fu_1350_p3 & or_ln412_8_fu_1345_p2);

assign and_ln415_6_fu_1455_p2 = (tmp_88_fu_1448_p3 & or_ln412_9_fu_1443_p2);

assign and_ln415_7_fu_1553_p2 = (tmp_92_fu_1546_p3 & or_ln412_10_fu_1541_p2);

assign and_ln415_8_fu_1651_p2 = (tmp_96_fu_1644_p3 & or_ln412_11_fu_1639_p2);

assign and_ln415_9_fu_1749_p2 = (tmp_100_fu_1742_p3 & or_ln412_12_fu_1737_p2);

assign and_ln415_fu_867_p2 = (tmp_64_fu_860_p3 & or_ln412_fu_855_p2);

assign and_ln416_10_fu_1583_p2 = (xor_ln416_10_fu_1577_p2 & tmp_91_fu_1534_p3);

assign and_ln416_11_fu_1681_p2 = (xor_ln416_11_fu_1675_p2 & tmp_95_fu_1632_p3);

assign and_ln416_12_fu_1779_p2 = (xor_ln416_12_fu_1773_p2 & tmp_99_fu_1730_p3);

assign and_ln416_13_fu_1877_p2 = (xor_ln416_13_fu_1871_p2 & tmp_103_fu_1828_p3);

assign and_ln416_14_fu_1975_p2 = (xor_ln416_14_fu_1969_p2 & tmp_107_fu_1926_p3);

assign and_ln416_15_fu_2073_p2 = (xor_ln416_15_fu_2067_p2 & tmp_111_fu_2024_p3);

assign and_ln416_16_fu_2171_p2 = (xor_ln416_16_fu_2165_p2 & tmp_115_fu_2122_p3);

assign and_ln416_17_fu_2269_p2 = (xor_ln416_17_fu_2263_p2 & tmp_119_fu_2220_p3);

assign and_ln416_18_fu_2367_p2 = (xor_ln416_18_fu_2361_p2 & tmp_123_fu_2318_p3);

assign and_ln416_4_fu_995_p2 = (xor_ln416_4_fu_989_p2 & tmp_67_fu_946_p3);

assign and_ln416_5_fu_1093_p2 = (xor_ln416_5_fu_1087_p2 & tmp_71_fu_1044_p3);

assign and_ln416_6_fu_1191_p2 = (xor_ln416_6_fu_1185_p2 & tmp_75_fu_1142_p3);

assign and_ln416_7_fu_1289_p2 = (xor_ln416_7_fu_1283_p2 & tmp_79_fu_1240_p3);

assign and_ln416_8_fu_1387_p2 = (xor_ln416_8_fu_1381_p2 & tmp_83_fu_1338_p3);

assign and_ln416_9_fu_1485_p2 = (xor_ln416_9_fu_1479_p2 & tmp_87_fu_1436_p3);

assign and_ln416_fu_897_p2 = (xor_ln416_fu_891_p2 & tmp_63_fu_848_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op385 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op45 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2395 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op385 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op45 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2395 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op385 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op45 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2395 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op45 == 1'b0) & (icmp_ln41_reg_2395 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op385 == 1'b0) & (icmp_ln41_reg_2395_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_245_p2 = (i_0_reg_228 + 10'd1);

assign icmp_ln1494_10_fu_1807_p2 = (($signed(tmp_data_V_10_reg_2494) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_1905_p2 = (($signed(tmp_data_V_11_reg_2503) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_2003_p2 = (($signed(tmp_data_V_12_reg_2512) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2101_p2 = (($signed(tmp_data_V_13_reg_2521) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2199_p2 = (($signed(tmp_data_V_14_reg_2530) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2297_p2 = (($signed(tmp_data_V_15_reg_2539) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_925_p2 = (($signed(tmp_data_V_1_reg_2413) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1023_p2 = (($signed(tmp_data_V_2_reg_2422) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1121_p2 = (($signed(tmp_data_V_326_reg_2431) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1219_p2 = (($signed(tmp_data_V_4_reg_2440) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1317_p2 = (($signed(tmp_data_V_5_reg_2449) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1415_p2 = (($signed(tmp_data_V_6_reg_2458) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1513_p2 = (($signed(tmp_data_V_7_reg_2467) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1611_p2 = (($signed(tmp_data_V_8_reg_2476) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1709_p2 = (($signed(tmp_data_V_9_reg_2485) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_827_p2 = (($signed(tmp_data_V_0_reg_2404) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_239_p2 = ((i_0_reg_228 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln718_10_fu_543_p2 = ((trunc_ln718_10_fu_539_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_11_fu_575_p2 = ((trunc_ln718_11_fu_571_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_12_fu_607_p2 = ((trunc_ln718_12_fu_603_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_13_fu_639_p2 = ((trunc_ln718_13_fu_635_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_14_fu_671_p2 = ((trunc_ln718_14_fu_667_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_15_fu_703_p2 = ((trunc_ln718_15_fu_699_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_16_fu_735_p2 = ((trunc_ln718_16_fu_731_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_17_fu_767_p2 = ((trunc_ln718_17_fu_763_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_18_fu_799_p2 = ((trunc_ln718_18_fu_795_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_4_fu_351_p2 = ((trunc_ln718_4_fu_347_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_5_fu_383_p2 = ((trunc_ln718_5_fu_379_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_6_fu_415_p2 = ((trunc_ln718_6_fu_411_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_7_fu_447_p2 = ((trunc_ln718_7_fu_443_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_8_fu_479_p2 = ((trunc_ln718_8_fu_475_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_9_fu_511_p2 = ((trunc_ln718_9_fu_507_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_319_p2 = ((trunc_ln718_fu_315_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_10_fu_565_p2 = ((p_Result_16_7_fu_549_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_11_fu_597_p2 = ((p_Result_16_8_fu_581_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_12_fu_629_p2 = ((p_Result_16_9_fu_613_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_13_fu_661_p2 = ((p_Result_16_s_fu_645_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_14_fu_693_p2 = ((p_Result_16_10_fu_677_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_15_fu_725_p2 = ((p_Result_16_11_fu_709_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_16_fu_757_p2 = ((p_Result_16_12_fu_741_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_17_fu_789_p2 = ((p_Result_16_13_fu_773_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_18_fu_821_p2 = ((p_Result_16_14_fu_805_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_373_p2 = ((p_Result_16_1_fu_357_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_5_fu_405_p2 = ((p_Result_16_2_fu_389_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_6_fu_437_p2 = ((p_Result_16_3_fu_421_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_7_fu_469_p2 = ((p_Result_16_4_fu_453_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_8_fu_501_p2 = ((p_Result_16_5_fu_485_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_9_fu_533_p2 = ((p_Result_16_6_fu_517_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_341_p2 = ((p_Result_s_fu_325_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_10_fu_559_p2 = ((p_Result_16_7_fu_549_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_11_fu_591_p2 = ((p_Result_16_8_fu_581_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_12_fu_623_p2 = ((p_Result_16_9_fu_613_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_13_fu_655_p2 = ((p_Result_16_s_fu_645_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_14_fu_687_p2 = ((p_Result_16_10_fu_677_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_15_fu_719_p2 = ((p_Result_16_11_fu_709_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_16_fu_751_p2 = ((p_Result_16_12_fu_741_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_17_fu_783_p2 = ((p_Result_16_13_fu_773_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_18_fu_815_p2 = ((p_Result_16_14_fu_805_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_367_p2 = ((p_Result_16_1_fu_357_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_399_p2 = ((p_Result_16_2_fu_389_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_431_p2 = ((p_Result_16_3_fu_421_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_463_p2 = ((p_Result_16_4_fu_453_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_495_p2 = ((p_Result_16_5_fu_485_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_527_p2 = ((p_Result_16_6_fu_517_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_335_p2 = ((p_Result_s_fu_325_p4 == 6'd63) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op385 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op45 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_10_fu_1541_p2 = (tmp_90_fu_1527_p3 | icmp_ln718_10_reg_2653);

assign or_ln412_11_fu_1639_p2 = (tmp_94_fu_1625_p3 | icmp_ln718_11_reg_2668);

assign or_ln412_12_fu_1737_p2 = (tmp_98_fu_1723_p3 | icmp_ln718_12_reg_2683);

assign or_ln412_13_fu_1835_p2 = (tmp_102_fu_1821_p3 | icmp_ln718_13_reg_2698);

assign or_ln412_14_fu_1933_p2 = (tmp_106_fu_1919_p3 | icmp_ln718_14_reg_2713);

assign or_ln412_15_fu_2031_p2 = (tmp_110_fu_2017_p3 | icmp_ln718_15_reg_2728);

assign or_ln412_16_fu_2129_p2 = (tmp_114_fu_2115_p3 | icmp_ln718_16_reg_2743);

assign or_ln412_17_fu_2227_p2 = (tmp_118_fu_2213_p3 | icmp_ln718_17_reg_2758);

assign or_ln412_18_fu_2325_p2 = (tmp_122_fu_2311_p3 | icmp_ln718_18_reg_2773);

assign or_ln412_4_fu_953_p2 = (tmp_66_fu_939_p3 | icmp_ln718_4_reg_2563);

assign or_ln412_5_fu_1051_p2 = (tmp_70_fu_1037_p3 | icmp_ln718_5_reg_2578);

assign or_ln412_6_fu_1149_p2 = (tmp_74_fu_1135_p3 | icmp_ln718_6_reg_2593);

assign or_ln412_7_fu_1247_p2 = (tmp_78_fu_1233_p3 | icmp_ln718_7_reg_2608);

assign or_ln412_8_fu_1345_p2 = (tmp_82_fu_1331_p3 | icmp_ln718_8_reg_2623);

assign or_ln412_9_fu_1443_p2 = (tmp_86_fu_1429_p3 | icmp_ln718_9_reg_2638);

assign or_ln412_fu_855_p2 = (tmp_62_fu_841_p3 | icmp_ln718_reg_2548);

assign p_Result_16_10_fu_677_p4 = {{data_V_data_11_V_dout[15:10]}};

assign p_Result_16_11_fu_709_p4 = {{data_V_data_12_V_dout[15:10]}};

assign p_Result_16_12_fu_741_p4 = {{data_V_data_13_V_dout[15:10]}};

assign p_Result_16_13_fu_773_p4 = {{data_V_data_14_V_dout[15:10]}};

assign p_Result_16_14_fu_805_p4 = {{data_V_data_15_V_dout[15:10]}};

assign p_Result_16_1_fu_357_p4 = {{data_V_data_1_V_dout[15:10]}};

assign p_Result_16_2_fu_389_p4 = {{data_V_data_2_V_dout[15:10]}};

assign p_Result_16_3_fu_421_p4 = {{data_V_data_3_V_dout[15:10]}};

assign p_Result_16_4_fu_453_p4 = {{data_V_data_4_V_dout[15:10]}};

assign p_Result_16_5_fu_485_p4 = {{data_V_data_5_V_dout[15:10]}};

assign p_Result_16_6_fu_517_p4 = {{data_V_data_6_V_dout[15:10]}};

assign p_Result_16_7_fu_549_p4 = {{data_V_data_7_V_dout[15:10]}};

assign p_Result_16_8_fu_581_p4 = {{data_V_data_8_V_dout[15:10]}};

assign p_Result_16_9_fu_613_p4 = {{data_V_data_9_V_dout[15:10]}};

assign p_Result_16_s_fu_645_p4 = {{data_V_data_10_V_dout[15:10]}};

assign p_Result_s_fu_325_p4 = {{data_V_data_0_V_dout[15:10]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_2788;

assign res_V_data_10_V_din = tmp_data_10_V_reg_2838;

assign res_V_data_11_V_din = tmp_data_11_V_reg_2843;

assign res_V_data_12_V_din = tmp_data_12_V_reg_2848;

assign res_V_data_13_V_din = tmp_data_13_V_reg_2853;

assign res_V_data_14_V_din = tmp_data_14_V_reg_2858;

assign res_V_data_15_V_din = tmp_data_15_V_reg_2863;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2793;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2798;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2803;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2808;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2813;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2818;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2823;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2828;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2833;

assign select_ln340_10_fu_1889_p3 = ((select_ln777_13_fu_1883_p3[0:0] === 1'b1) ? add_ln415_13_fu_1857_p2 : 4'd15);

assign select_ln340_11_fu_1987_p3 = ((select_ln777_14_fu_1981_p3[0:0] === 1'b1) ? add_ln415_14_fu_1955_p2 : 4'd15);

assign select_ln340_12_fu_2085_p3 = ((select_ln777_15_fu_2079_p3[0:0] === 1'b1) ? add_ln415_15_fu_2053_p2 : 4'd15);

assign select_ln340_13_fu_2183_p3 = ((select_ln777_16_fu_2177_p3[0:0] === 1'b1) ? add_ln415_16_fu_2151_p2 : 4'd15);

assign select_ln340_14_fu_2281_p3 = ((select_ln777_17_fu_2275_p3[0:0] === 1'b1) ? add_ln415_17_fu_2249_p2 : 4'd15);

assign select_ln340_15_fu_2379_p3 = ((select_ln777_18_fu_2373_p3[0:0] === 1'b1) ? add_ln415_18_fu_2347_p2 : 4'd15);

assign select_ln340_1_fu_1007_p3 = ((select_ln777_4_fu_1001_p3[0:0] === 1'b1) ? add_ln415_4_fu_975_p2 : 4'd15);

assign select_ln340_2_fu_1105_p3 = ((select_ln777_5_fu_1099_p3[0:0] === 1'b1) ? add_ln415_5_fu_1073_p2 : 4'd15);

assign select_ln340_3_fu_1203_p3 = ((select_ln777_6_fu_1197_p3[0:0] === 1'b1) ? add_ln415_6_fu_1171_p2 : 4'd15);

assign select_ln340_4_fu_1301_p3 = ((select_ln777_7_fu_1295_p3[0:0] === 1'b1) ? add_ln415_7_fu_1269_p2 : 4'd15);

assign select_ln340_5_fu_1399_p3 = ((select_ln777_8_fu_1393_p3[0:0] === 1'b1) ? add_ln415_8_fu_1367_p2 : 4'd15);

assign select_ln340_6_fu_1497_p3 = ((select_ln777_9_fu_1491_p3[0:0] === 1'b1) ? add_ln415_9_fu_1465_p2 : 4'd15);

assign select_ln340_7_fu_1595_p3 = ((select_ln777_10_fu_1589_p3[0:0] === 1'b1) ? add_ln415_10_fu_1563_p2 : 4'd15);

assign select_ln340_8_fu_1693_p3 = ((select_ln777_11_fu_1687_p3[0:0] === 1'b1) ? add_ln415_11_fu_1661_p2 : 4'd15);

assign select_ln340_9_fu_1791_p3 = ((select_ln777_12_fu_1785_p3[0:0] === 1'b1) ? add_ln415_12_fu_1759_p2 : 4'd15);

assign select_ln340_fu_909_p3 = ((select_ln777_fu_903_p3[0:0] === 1'b1) ? add_ln415_fu_877_p2 : 4'd15);

assign select_ln777_10_fu_1589_p3 = ((and_ln416_10_fu_1583_p2[0:0] === 1'b1) ? icmp_ln879_10_reg_2658 : icmp_ln768_10_reg_2663);

assign select_ln777_11_fu_1687_p3 = ((and_ln416_11_fu_1681_p2[0:0] === 1'b1) ? icmp_ln879_11_reg_2673 : icmp_ln768_11_reg_2678);

assign select_ln777_12_fu_1785_p3 = ((and_ln416_12_fu_1779_p2[0:0] === 1'b1) ? icmp_ln879_12_reg_2688 : icmp_ln768_12_reg_2693);

assign select_ln777_13_fu_1883_p3 = ((and_ln416_13_fu_1877_p2[0:0] === 1'b1) ? icmp_ln879_13_reg_2703 : icmp_ln768_13_reg_2708);

assign select_ln777_14_fu_1981_p3 = ((and_ln416_14_fu_1975_p2[0:0] === 1'b1) ? icmp_ln879_14_reg_2718 : icmp_ln768_14_reg_2723);

assign select_ln777_15_fu_2079_p3 = ((and_ln416_15_fu_2073_p2[0:0] === 1'b1) ? icmp_ln879_15_reg_2733 : icmp_ln768_15_reg_2738);

assign select_ln777_16_fu_2177_p3 = ((and_ln416_16_fu_2171_p2[0:0] === 1'b1) ? icmp_ln879_16_reg_2748 : icmp_ln768_16_reg_2753);

assign select_ln777_17_fu_2275_p3 = ((and_ln416_17_fu_2269_p2[0:0] === 1'b1) ? icmp_ln879_17_reg_2763 : icmp_ln768_17_reg_2768);

assign select_ln777_18_fu_2373_p3 = ((and_ln416_18_fu_2367_p2[0:0] === 1'b1) ? icmp_ln879_18_reg_2778 : icmp_ln768_18_reg_2783);

assign select_ln777_4_fu_1001_p3 = ((and_ln416_4_fu_995_p2[0:0] === 1'b1) ? icmp_ln879_4_reg_2568 : icmp_ln768_4_reg_2573);

assign select_ln777_5_fu_1099_p3 = ((and_ln416_5_fu_1093_p2[0:0] === 1'b1) ? icmp_ln879_5_reg_2583 : icmp_ln768_5_reg_2588);

assign select_ln777_6_fu_1197_p3 = ((and_ln416_6_fu_1191_p2[0:0] === 1'b1) ? icmp_ln879_6_reg_2598 : icmp_ln768_6_reg_2603);

assign select_ln777_7_fu_1295_p3 = ((and_ln416_7_fu_1289_p2[0:0] === 1'b1) ? icmp_ln879_7_reg_2613 : icmp_ln768_7_reg_2618);

assign select_ln777_8_fu_1393_p3 = ((and_ln416_8_fu_1387_p2[0:0] === 1'b1) ? icmp_ln879_8_reg_2628 : icmp_ln768_8_reg_2633);

assign select_ln777_9_fu_1491_p3 = ((and_ln416_9_fu_1485_p2[0:0] === 1'b1) ? icmp_ln879_9_reg_2643 : icmp_ln768_9_reg_2648);

assign select_ln777_fu_903_p3 = ((and_ln416_fu_897_p2[0:0] === 1'b1) ? icmp_ln879_reg_2553 : icmp_ln768_reg_2558);

assign start_out = real_start;

assign tmp_100_fu_1742_p3 = tmp_data_V_9_reg_2485[32'd5];

assign tmp_101_fu_1765_p3 = add_ln415_12_fu_1759_p2[32'd3];

assign tmp_102_fu_1821_p3 = tmp_data_V_10_reg_2494[32'd6];

assign tmp_103_fu_1828_p3 = tmp_data_V_10_reg_2494[32'd9];

assign tmp_104_fu_1840_p3 = tmp_data_V_10_reg_2494[32'd5];

assign tmp_105_fu_1863_p3 = add_ln415_13_fu_1857_p2[32'd3];

assign tmp_106_fu_1919_p3 = tmp_data_V_11_reg_2503[32'd6];

assign tmp_107_fu_1926_p3 = tmp_data_V_11_reg_2503[32'd9];

assign tmp_108_fu_1938_p3 = tmp_data_V_11_reg_2503[32'd5];

assign tmp_109_fu_1961_p3 = add_ln415_14_fu_1955_p2[32'd3];

assign tmp_110_fu_2017_p3 = tmp_data_V_12_reg_2512[32'd6];

assign tmp_111_fu_2024_p3 = tmp_data_V_12_reg_2512[32'd9];

assign tmp_112_fu_2036_p3 = tmp_data_V_12_reg_2512[32'd5];

assign tmp_113_fu_2059_p3 = add_ln415_15_fu_2053_p2[32'd3];

assign tmp_114_fu_2115_p3 = tmp_data_V_13_reg_2521[32'd6];

assign tmp_115_fu_2122_p3 = tmp_data_V_13_reg_2521[32'd9];

assign tmp_116_fu_2134_p3 = tmp_data_V_13_reg_2521[32'd5];

assign tmp_117_fu_2157_p3 = add_ln415_16_fu_2151_p2[32'd3];

assign tmp_118_fu_2213_p3 = tmp_data_V_14_reg_2530[32'd6];

assign tmp_119_fu_2220_p3 = tmp_data_V_14_reg_2530[32'd9];

assign tmp_120_fu_2232_p3 = tmp_data_V_14_reg_2530[32'd5];

assign tmp_121_fu_2255_p3 = add_ln415_17_fu_2249_p2[32'd3];

assign tmp_122_fu_2311_p3 = tmp_data_V_15_reg_2539[32'd6];

assign tmp_123_fu_2318_p3 = tmp_data_V_15_reg_2539[32'd9];

assign tmp_124_fu_2330_p3 = tmp_data_V_15_reg_2539[32'd5];

assign tmp_125_fu_2353_p3 = add_ln415_18_fu_2347_p2[32'd3];

assign tmp_62_fu_841_p3 = tmp_data_V_0_reg_2404[32'd6];

assign tmp_63_fu_848_p3 = tmp_data_V_0_reg_2404[32'd9];

assign tmp_64_fu_860_p3 = tmp_data_V_0_reg_2404[32'd5];

assign tmp_65_fu_883_p3 = add_ln415_fu_877_p2[32'd3];

assign tmp_66_fu_939_p3 = tmp_data_V_1_reg_2413[32'd6];

assign tmp_67_fu_946_p3 = tmp_data_V_1_reg_2413[32'd9];

assign tmp_68_fu_958_p3 = tmp_data_V_1_reg_2413[32'd5];

assign tmp_69_fu_981_p3 = add_ln415_4_fu_975_p2[32'd3];

assign tmp_70_fu_1037_p3 = tmp_data_V_2_reg_2422[32'd6];

assign tmp_71_fu_1044_p3 = tmp_data_V_2_reg_2422[32'd9];

assign tmp_72_fu_1056_p3 = tmp_data_V_2_reg_2422[32'd5];

assign tmp_73_fu_1079_p3 = add_ln415_5_fu_1073_p2[32'd3];

assign tmp_74_fu_1135_p3 = tmp_data_V_326_reg_2431[32'd6];

assign tmp_75_fu_1142_p3 = tmp_data_V_326_reg_2431[32'd9];

assign tmp_76_fu_1154_p3 = tmp_data_V_326_reg_2431[32'd5];

assign tmp_77_fu_1177_p3 = add_ln415_6_fu_1171_p2[32'd3];

assign tmp_78_fu_1233_p3 = tmp_data_V_4_reg_2440[32'd6];

assign tmp_79_fu_1240_p3 = tmp_data_V_4_reg_2440[32'd9];

assign tmp_80_fu_1252_p3 = tmp_data_V_4_reg_2440[32'd5];

assign tmp_81_fu_1275_p3 = add_ln415_7_fu_1269_p2[32'd3];

assign tmp_82_fu_1331_p3 = tmp_data_V_5_reg_2449[32'd6];

assign tmp_83_fu_1338_p3 = tmp_data_V_5_reg_2449[32'd9];

assign tmp_84_fu_1350_p3 = tmp_data_V_5_reg_2449[32'd5];

assign tmp_85_fu_1373_p3 = add_ln415_8_fu_1367_p2[32'd3];

assign tmp_86_fu_1429_p3 = tmp_data_V_6_reg_2458[32'd6];

assign tmp_87_fu_1436_p3 = tmp_data_V_6_reg_2458[32'd9];

assign tmp_88_fu_1448_p3 = tmp_data_V_6_reg_2458[32'd5];

assign tmp_89_fu_1471_p3 = add_ln415_9_fu_1465_p2[32'd3];

assign tmp_90_fu_1527_p3 = tmp_data_V_7_reg_2467[32'd6];

assign tmp_91_fu_1534_p3 = tmp_data_V_7_reg_2467[32'd9];

assign tmp_92_fu_1546_p3 = tmp_data_V_7_reg_2467[32'd5];

assign tmp_93_fu_1569_p3 = add_ln415_10_fu_1563_p2[32'd3];

assign tmp_94_fu_1625_p3 = tmp_data_V_8_reg_2476[32'd6];

assign tmp_95_fu_1632_p3 = tmp_data_V_8_reg_2476[32'd9];

assign tmp_96_fu_1644_p3 = tmp_data_V_8_reg_2476[32'd5];

assign tmp_97_fu_1667_p3 = add_ln415_11_fu_1661_p2[32'd3];

assign tmp_98_fu_1723_p3 = tmp_data_V_9_reg_2485[32'd6];

assign tmp_99_fu_1730_p3 = tmp_data_V_9_reg_2485[32'd9];

assign tmp_data_0_V_fu_917_p3 = ((icmp_ln1494_fu_827_p2[0:0] === 1'b1) ? select_ln340_fu_909_p3 : 4'd0);

assign tmp_data_10_V_fu_1897_p3 = ((icmp_ln1494_10_fu_1807_p2[0:0] === 1'b1) ? select_ln340_10_fu_1889_p3 : 4'd0);

assign tmp_data_11_V_fu_1995_p3 = ((icmp_ln1494_11_fu_1905_p2[0:0] === 1'b1) ? select_ln340_11_fu_1987_p3 : 4'd0);

assign tmp_data_12_V_fu_2093_p3 = ((icmp_ln1494_12_fu_2003_p2[0:0] === 1'b1) ? select_ln340_12_fu_2085_p3 : 4'd0);

assign tmp_data_13_V_fu_2191_p3 = ((icmp_ln1494_13_fu_2101_p2[0:0] === 1'b1) ? select_ln340_13_fu_2183_p3 : 4'd0);

assign tmp_data_14_V_fu_2289_p3 = ((icmp_ln1494_14_fu_2199_p2[0:0] === 1'b1) ? select_ln340_14_fu_2281_p3 : 4'd0);

assign tmp_data_15_V_fu_2387_p3 = ((icmp_ln1494_15_fu_2297_p2[0:0] === 1'b1) ? select_ln340_15_fu_2379_p3 : 4'd0);

assign tmp_data_1_V_fu_1015_p3 = ((icmp_ln1494_1_fu_925_p2[0:0] === 1'b1) ? select_ln340_1_fu_1007_p3 : 4'd0);

assign tmp_data_2_V_fu_1113_p3 = ((icmp_ln1494_2_fu_1023_p2[0:0] === 1'b1) ? select_ln340_2_fu_1105_p3 : 4'd0);

assign tmp_data_3_V_fu_1211_p3 = ((icmp_ln1494_3_fu_1121_p2[0:0] === 1'b1) ? select_ln340_3_fu_1203_p3 : 4'd0);

assign tmp_data_4_V_fu_1309_p3 = ((icmp_ln1494_4_fu_1219_p2[0:0] === 1'b1) ? select_ln340_4_fu_1301_p3 : 4'd0);

assign tmp_data_5_V_fu_1407_p3 = ((icmp_ln1494_5_fu_1317_p2[0:0] === 1'b1) ? select_ln340_5_fu_1399_p3 : 4'd0);

assign tmp_data_6_V_fu_1505_p3 = ((icmp_ln1494_6_fu_1415_p2[0:0] === 1'b1) ? select_ln340_6_fu_1497_p3 : 4'd0);

assign tmp_data_7_V_fu_1603_p3 = ((icmp_ln1494_7_fu_1513_p2[0:0] === 1'b1) ? select_ln340_7_fu_1595_p3 : 4'd0);

assign tmp_data_8_V_fu_1701_p3 = ((icmp_ln1494_8_fu_1611_p2[0:0] === 1'b1) ? select_ln340_8_fu_1693_p3 : 4'd0);

assign tmp_data_9_V_fu_1799_p3 = ((icmp_ln1494_9_fu_1709_p2[0:0] === 1'b1) ? select_ln340_9_fu_1791_p3 : 4'd0);

assign trunc_ln708_10_fu_1910_p4 = {{tmp_data_V_11_reg_2503[9:6]}};

assign trunc_ln708_11_fu_2008_p4 = {{tmp_data_V_12_reg_2512[9:6]}};

assign trunc_ln708_12_fu_2106_p4 = {{tmp_data_V_13_reg_2521[9:6]}};

assign trunc_ln708_13_fu_2204_p4 = {{tmp_data_V_14_reg_2530[9:6]}};

assign trunc_ln708_14_fu_2302_p4 = {{tmp_data_V_15_reg_2539[9:6]}};

assign trunc_ln708_1_fu_1714_p4 = {{tmp_data_V_9_reg_2485[9:6]}};

assign trunc_ln708_2_fu_1812_p4 = {{tmp_data_V_10_reg_2494[9:6]}};

assign trunc_ln708_3_fu_1028_p4 = {{tmp_data_V_2_reg_2422[9:6]}};

assign trunc_ln708_4_fu_1126_p4 = {{tmp_data_V_326_reg_2431[9:6]}};

assign trunc_ln708_5_fu_1224_p4 = {{tmp_data_V_4_reg_2440[9:6]}};

assign trunc_ln708_6_fu_1322_p4 = {{tmp_data_V_5_reg_2449[9:6]}};

assign trunc_ln708_7_fu_1420_p4 = {{tmp_data_V_6_reg_2458[9:6]}};

assign trunc_ln708_8_fu_1518_p4 = {{tmp_data_V_7_reg_2467[9:6]}};

assign trunc_ln708_9_fu_1616_p4 = {{tmp_data_V_8_reg_2476[9:6]}};

assign trunc_ln708_s_fu_930_p4 = {{tmp_data_V_1_reg_2413[9:6]}};

assign trunc_ln718_10_fu_539_p1 = data_V_data_7_V_dout[4:0];

assign trunc_ln718_11_fu_571_p1 = data_V_data_8_V_dout[4:0];

assign trunc_ln718_12_fu_603_p1 = data_V_data_9_V_dout[4:0];

assign trunc_ln718_13_fu_635_p1 = data_V_data_10_V_dout[4:0];

assign trunc_ln718_14_fu_667_p1 = data_V_data_11_V_dout[4:0];

assign trunc_ln718_15_fu_699_p1 = data_V_data_12_V_dout[4:0];

assign trunc_ln718_16_fu_731_p1 = data_V_data_13_V_dout[4:0];

assign trunc_ln718_17_fu_763_p1 = data_V_data_14_V_dout[4:0];

assign trunc_ln718_18_fu_795_p1 = data_V_data_15_V_dout[4:0];

assign trunc_ln718_4_fu_347_p1 = data_V_data_1_V_dout[4:0];

assign trunc_ln718_5_fu_379_p1 = data_V_data_2_V_dout[4:0];

assign trunc_ln718_6_fu_411_p1 = data_V_data_3_V_dout[4:0];

assign trunc_ln718_7_fu_443_p1 = data_V_data_4_V_dout[4:0];

assign trunc_ln718_8_fu_475_p1 = data_V_data_5_V_dout[4:0];

assign trunc_ln718_9_fu_507_p1 = data_V_data_6_V_dout[4:0];

assign trunc_ln718_fu_315_p1 = data_V_data_0_V_dout[4:0];

assign trunc_ln_fu_832_p4 = {{tmp_data_V_0_reg_2404[9:6]}};

assign xor_ln416_10_fu_1577_p2 = (tmp_93_fu_1569_p3 ^ 1'd1);

assign xor_ln416_11_fu_1675_p2 = (tmp_97_fu_1667_p3 ^ 1'd1);

assign xor_ln416_12_fu_1773_p2 = (tmp_101_fu_1765_p3 ^ 1'd1);

assign xor_ln416_13_fu_1871_p2 = (tmp_105_fu_1863_p3 ^ 1'd1);

assign xor_ln416_14_fu_1969_p2 = (tmp_109_fu_1961_p3 ^ 1'd1);

assign xor_ln416_15_fu_2067_p2 = (tmp_113_fu_2059_p3 ^ 1'd1);

assign xor_ln416_16_fu_2165_p2 = (tmp_117_fu_2157_p3 ^ 1'd1);

assign xor_ln416_17_fu_2263_p2 = (tmp_121_fu_2255_p3 ^ 1'd1);

assign xor_ln416_18_fu_2361_p2 = (tmp_125_fu_2353_p3 ^ 1'd1);

assign xor_ln416_4_fu_989_p2 = (tmp_69_fu_981_p3 ^ 1'd1);

assign xor_ln416_5_fu_1087_p2 = (tmp_73_fu_1079_p3 ^ 1'd1);

assign xor_ln416_6_fu_1185_p2 = (tmp_77_fu_1177_p3 ^ 1'd1);

assign xor_ln416_7_fu_1283_p2 = (tmp_81_fu_1275_p3 ^ 1'd1);

assign xor_ln416_8_fu_1381_p2 = (tmp_85_fu_1373_p3 ^ 1'd1);

assign xor_ln416_9_fu_1479_p2 = (tmp_89_fu_1471_p3 ^ 1'd1);

assign xor_ln416_fu_891_p2 = (tmp_65_fu_883_p3 ^ 1'd1);

assign zext_ln415_10_fu_1559_p1 = and_ln415_7_fu_1553_p2;

assign zext_ln415_11_fu_1657_p1 = and_ln415_8_fu_1651_p2;

assign zext_ln415_12_fu_1755_p1 = and_ln415_9_fu_1749_p2;

assign zext_ln415_13_fu_1853_p1 = and_ln415_10_fu_1847_p2;

assign zext_ln415_14_fu_1951_p1 = and_ln415_11_fu_1945_p2;

assign zext_ln415_15_fu_2049_p1 = and_ln415_12_fu_2043_p2;

assign zext_ln415_16_fu_2147_p1 = and_ln415_13_fu_2141_p2;

assign zext_ln415_17_fu_2245_p1 = and_ln415_14_fu_2239_p2;

assign zext_ln415_18_fu_2343_p1 = and_ln415_15_fu_2337_p2;

assign zext_ln415_4_fu_971_p1 = and_ln415_1_fu_965_p2;

assign zext_ln415_5_fu_1069_p1 = and_ln415_2_fu_1063_p2;

assign zext_ln415_6_fu_1167_p1 = and_ln415_3_fu_1161_p2;

assign zext_ln415_7_fu_1265_p1 = and_ln415_4_fu_1259_p2;

assign zext_ln415_8_fu_1363_p1 = and_ln415_5_fu_1357_p2;

assign zext_ln415_9_fu_1461_p1 = and_ln415_6_fu_1455_p2;

assign zext_ln415_fu_873_p1 = and_ln415_fu_867_p2;

endmodule //relu_array_ap_fixed_16u_array_ap_ufixed_4_0_4_0_0_16u_relu_config4_s
