// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [3:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [3:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [3:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [3:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [3:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [3:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [3:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [3:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [3:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [3:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [3:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [3:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [3:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [3:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [3:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [3:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [3:0] kernel_data_V_2_16;
reg   [3:0] kernel_data_V_2_17;
reg   [3:0] kernel_data_V_2_18;
reg   [3:0] kernel_data_V_2_19;
reg   [3:0] kernel_data_V_2_20;
reg   [3:0] kernel_data_V_2_21;
reg   [3:0] kernel_data_V_2_22;
reg   [3:0] kernel_data_V_2_23;
reg   [3:0] kernel_data_V_2_24;
reg   [3:0] kernel_data_V_2_25;
reg   [3:0] kernel_data_V_2_26;
reg   [3:0] kernel_data_V_2_27;
reg   [3:0] kernel_data_V_2_28;
reg   [3:0] kernel_data_V_2_29;
reg   [3:0] kernel_data_V_2_30;
reg   [3:0] kernel_data_V_2_31;
reg   [3:0] kernel_data_V_2_48;
reg   [3:0] kernel_data_V_2_49;
reg   [3:0] kernel_data_V_2_50;
reg   [3:0] kernel_data_V_2_51;
reg   [3:0] kernel_data_V_2_52;
reg   [3:0] kernel_data_V_2_53;
reg   [3:0] kernel_data_V_2_54;
reg   [3:0] kernel_data_V_2_55;
reg   [3:0] kernel_data_V_2_56;
reg   [3:0] kernel_data_V_2_57;
reg   [3:0] kernel_data_V_2_58;
reg   [3:0] kernel_data_V_2_59;
reg   [3:0] kernel_data_V_2_60;
reg   [3:0] kernel_data_V_2_61;
reg   [3:0] kernel_data_V_2_62;
reg   [3:0] kernel_data_V_2_63;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [3:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [3:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [3:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [3:0] line_buffer_Array_V_2_0_3_q0;
reg    line_buffer_Array_V_2_0_4_ce0;
reg    line_buffer_Array_V_2_0_4_we0;
wire   [3:0] line_buffer_Array_V_2_0_4_q0;
reg    line_buffer_Array_V_2_0_5_ce0;
reg    line_buffer_Array_V_2_0_5_we0;
wire   [3:0] line_buffer_Array_V_2_0_5_q0;
reg    line_buffer_Array_V_2_0_6_ce0;
reg    line_buffer_Array_V_2_0_6_we0;
wire   [3:0] line_buffer_Array_V_2_0_6_q0;
reg    line_buffer_Array_V_2_0_7_ce0;
reg    line_buffer_Array_V_2_0_7_we0;
wire   [3:0] line_buffer_Array_V_2_0_7_q0;
reg    line_buffer_Array_V_2_0_8_ce0;
reg    line_buffer_Array_V_2_0_8_we0;
wire   [3:0] line_buffer_Array_V_2_0_8_q0;
reg    line_buffer_Array_V_2_0_9_ce0;
reg    line_buffer_Array_V_2_0_9_we0;
wire   [3:0] line_buffer_Array_V_2_0_9_q0;
reg    line_buffer_Array_V_2_0_10_ce0;
reg    line_buffer_Array_V_2_0_10_we0;
wire   [3:0] line_buffer_Array_V_2_0_10_q0;
reg    line_buffer_Array_V_2_0_11_ce0;
reg    line_buffer_Array_V_2_0_11_we0;
wire   [3:0] line_buffer_Array_V_2_0_11_q0;
reg    line_buffer_Array_V_2_0_12_ce0;
reg    line_buffer_Array_V_2_0_12_we0;
wire   [3:0] line_buffer_Array_V_2_0_12_q0;
reg    line_buffer_Array_V_2_0_13_ce0;
reg    line_buffer_Array_V_2_0_13_we0;
wire   [3:0] line_buffer_Array_V_2_0_13_q0;
reg    line_buffer_Array_V_2_0_14_ce0;
reg    line_buffer_Array_V_2_0_14_we0;
wire   [3:0] line_buffer_Array_V_2_0_14_q0;
reg    line_buffer_Array_V_2_0_15_ce0;
reg    line_buffer_Array_V_2_0_15_we0;
wire   [3:0] line_buffer_Array_V_2_0_15_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_2937;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln191_4_reg_2946;
reg   [0:0] and_ln191_4_reg_2946_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] indvar_flatten_reg_352;
wire   [0:0] icmp_ln241_fu_374_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln241_fu_380_p2;
reg   [9:0] add_ln241_reg_2941;
wire   [0:0] and_ln191_4_fu_438_p2;
wire   [0:0] icmp_ln212_fu_444_p2;
reg   [0:0] icmp_ln212_reg_2950;
wire   [31:0] select_ln227_fu_468_p3;
reg   [31:0] select_ln227_reg_2954;
wire   [0:0] icmp_ln216_fu_488_p2;
reg   [0:0] icmp_ln216_reg_2959;
wire   [31:0] select_ln222_fu_512_p3;
reg   [31:0] select_ln222_reg_2963;
reg   [3:0] shift_buffer_1_0_V_reg_2968;
wire    io_acc_block_signal_op75;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op470;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] shift_buffer_1_1_V_reg_2974;
reg   [3:0] shift_buffer_1_2_V_reg_2980;
reg   [3:0] shift_buffer_1_3_V_reg_2986;
reg   [3:0] shift_buffer_1_4_V_reg_2992;
reg   [3:0] shift_buffer_1_5_V_reg_2998;
reg   [3:0] shift_buffer_1_6_V_reg_3004;
reg   [3:0] shift_buffer_1_7_V_reg_3010;
reg   [3:0] shift_buffer_1_8_V_reg_3016;
reg   [3:0] shift_buffer_1_9_V_reg_3022;
reg   [3:0] shift_buffer_1_10_V_reg_3028;
reg   [3:0] shift_buffer_1_11_V_reg_3034;
reg   [3:0] shift_buffer_1_12_V_reg_3040;
reg   [3:0] shift_buffer_1_13_V_reg_3046;
reg   [3:0] shift_buffer_1_14_V_reg_3052;
reg   [3:0] shift_buffer_1_15_V_reg_3058;
reg   [3:0] DataOut_V_22_reg_3064;
reg   [3:0] DataOut_V_23_reg_3070;
reg   [3:0] DataOut_V_24_reg_3076;
reg   [3:0] DataOut_V_25_reg_3082;
reg   [3:0] DataOut_V_26_reg_3088;
reg   [3:0] DataOut_V_27_reg_3094;
reg   [3:0] DataOut_V_28_reg_3100;
reg   [3:0] DataOut_V_29_reg_3106;
reg   [3:0] DataOut_V_30_reg_3112;
reg   [3:0] DataOut_V_31_reg_3118;
reg   [3:0] DataOut_V_32_reg_3124;
reg   [3:0] DataOut_V_33_reg_3130;
reg   [3:0] DataOut_V_34_reg_3136;
reg   [3:0] DataOut_V_35_reg_3142;
reg   [3:0] DataOut_V_36_reg_3148;
reg   [3:0] DataOut_V_reg_3154;
wire   [5:0] pool_window_0_V_fu_1043_p3;
reg   [5:0] pool_window_0_V_reg_3160;
wire   [5:0] pool_window_1_V_fu_1051_p3;
reg   [5:0] pool_window_1_V_reg_3165;
wire   [5:0] pool_window_2_V_fu_1058_p3;
reg   [5:0] pool_window_2_V_reg_3170;
wire   [5:0] pool_window_3_V_fu_1066_p3;
reg   [5:0] pool_window_3_V_reg_3175;
wire   [1:0] select_ln65_22_fu_1119_p3;
reg   [1:0] select_ln65_22_reg_3180;
wire   [5:0] pool_window_0_V_9_fu_1127_p3;
reg   [5:0] pool_window_0_V_9_reg_3185;
wire   [5:0] pool_window_1_V_9_fu_1135_p3;
reg   [5:0] pool_window_1_V_9_reg_3190;
wire   [5:0] pool_window_2_V_9_fu_1142_p3;
reg   [5:0] pool_window_2_V_9_reg_3195;
wire   [5:0] pool_window_3_V_9_fu_1150_p3;
reg   [5:0] pool_window_3_V_9_reg_3200;
wire   [1:0] select_ln65_26_fu_1203_p3;
reg   [1:0] select_ln65_26_reg_3205;
wire   [5:0] pool_window_0_V_11_fu_1211_p3;
reg   [5:0] pool_window_0_V_11_reg_3210;
wire   [5:0] pool_window_1_V_11_fu_1219_p3;
reg   [5:0] pool_window_1_V_11_reg_3215;
wire   [5:0] pool_window_2_V_11_fu_1226_p3;
reg   [5:0] pool_window_2_V_11_reg_3220;
wire   [5:0] pool_window_3_V_11_fu_1234_p3;
reg   [5:0] pool_window_3_V_11_reg_3225;
wire   [1:0] select_ln65_30_fu_1287_p3;
reg   [1:0] select_ln65_30_reg_3230;
wire   [5:0] pool_window_0_V_13_fu_1295_p3;
reg   [5:0] pool_window_0_V_13_reg_3235;
wire   [5:0] pool_window_1_V_13_fu_1303_p3;
reg   [5:0] pool_window_1_V_13_reg_3240;
wire   [5:0] pool_window_2_V_13_fu_1310_p3;
reg   [5:0] pool_window_2_V_13_reg_3245;
wire   [5:0] pool_window_3_V_13_fu_1318_p3;
reg   [5:0] pool_window_3_V_13_reg_3250;
wire   [1:0] select_ln65_34_fu_1371_p3;
reg   [1:0] select_ln65_34_reg_3255;
wire   [5:0] pool_window_0_V_15_fu_1379_p3;
reg   [5:0] pool_window_0_V_15_reg_3260;
wire   [5:0] pool_window_1_V_15_fu_1387_p3;
reg   [5:0] pool_window_1_V_15_reg_3265;
wire   [5:0] pool_window_2_V_15_fu_1394_p3;
reg   [5:0] pool_window_2_V_15_reg_3270;
wire   [5:0] pool_window_3_V_15_fu_1402_p3;
reg   [5:0] pool_window_3_V_15_reg_3275;
wire   [1:0] select_ln65_38_fu_1455_p3;
reg   [1:0] select_ln65_38_reg_3280;
wire   [5:0] pool_window_0_V_17_fu_1463_p3;
reg   [5:0] pool_window_0_V_17_reg_3285;
wire   [5:0] pool_window_1_V_17_fu_1471_p3;
reg   [5:0] pool_window_1_V_17_reg_3290;
wire   [5:0] pool_window_2_V_17_fu_1478_p3;
reg   [5:0] pool_window_2_V_17_reg_3295;
wire   [5:0] pool_window_3_V_17_fu_1486_p3;
reg   [5:0] pool_window_3_V_17_reg_3300;
wire   [1:0] select_ln65_42_fu_1539_p3;
reg   [1:0] select_ln65_42_reg_3305;
wire   [5:0] pool_window_0_V_19_fu_1547_p3;
reg   [5:0] pool_window_0_V_19_reg_3310;
wire   [5:0] pool_window_1_V_19_fu_1555_p3;
reg   [5:0] pool_window_1_V_19_reg_3315;
wire   [5:0] pool_window_2_V_19_fu_1562_p3;
reg   [5:0] pool_window_2_V_19_reg_3320;
wire   [5:0] pool_window_3_V_19_fu_1570_p3;
reg   [5:0] pool_window_3_V_19_reg_3325;
wire   [1:0] select_ln65_46_fu_1623_p3;
reg   [1:0] select_ln65_46_reg_3330;
wire   [5:0] pool_window_0_V_21_fu_1631_p3;
reg   [5:0] pool_window_0_V_21_reg_3335;
wire   [5:0] pool_window_1_V_21_fu_1639_p3;
reg   [5:0] pool_window_1_V_21_reg_3340;
wire   [5:0] pool_window_2_V_21_fu_1646_p3;
reg   [5:0] pool_window_2_V_21_reg_3345;
wire   [5:0] pool_window_3_V_21_fu_1654_p3;
reg   [5:0] pool_window_3_V_21_reg_3350;
wire   [1:0] select_ln65_50_fu_1707_p3;
reg   [1:0] select_ln65_50_reg_3355;
wire   [5:0] pool_window_0_V_23_fu_1715_p3;
reg   [5:0] pool_window_0_V_23_reg_3360;
wire   [5:0] pool_window_1_V_23_fu_1723_p3;
reg   [5:0] pool_window_1_V_23_reg_3365;
wire   [5:0] pool_window_2_V_23_fu_1730_p3;
reg   [5:0] pool_window_2_V_23_reg_3370;
wire   [5:0] pool_window_3_V_23_fu_1738_p3;
reg   [5:0] pool_window_3_V_23_reg_3375;
wire   [1:0] select_ln65_54_fu_1791_p3;
reg   [1:0] select_ln65_54_reg_3380;
wire   [5:0] pool_window_0_V_25_fu_1799_p3;
reg   [5:0] pool_window_0_V_25_reg_3385;
wire   [5:0] pool_window_1_V_25_fu_1807_p3;
reg   [5:0] pool_window_1_V_25_reg_3390;
wire   [5:0] pool_window_2_V_25_fu_1814_p3;
reg   [5:0] pool_window_2_V_25_reg_3395;
wire   [5:0] pool_window_3_V_25_fu_1822_p3;
reg   [5:0] pool_window_3_V_25_reg_3400;
wire   [1:0] select_ln65_58_fu_1875_p3;
reg   [1:0] select_ln65_58_reg_3405;
wire   [5:0] pool_window_0_V_27_fu_1883_p3;
reg   [5:0] pool_window_0_V_27_reg_3410;
wire   [5:0] pool_window_1_V_27_fu_1891_p3;
reg   [5:0] pool_window_1_V_27_reg_3415;
wire   [5:0] pool_window_2_V_27_fu_1898_p3;
reg   [5:0] pool_window_2_V_27_reg_3420;
wire   [5:0] pool_window_3_V_27_fu_1906_p3;
reg   [5:0] pool_window_3_V_27_reg_3425;
wire   [1:0] select_ln65_62_fu_1959_p3;
reg   [1:0] select_ln65_62_reg_3430;
wire   [5:0] pool_window_0_V_29_fu_1967_p3;
reg   [5:0] pool_window_0_V_29_reg_3435;
wire   [5:0] pool_window_1_V_29_fu_1975_p3;
reg   [5:0] pool_window_1_V_29_reg_3440;
wire   [5:0] pool_window_2_V_29_fu_1982_p3;
reg   [5:0] pool_window_2_V_29_reg_3445;
wire   [5:0] pool_window_3_V_29_fu_1990_p3;
reg   [5:0] pool_window_3_V_29_reg_3450;
wire   [1:0] select_ln65_66_fu_2043_p3;
reg   [1:0] select_ln65_66_reg_3455;
wire   [5:0] pool_window_0_V_31_fu_2051_p3;
reg   [5:0] pool_window_0_V_31_reg_3460;
wire   [5:0] pool_window_1_V_31_fu_2059_p3;
reg   [5:0] pool_window_1_V_31_reg_3465;
wire   [5:0] pool_window_2_V_31_fu_2066_p3;
reg   [5:0] pool_window_2_V_31_reg_3470;
wire   [5:0] pool_window_3_V_31_fu_2074_p3;
reg   [5:0] pool_window_3_V_31_reg_3475;
wire   [1:0] select_ln65_70_fu_2127_p3;
reg   [1:0] select_ln65_70_reg_3480;
wire   [5:0] pool_window_0_V_33_fu_2135_p3;
reg   [5:0] pool_window_0_V_33_reg_3485;
wire   [5:0] pool_window_1_V_33_fu_2143_p3;
reg   [5:0] pool_window_1_V_33_reg_3490;
wire   [5:0] pool_window_2_V_33_fu_2150_p3;
reg   [5:0] pool_window_2_V_33_reg_3495;
wire   [5:0] pool_window_3_V_33_fu_2158_p3;
reg   [5:0] pool_window_3_V_33_reg_3500;
wire   [1:0] select_ln65_74_fu_2211_p3;
reg   [1:0] select_ln65_74_reg_3505;
wire   [5:0] pool_window_0_V_35_fu_2219_p3;
reg   [5:0] pool_window_0_V_35_reg_3510;
wire   [5:0] pool_window_1_V_35_fu_2227_p3;
reg   [5:0] pool_window_1_V_35_reg_3515;
wire   [5:0] pool_window_2_V_35_fu_2234_p3;
reg   [5:0] pool_window_2_V_35_reg_3520;
wire   [5:0] pool_window_3_V_35_fu_2242_p3;
reg   [5:0] pool_window_3_V_35_reg_3525;
wire   [1:0] select_ln65_78_fu_2295_p3;
reg   [1:0] select_ln65_78_reg_3530;
wire   [5:0] pool_window_0_V_37_fu_2303_p3;
reg   [5:0] pool_window_0_V_37_reg_3535;
wire   [5:0] pool_window_1_V_37_fu_2311_p3;
reg   [5:0] pool_window_1_V_37_reg_3540;
wire   [5:0] pool_window_2_V_37_fu_2318_p3;
reg   [5:0] pool_window_2_V_37_reg_3545;
wire   [5:0] pool_window_3_V_37_fu_2326_p3;
reg   [5:0] pool_window_3_V_37_reg_3550;
wire   [1:0] select_ln65_80_fu_2379_p3;
reg   [1:0] select_ln65_80_reg_3555;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_356_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_363;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_363;
wire   [31:0] add_ln225_fu_450_p2;
wire   [31:0] add_ln220_fu_494_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln191_fu_390_p2;
wire   [0:0] icmp_ln191_4_fu_400_p2;
wire   [0:0] icmp_ln191_5_fu_410_p2;
wire   [0:0] icmp_ln191_6_fu_420_p2;
wire   [0:0] and_ln191_3_fu_432_p2;
wire   [0:0] and_ln191_fu_426_p2;
wire   [31:0] add_ln227_fu_462_p2;
wire   [31:0] add_ln222_fu_506_p2;
wire   [0:0] icmp_ln1496_fu_1073_p2;
wire   [0:0] icmp_ln1496_16_fu_1087_p2;
wire   [5:0] select_ln65_fu_1079_p3;
wire   [5:0] select_ln65_17_fu_1101_p3;
wire   [0:0] icmp_ln1496_17_fu_1109_p2;
wire   [1:0] select_ln65_20_fu_1093_p3;
wire   [1:0] zext_ln65_fu_1115_p1;
wire   [0:0] icmp_ln1496_1_fu_1157_p2;
wire   [0:0] icmp_ln1496_18_fu_1171_p2;
wire   [5:0] select_ln65_19_fu_1163_p3;
wire   [5:0] select_ln65_21_fu_1185_p3;
wire   [0:0] icmp_ln1496_19_fu_1193_p2;
wire   [1:0] select_ln65_24_fu_1177_p3;
wire   [1:0] zext_ln65_4_fu_1199_p1;
wire   [0:0] icmp_ln1496_2_fu_1241_p2;
wire   [0:0] icmp_ln1496_20_fu_1255_p2;
wire   [5:0] select_ln65_23_fu_1247_p3;
wire   [5:0] select_ln65_25_fu_1269_p3;
wire   [0:0] icmp_ln1496_21_fu_1277_p2;
wire   [1:0] select_ln65_28_fu_1261_p3;
wire   [1:0] zext_ln65_5_fu_1283_p1;
wire   [0:0] icmp_ln1496_22_fu_1325_p2;
wire   [0:0] icmp_ln1496_23_fu_1339_p2;
wire   [5:0] select_ln65_27_fu_1331_p3;
wire   [5:0] select_ln65_29_fu_1353_p3;
wire   [0:0] icmp_ln1496_24_fu_1361_p2;
wire   [1:0] select_ln65_32_fu_1345_p3;
wire   [1:0] zext_ln65_6_fu_1367_p1;
wire   [0:0] icmp_ln1496_25_fu_1409_p2;
wire   [0:0] icmp_ln1496_26_fu_1423_p2;
wire   [5:0] select_ln65_31_fu_1415_p3;
wire   [5:0] select_ln65_33_fu_1437_p3;
wire   [0:0] icmp_ln1496_27_fu_1445_p2;
wire   [1:0] select_ln65_36_fu_1429_p3;
wire   [1:0] zext_ln65_7_fu_1451_p1;
wire   [0:0] icmp_ln1496_5_fu_1493_p2;
wire   [0:0] icmp_ln1496_28_fu_1507_p2;
wire   [5:0] select_ln65_35_fu_1499_p3;
wire   [5:0] select_ln65_37_fu_1521_p3;
wire   [0:0] icmp_ln1496_29_fu_1529_p2;
wire   [1:0] select_ln65_40_fu_1513_p3;
wire   [1:0] zext_ln65_8_fu_1535_p1;
wire   [0:0] icmp_ln1496_6_fu_1577_p2;
wire   [0:0] icmp_ln1496_30_fu_1591_p2;
wire   [5:0] select_ln65_39_fu_1583_p3;
wire   [5:0] select_ln65_41_fu_1605_p3;
wire   [0:0] icmp_ln1496_31_fu_1613_p2;
wire   [1:0] select_ln65_44_fu_1597_p3;
wire   [1:0] zext_ln65_9_fu_1619_p1;
wire   [0:0] icmp_ln1496_7_fu_1661_p2;
wire   [0:0] icmp_ln1496_32_fu_1675_p2;
wire   [5:0] select_ln65_43_fu_1667_p3;
wire   [5:0] select_ln65_45_fu_1689_p3;
wire   [0:0] icmp_ln1496_33_fu_1697_p2;
wire   [1:0] select_ln65_48_fu_1681_p3;
wire   [1:0] zext_ln65_10_fu_1703_p1;
wire   [0:0] icmp_ln1496_8_fu_1745_p2;
wire   [0:0] icmp_ln1496_34_fu_1759_p2;
wire   [5:0] select_ln65_47_fu_1751_p3;
wire   [5:0] select_ln65_49_fu_1773_p3;
wire   [0:0] icmp_ln1496_35_fu_1781_p2;
wire   [1:0] select_ln65_52_fu_1765_p3;
wire   [1:0] zext_ln65_11_fu_1787_p1;
wire   [0:0] icmp_ln1496_9_fu_1829_p2;
wire   [0:0] icmp_ln1496_36_fu_1843_p2;
wire   [5:0] select_ln65_51_fu_1835_p3;
wire   [5:0] select_ln65_53_fu_1857_p3;
wire   [0:0] icmp_ln1496_37_fu_1865_p2;
wire   [1:0] select_ln65_56_fu_1849_p3;
wire   [1:0] zext_ln65_12_fu_1871_p1;
wire   [0:0] icmp_ln1496_10_fu_1913_p2;
wire   [0:0] icmp_ln1496_38_fu_1927_p2;
wire   [5:0] select_ln65_55_fu_1919_p3;
wire   [5:0] select_ln65_57_fu_1941_p3;
wire   [0:0] icmp_ln1496_39_fu_1949_p2;
wire   [1:0] select_ln65_60_fu_1933_p3;
wire   [1:0] zext_ln65_13_fu_1955_p1;
wire   [0:0] icmp_ln1496_11_fu_1997_p2;
wire   [0:0] icmp_ln1496_40_fu_2011_p2;
wire   [5:0] select_ln65_59_fu_2003_p3;
wire   [5:0] select_ln65_61_fu_2025_p3;
wire   [0:0] icmp_ln1496_41_fu_2033_p2;
wire   [1:0] select_ln65_64_fu_2017_p3;
wire   [1:0] zext_ln65_14_fu_2039_p1;
wire   [0:0] icmp_ln1496_12_fu_2081_p2;
wire   [0:0] icmp_ln1496_42_fu_2095_p2;
wire   [5:0] select_ln65_63_fu_2087_p3;
wire   [5:0] select_ln65_65_fu_2109_p3;
wire   [0:0] icmp_ln1496_43_fu_2117_p2;
wire   [1:0] select_ln65_68_fu_2101_p3;
wire   [1:0] zext_ln65_15_fu_2123_p1;
wire   [0:0] icmp_ln1496_13_fu_2165_p2;
wire   [0:0] icmp_ln1496_44_fu_2179_p2;
wire   [5:0] select_ln65_67_fu_2171_p3;
wire   [5:0] select_ln65_69_fu_2193_p3;
wire   [0:0] icmp_ln1496_45_fu_2201_p2;
wire   [1:0] select_ln65_72_fu_2185_p3;
wire   [1:0] zext_ln65_16_fu_2207_p1;
wire   [0:0] icmp_ln1496_14_fu_2249_p2;
wire   [0:0] icmp_ln1496_46_fu_2263_p2;
wire   [5:0] select_ln65_71_fu_2255_p3;
wire   [5:0] select_ln65_73_fu_2277_p3;
wire   [0:0] icmp_ln1496_47_fu_2285_p2;
wire   [1:0] select_ln65_76_fu_2269_p3;
wire   [1:0] zext_ln65_17_fu_2291_p1;
wire   [0:0] icmp_ln1496_15_fu_2333_p2;
wire   [0:0] icmp_ln1496_48_fu_2347_p2;
wire   [5:0] select_ln65_75_fu_2339_p3;
wire   [5:0] select_ln65_77_fu_2361_p3;
wire   [0:0] icmp_ln1496_49_fu_2369_p2;
wire   [1:0] select_ln65_79_fu_2353_p3;
wire   [1:0] zext_ln65_18_fu_2375_p1;
wire   [11:0] tmp_25_fu_2405_p1;
wire   [11:0] tmp_25_fu_2405_p2;
wire   [11:0] tmp_25_fu_2405_p3;
wire   [11:0] tmp_25_fu_2405_p4;
wire   [11:0] tmp_25_fu_2405_p6;
wire   [11:0] tmp_26_fu_2439_p1;
wire   [11:0] tmp_26_fu_2439_p2;
wire   [11:0] tmp_26_fu_2439_p3;
wire   [11:0] tmp_26_fu_2439_p4;
wire   [11:0] tmp_26_fu_2439_p6;
wire   [11:0] tmp_27_fu_2473_p1;
wire   [11:0] tmp_27_fu_2473_p2;
wire   [11:0] tmp_27_fu_2473_p3;
wire   [11:0] tmp_27_fu_2473_p4;
wire   [11:0] tmp_27_fu_2473_p6;
wire   [11:0] tmp_28_fu_2507_p1;
wire   [11:0] tmp_28_fu_2507_p2;
wire   [11:0] tmp_28_fu_2507_p3;
wire   [11:0] tmp_28_fu_2507_p4;
wire   [11:0] tmp_28_fu_2507_p6;
wire   [11:0] tmp_29_fu_2541_p1;
wire   [11:0] tmp_29_fu_2541_p2;
wire   [11:0] tmp_29_fu_2541_p3;
wire   [11:0] tmp_29_fu_2541_p4;
wire   [11:0] tmp_29_fu_2541_p6;
wire   [11:0] tmp_30_fu_2575_p1;
wire   [11:0] tmp_30_fu_2575_p2;
wire   [11:0] tmp_30_fu_2575_p3;
wire   [11:0] tmp_30_fu_2575_p4;
wire   [11:0] tmp_30_fu_2575_p6;
wire   [11:0] tmp_31_fu_2609_p1;
wire   [11:0] tmp_31_fu_2609_p2;
wire   [11:0] tmp_31_fu_2609_p3;
wire   [11:0] tmp_31_fu_2609_p4;
wire   [11:0] tmp_31_fu_2609_p6;
wire   [11:0] tmp_32_fu_2643_p1;
wire   [11:0] tmp_32_fu_2643_p2;
wire   [11:0] tmp_32_fu_2643_p3;
wire   [11:0] tmp_32_fu_2643_p4;
wire   [11:0] tmp_32_fu_2643_p6;
wire   [11:0] tmp_33_fu_2677_p1;
wire   [11:0] tmp_33_fu_2677_p2;
wire   [11:0] tmp_33_fu_2677_p3;
wire   [11:0] tmp_33_fu_2677_p4;
wire   [11:0] tmp_33_fu_2677_p6;
wire   [11:0] tmp_34_fu_2711_p1;
wire   [11:0] tmp_34_fu_2711_p2;
wire   [11:0] tmp_34_fu_2711_p3;
wire   [11:0] tmp_34_fu_2711_p4;
wire   [11:0] tmp_34_fu_2711_p6;
wire   [11:0] tmp_35_fu_2745_p1;
wire   [11:0] tmp_35_fu_2745_p2;
wire   [11:0] tmp_35_fu_2745_p3;
wire   [11:0] tmp_35_fu_2745_p4;
wire   [11:0] tmp_35_fu_2745_p6;
wire   [11:0] tmp_36_fu_2779_p1;
wire   [11:0] tmp_36_fu_2779_p2;
wire   [11:0] tmp_36_fu_2779_p3;
wire   [11:0] tmp_36_fu_2779_p4;
wire   [11:0] tmp_36_fu_2779_p6;
wire   [11:0] tmp_37_fu_2813_p1;
wire   [11:0] tmp_37_fu_2813_p2;
wire   [11:0] tmp_37_fu_2813_p3;
wire   [11:0] tmp_37_fu_2813_p4;
wire   [11:0] tmp_37_fu_2813_p6;
wire   [11:0] tmp_38_fu_2847_p1;
wire   [11:0] tmp_38_fu_2847_p2;
wire   [11:0] tmp_38_fu_2847_p3;
wire   [11:0] tmp_38_fu_2847_p4;
wire   [11:0] tmp_38_fu_2847_p6;
wire   [11:0] tmp_39_fu_2881_p1;
wire   [11:0] tmp_39_fu_2881_p2;
wire   [11:0] tmp_39_fu_2881_p3;
wire   [11:0] tmp_39_fu_2881_p4;
wire   [11:0] tmp_39_fu_2881_p6;
wire   [11:0] tmp_40_fu_2915_p1;
wire   [11:0] tmp_40_fu_2915_p2;
wire   [11:0] tmp_40_fu_2915_p3;
wire   [11:0] tmp_40_fu_2915_p4;
wire   [11:0] tmp_40_fu_2915_p6;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_718;
reg    ap_condition_714;
reg    ap_condition_2022;
reg    ap_condition_725;
reg    ap_condition_431;
reg    ap_condition_2372;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_16 = 4'd0;
#0 kernel_data_V_2_17 = 4'd0;
#0 kernel_data_V_2_18 = 4'd0;
#0 kernel_data_V_2_19 = 4'd0;
#0 kernel_data_V_2_20 = 4'd0;
#0 kernel_data_V_2_21 = 4'd0;
#0 kernel_data_V_2_22 = 4'd0;
#0 kernel_data_V_2_23 = 4'd0;
#0 kernel_data_V_2_24 = 4'd0;
#0 kernel_data_V_2_25 = 4'd0;
#0 kernel_data_V_2_26 = 4'd0;
#0 kernel_data_V_2_27 = 4'd0;
#0 kernel_data_V_2_28 = 4'd0;
#0 kernel_data_V_2_29 = 4'd0;
#0 kernel_data_V_2_30 = 4'd0;
#0 kernel_data_V_2_31 = 4'd0;
#0 kernel_data_V_2_48 = 4'd0;
#0 kernel_data_V_2_49 = 4'd0;
#0 kernel_data_V_2_50 = 4'd0;
#0 kernel_data_V_2_51 = 4'd0;
#0 kernel_data_V_2_52 = 4'd0;
#0 kernel_data_V_2_53 = 4'd0;
#0 kernel_data_V_2_54 = 4'd0;
#0 kernel_data_V_2_55 = 4'd0;
#0 kernel_data_V_2_56 = 4'd0;
#0 kernel_data_V_2_57 = 4'd0;
#0 kernel_data_V_2_58 = 4'd0;
#0 kernel_data_V_2_59 = 4'd0;
#0 kernel_data_V_2_60 = 4'd0;
#0 kernel_data_V_2_61 = 4'd0;
#0 kernel_data_V_2_62 = 4'd0;
#0 kernel_data_V_2_63 = 4'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_4_ce0),
    .we0(line_buffer_Array_V_2_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_2_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_5_ce0),
    .we0(line_buffer_Array_V_2_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_2_0_5_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_6_ce0),
    .we0(line_buffer_Array_V_2_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_2_0_6_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_7_ce0),
    .we0(line_buffer_Array_V_2_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_2_0_7_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_8_ce0),
    .we0(line_buffer_Array_V_2_0_8_we0),
    .d0(data_V_data_8_V_dout),
    .q0(line_buffer_Array_V_2_0_8_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_9_ce0),
    .we0(line_buffer_Array_V_2_0_9_we0),
    .d0(data_V_data_9_V_dout),
    .q0(line_buffer_Array_V_2_0_9_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_10_ce0),
    .we0(line_buffer_Array_V_2_0_10_we0),
    .d0(data_V_data_10_V_dout),
    .q0(line_buffer_Array_V_2_0_10_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_11_ce0),
    .we0(line_buffer_Array_V_2_0_11_we0),
    .d0(data_V_data_11_V_dout),
    .q0(line_buffer_Array_V_2_0_11_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_12_ce0),
    .we0(line_buffer_Array_V_2_0_12_we0),
    .d0(data_V_data_12_V_dout),
    .q0(line_buffer_Array_V_2_0_12_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_13_ce0),
    .we0(line_buffer_Array_V_2_0_13_we0),
    .d0(data_V_data_13_V_dout),
    .q0(line_buffer_Array_V_2_0_13_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_14_ce0),
    .we0(line_buffer_Array_V_2_0_14_we0),
    .d0(data_V_data_14_V_dout),
    .q0(line_buffer_Array_V_2_0_14_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_fYi #(
    .DataWidth( 4 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd23),
    .ce0(line_buffer_Array_V_2_0_15_ce0),
    .we0(line_buffer_Array_V_2_0_15_we0),
    .d0(data_V_data_15_V_dout),
    .q0(line_buffer_Array_V_2_0_15_q0)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U59(
    .din0(tmp_25_fu_2405_p1),
    .din1(tmp_25_fu_2405_p2),
    .din2(tmp_25_fu_2405_p3),
    .din3(tmp_25_fu_2405_p4),
    .din4(select_ln65_22_reg_3180),
    .dout(tmp_25_fu_2405_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U60(
    .din0(tmp_26_fu_2439_p1),
    .din1(tmp_26_fu_2439_p2),
    .din2(tmp_26_fu_2439_p3),
    .din3(tmp_26_fu_2439_p4),
    .din4(select_ln65_26_reg_3205),
    .dout(tmp_26_fu_2439_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U61(
    .din0(tmp_27_fu_2473_p1),
    .din1(tmp_27_fu_2473_p2),
    .din2(tmp_27_fu_2473_p3),
    .din3(tmp_27_fu_2473_p4),
    .din4(select_ln65_30_reg_3230),
    .dout(tmp_27_fu_2473_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U62(
    .din0(tmp_28_fu_2507_p1),
    .din1(tmp_28_fu_2507_p2),
    .din2(tmp_28_fu_2507_p3),
    .din3(tmp_28_fu_2507_p4),
    .din4(select_ln65_34_reg_3255),
    .dout(tmp_28_fu_2507_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U63(
    .din0(tmp_29_fu_2541_p1),
    .din1(tmp_29_fu_2541_p2),
    .din2(tmp_29_fu_2541_p3),
    .din3(tmp_29_fu_2541_p4),
    .din4(select_ln65_38_reg_3280),
    .dout(tmp_29_fu_2541_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U64(
    .din0(tmp_30_fu_2575_p1),
    .din1(tmp_30_fu_2575_p2),
    .din2(tmp_30_fu_2575_p3),
    .din3(tmp_30_fu_2575_p4),
    .din4(select_ln65_42_reg_3305),
    .dout(tmp_30_fu_2575_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U65(
    .din0(tmp_31_fu_2609_p1),
    .din1(tmp_31_fu_2609_p2),
    .din2(tmp_31_fu_2609_p3),
    .din3(tmp_31_fu_2609_p4),
    .din4(select_ln65_46_reg_3330),
    .dout(tmp_31_fu_2609_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U66(
    .din0(tmp_32_fu_2643_p1),
    .din1(tmp_32_fu_2643_p2),
    .din2(tmp_32_fu_2643_p3),
    .din3(tmp_32_fu_2643_p4),
    .din4(select_ln65_50_reg_3355),
    .dout(tmp_32_fu_2643_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U67(
    .din0(tmp_33_fu_2677_p1),
    .din1(tmp_33_fu_2677_p2),
    .din2(tmp_33_fu_2677_p3),
    .din3(tmp_33_fu_2677_p4),
    .din4(select_ln65_54_reg_3380),
    .dout(tmp_33_fu_2677_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U68(
    .din0(tmp_34_fu_2711_p1),
    .din1(tmp_34_fu_2711_p2),
    .din2(tmp_34_fu_2711_p3),
    .din3(tmp_34_fu_2711_p4),
    .din4(select_ln65_58_reg_3405),
    .dout(tmp_34_fu_2711_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U69(
    .din0(tmp_35_fu_2745_p1),
    .din1(tmp_35_fu_2745_p2),
    .din2(tmp_35_fu_2745_p3),
    .din3(tmp_35_fu_2745_p4),
    .din4(select_ln65_62_reg_3430),
    .dout(tmp_35_fu_2745_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U70(
    .din0(tmp_36_fu_2779_p1),
    .din1(tmp_36_fu_2779_p2),
    .din2(tmp_36_fu_2779_p3),
    .din3(tmp_36_fu_2779_p4),
    .din4(select_ln65_66_reg_3455),
    .dout(tmp_36_fu_2779_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U71(
    .din0(tmp_37_fu_2813_p1),
    .din1(tmp_37_fu_2813_p2),
    .din2(tmp_37_fu_2813_p3),
    .din3(tmp_37_fu_2813_p4),
    .din4(select_ln65_70_reg_3480),
    .dout(tmp_37_fu_2813_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U72(
    .din0(tmp_38_fu_2847_p1),
    .din1(tmp_38_fu_2847_p2),
    .din2(tmp_38_fu_2847_p3),
    .din3(tmp_38_fu_2847_p4),
    .din4(select_ln65_74_reg_3505),
    .dout(tmp_38_fu_2847_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U73(
    .din0(tmp_39_fu_2881_p1),
    .din1(tmp_39_fu_2881_p2),
    .din2(tmp_39_fu_2881_p3),
    .din3(tmp_39_fu_2881_p4),
    .din4(select_ln65_78_reg_3530),
    .dout(tmp_39_fu_2881_p6)
);

myproject_axi_mux_42_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 12 ))
myproject_axi_mux_42_12_1_1_U74(
    .din0(tmp_40_fu_2915_p1),
    .din1(tmp_40_fu_2915_p2),
    .din2(tmp_40_fu_2915_p3),
    .din3(tmp_40_fu_2915_p4),
    .din4(select_ln65_80_reg_3555),
    .dout(tmp_40_fu_2915_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_714)) begin
        if ((1'b1 == ap_condition_718)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_363 <= select_ln222_reg_2963;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_363 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_363;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_352 <= add_ln241_reg_2941;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_352 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2022)) begin
        if ((icmp_ln212_fu_444_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_444_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_450_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_725)) begin
        if ((icmp_ln216_fu_488_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_488_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_494_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_2372)) begin
            sX_1 <= select_ln227_reg_2954;
        end else if ((1'b1 == ap_condition_431)) begin
            sX_1 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataOut_V_22_reg_3064 <= line_buffer_Array_V_2_0_0_q0;
        DataOut_V_23_reg_3070 <= line_buffer_Array_V_2_0_1_q0;
        DataOut_V_24_reg_3076 <= line_buffer_Array_V_2_0_2_q0;
        DataOut_V_25_reg_3082 <= line_buffer_Array_V_2_0_3_q0;
        DataOut_V_26_reg_3088 <= line_buffer_Array_V_2_0_4_q0;
        DataOut_V_27_reg_3094 <= line_buffer_Array_V_2_0_5_q0;
        DataOut_V_28_reg_3100 <= line_buffer_Array_V_2_0_6_q0;
        DataOut_V_29_reg_3106 <= line_buffer_Array_V_2_0_7_q0;
        DataOut_V_30_reg_3112 <= line_buffer_Array_V_2_0_8_q0;
        DataOut_V_31_reg_3118 <= line_buffer_Array_V_2_0_9_q0;
        DataOut_V_32_reg_3124 <= line_buffer_Array_V_2_0_10_q0;
        DataOut_V_33_reg_3130 <= line_buffer_Array_V_2_0_11_q0;
        DataOut_V_34_reg_3136 <= line_buffer_Array_V_2_0_12_q0;
        DataOut_V_35_reg_3142 <= line_buffer_Array_V_2_0_13_q0;
        DataOut_V_36_reg_3148 <= line_buffer_Array_V_2_0_14_q0;
        DataOut_V_reg_3154 <= line_buffer_Array_V_2_0_15_q0;
        shift_buffer_1_0_V_reg_2968 <= data_V_data_0_V_dout;
        shift_buffer_1_10_V_reg_3028 <= data_V_data_10_V_dout;
        shift_buffer_1_11_V_reg_3034 <= data_V_data_11_V_dout;
        shift_buffer_1_12_V_reg_3040 <= data_V_data_12_V_dout;
        shift_buffer_1_13_V_reg_3046 <= data_V_data_13_V_dout;
        shift_buffer_1_14_V_reg_3052 <= data_V_data_14_V_dout;
        shift_buffer_1_15_V_reg_3058 <= data_V_data_15_V_dout;
        shift_buffer_1_1_V_reg_2974 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_2980 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_2986 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_2992 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_2998 <= data_V_data_5_V_dout;
        shift_buffer_1_6_V_reg_3004 <= data_V_data_6_V_dout;
        shift_buffer_1_7_V_reg_3010 <= data_V_data_7_V_dout;
        shift_buffer_1_8_V_reg_3016 <= data_V_data_8_V_dout;
        shift_buffer_1_9_V_reg_3022 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln241_reg_2941 <= add_ln241_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_2946 <= and_ln191_4_fu_438_p2;
        icmp_ln212_reg_2950 <= icmp_ln212_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_2946_pp0_iter1_reg <= and_ln191_4_reg_2946;
        icmp_ln241_reg_2937 <= icmp_ln241_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_2959 <= icmp_ln216_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_data_V_2_16 <= DataOut_V_22_reg_3064;
        kernel_data_V_2_17 <= DataOut_V_23_reg_3070;
        kernel_data_V_2_18 <= DataOut_V_24_reg_3076;
        kernel_data_V_2_19 <= DataOut_V_25_reg_3082;
        kernel_data_V_2_20 <= DataOut_V_26_reg_3088;
        kernel_data_V_2_21 <= DataOut_V_27_reg_3094;
        kernel_data_V_2_22 <= DataOut_V_28_reg_3100;
        kernel_data_V_2_23 <= DataOut_V_29_reg_3106;
        kernel_data_V_2_24 <= DataOut_V_30_reg_3112;
        kernel_data_V_2_25 <= DataOut_V_31_reg_3118;
        kernel_data_V_2_26 <= DataOut_V_32_reg_3124;
        kernel_data_V_2_27 <= DataOut_V_33_reg_3130;
        kernel_data_V_2_28 <= DataOut_V_34_reg_3136;
        kernel_data_V_2_29 <= DataOut_V_35_reg_3142;
        kernel_data_V_2_30 <= DataOut_V_36_reg_3148;
        kernel_data_V_2_31 <= DataOut_V_reg_3154;
        kernel_data_V_2_48 <= shift_buffer_1_0_V_reg_2968;
        kernel_data_V_2_49 <= shift_buffer_1_1_V_reg_2974;
        kernel_data_V_2_50 <= shift_buffer_1_2_V_reg_2980;
        kernel_data_V_2_51 <= shift_buffer_1_3_V_reg_2986;
        kernel_data_V_2_52 <= shift_buffer_1_4_V_reg_2992;
        kernel_data_V_2_53 <= shift_buffer_1_5_V_reg_2998;
        kernel_data_V_2_54 <= shift_buffer_1_6_V_reg_3004;
        kernel_data_V_2_55 <= shift_buffer_1_7_V_reg_3010;
        kernel_data_V_2_56 <= shift_buffer_1_8_V_reg_3016;
        kernel_data_V_2_57 <= shift_buffer_1_9_V_reg_3022;
        kernel_data_V_2_58 <= shift_buffer_1_10_V_reg_3028;
        kernel_data_V_2_59 <= shift_buffer_1_11_V_reg_3034;
        kernel_data_V_2_60 <= shift_buffer_1_12_V_reg_3040;
        kernel_data_V_2_61 <= shift_buffer_1_13_V_reg_3046;
        kernel_data_V_2_62 <= shift_buffer_1_14_V_reg_3052;
        kernel_data_V_2_63 <= shift_buffer_1_15_V_reg_3058;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2946) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_window_0_V_11_reg_3210[5 : 2] <= pool_window_0_V_11_fu_1211_p3[5 : 2];
        pool_window_0_V_13_reg_3235[5 : 2] <= pool_window_0_V_13_fu_1295_p3[5 : 2];
        pool_window_0_V_15_reg_3260[5 : 2] <= pool_window_0_V_15_fu_1379_p3[5 : 2];
        pool_window_0_V_17_reg_3285[5 : 2] <= pool_window_0_V_17_fu_1463_p3[5 : 2];
        pool_window_0_V_19_reg_3310[5 : 2] <= pool_window_0_V_19_fu_1547_p3[5 : 2];
        pool_window_0_V_21_reg_3335[5 : 2] <= pool_window_0_V_21_fu_1631_p3[5 : 2];
        pool_window_0_V_23_reg_3360[5 : 2] <= pool_window_0_V_23_fu_1715_p3[5 : 2];
        pool_window_0_V_25_reg_3385[5 : 2] <= pool_window_0_V_25_fu_1799_p3[5 : 2];
        pool_window_0_V_27_reg_3410[5 : 2] <= pool_window_0_V_27_fu_1883_p3[5 : 2];
        pool_window_0_V_29_reg_3435[5 : 2] <= pool_window_0_V_29_fu_1967_p3[5 : 2];
        pool_window_0_V_31_reg_3460[5 : 2] <= pool_window_0_V_31_fu_2051_p3[5 : 2];
        pool_window_0_V_33_reg_3485[5 : 2] <= pool_window_0_V_33_fu_2135_p3[5 : 2];
        pool_window_0_V_35_reg_3510[5 : 2] <= pool_window_0_V_35_fu_2219_p3[5 : 2];
        pool_window_0_V_37_reg_3535[5 : 2] <= pool_window_0_V_37_fu_2303_p3[5 : 2];
        pool_window_0_V_9_reg_3185[5 : 2] <= pool_window_0_V_9_fu_1127_p3[5 : 2];
        pool_window_0_V_reg_3160[5 : 2] <= pool_window_0_V_fu_1043_p3[5 : 2];
        pool_window_1_V_11_reg_3215[5 : 2] <= pool_window_1_V_11_fu_1219_p3[5 : 2];
        pool_window_1_V_13_reg_3240[5 : 2] <= pool_window_1_V_13_fu_1303_p3[5 : 2];
        pool_window_1_V_15_reg_3265[5 : 2] <= pool_window_1_V_15_fu_1387_p3[5 : 2];
        pool_window_1_V_17_reg_3290[5 : 2] <= pool_window_1_V_17_fu_1471_p3[5 : 2];
        pool_window_1_V_19_reg_3315[5 : 2] <= pool_window_1_V_19_fu_1555_p3[5 : 2];
        pool_window_1_V_21_reg_3340[5 : 2] <= pool_window_1_V_21_fu_1639_p3[5 : 2];
        pool_window_1_V_23_reg_3365[5 : 2] <= pool_window_1_V_23_fu_1723_p3[5 : 2];
        pool_window_1_V_25_reg_3390[5 : 2] <= pool_window_1_V_25_fu_1807_p3[5 : 2];
        pool_window_1_V_27_reg_3415[5 : 2] <= pool_window_1_V_27_fu_1891_p3[5 : 2];
        pool_window_1_V_29_reg_3440[5 : 2] <= pool_window_1_V_29_fu_1975_p3[5 : 2];
        pool_window_1_V_31_reg_3465[5 : 2] <= pool_window_1_V_31_fu_2059_p3[5 : 2];
        pool_window_1_V_33_reg_3490[5 : 2] <= pool_window_1_V_33_fu_2143_p3[5 : 2];
        pool_window_1_V_35_reg_3515[5 : 2] <= pool_window_1_V_35_fu_2227_p3[5 : 2];
        pool_window_1_V_37_reg_3540[5 : 2] <= pool_window_1_V_37_fu_2311_p3[5 : 2];
        pool_window_1_V_9_reg_3190[5 : 2] <= pool_window_1_V_9_fu_1135_p3[5 : 2];
        pool_window_1_V_reg_3165[5 : 2] <= pool_window_1_V_fu_1051_p3[5 : 2];
        pool_window_2_V_11_reg_3220[5 : 2] <= pool_window_2_V_11_fu_1226_p3[5 : 2];
        pool_window_2_V_13_reg_3245[5 : 2] <= pool_window_2_V_13_fu_1310_p3[5 : 2];
        pool_window_2_V_15_reg_3270[5 : 2] <= pool_window_2_V_15_fu_1394_p3[5 : 2];
        pool_window_2_V_17_reg_3295[5 : 2] <= pool_window_2_V_17_fu_1478_p3[5 : 2];
        pool_window_2_V_19_reg_3320[5 : 2] <= pool_window_2_V_19_fu_1562_p3[5 : 2];
        pool_window_2_V_21_reg_3345[5 : 2] <= pool_window_2_V_21_fu_1646_p3[5 : 2];
        pool_window_2_V_23_reg_3370[5 : 2] <= pool_window_2_V_23_fu_1730_p3[5 : 2];
        pool_window_2_V_25_reg_3395[5 : 2] <= pool_window_2_V_25_fu_1814_p3[5 : 2];
        pool_window_2_V_27_reg_3420[5 : 2] <= pool_window_2_V_27_fu_1898_p3[5 : 2];
        pool_window_2_V_29_reg_3445[5 : 2] <= pool_window_2_V_29_fu_1982_p3[5 : 2];
        pool_window_2_V_31_reg_3470[5 : 2] <= pool_window_2_V_31_fu_2066_p3[5 : 2];
        pool_window_2_V_33_reg_3495[5 : 2] <= pool_window_2_V_33_fu_2150_p3[5 : 2];
        pool_window_2_V_35_reg_3520[5 : 2] <= pool_window_2_V_35_fu_2234_p3[5 : 2];
        pool_window_2_V_37_reg_3545[5 : 2] <= pool_window_2_V_37_fu_2318_p3[5 : 2];
        pool_window_2_V_9_reg_3195[5 : 2] <= pool_window_2_V_9_fu_1142_p3[5 : 2];
        pool_window_2_V_reg_3170[5 : 2] <= pool_window_2_V_fu_1058_p3[5 : 2];
        pool_window_3_V_11_reg_3225[5 : 2] <= pool_window_3_V_11_fu_1234_p3[5 : 2];
        pool_window_3_V_13_reg_3250[5 : 2] <= pool_window_3_V_13_fu_1318_p3[5 : 2];
        pool_window_3_V_15_reg_3275[5 : 2] <= pool_window_3_V_15_fu_1402_p3[5 : 2];
        pool_window_3_V_17_reg_3300[5 : 2] <= pool_window_3_V_17_fu_1486_p3[5 : 2];
        pool_window_3_V_19_reg_3325[5 : 2] <= pool_window_3_V_19_fu_1570_p3[5 : 2];
        pool_window_3_V_21_reg_3350[5 : 2] <= pool_window_3_V_21_fu_1654_p3[5 : 2];
        pool_window_3_V_23_reg_3375[5 : 2] <= pool_window_3_V_23_fu_1738_p3[5 : 2];
        pool_window_3_V_25_reg_3400[5 : 2] <= pool_window_3_V_25_fu_1822_p3[5 : 2];
        pool_window_3_V_27_reg_3425[5 : 2] <= pool_window_3_V_27_fu_1906_p3[5 : 2];
        pool_window_3_V_29_reg_3450[5 : 2] <= pool_window_3_V_29_fu_1990_p3[5 : 2];
        pool_window_3_V_31_reg_3475[5 : 2] <= pool_window_3_V_31_fu_2074_p3[5 : 2];
        pool_window_3_V_33_reg_3500[5 : 2] <= pool_window_3_V_33_fu_2158_p3[5 : 2];
        pool_window_3_V_35_reg_3525[5 : 2] <= pool_window_3_V_35_fu_2242_p3[5 : 2];
        pool_window_3_V_37_reg_3550[5 : 2] <= pool_window_3_V_37_fu_2326_p3[5 : 2];
        pool_window_3_V_9_reg_3200[5 : 2] <= pool_window_3_V_9_fu_1150_p3[5 : 2];
        pool_window_3_V_reg_3175[5 : 2] <= pool_window_3_V_fu_1066_p3[5 : 2];
        select_ln65_22_reg_3180 <= select_ln65_22_fu_1119_p3;
        select_ln65_26_reg_3205 <= select_ln65_26_fu_1203_p3;
        select_ln65_30_reg_3230 <= select_ln65_30_fu_1287_p3;
        select_ln65_34_reg_3255 <= select_ln65_34_fu_1371_p3;
        select_ln65_38_reg_3280 <= select_ln65_38_fu_1455_p3;
        select_ln65_42_reg_3305 <= select_ln65_42_fu_1539_p3;
        select_ln65_46_reg_3330 <= select_ln65_46_fu_1623_p3;
        select_ln65_50_reg_3355 <= select_ln65_50_fu_1707_p3;
        select_ln65_54_reg_3380 <= select_ln65_54_fu_1791_p3;
        select_ln65_58_reg_3405 <= select_ln65_58_fu_1875_p3;
        select_ln65_62_reg_3430 <= select_ln65_62_fu_1959_p3;
        select_ln65_66_reg_3455 <= select_ln65_66_fu_2043_p3;
        select_ln65_70_reg_3480 <= select_ln65_70_fu_2127_p3;
        select_ln65_74_reg_3505 <= select_ln65_74_fu_2211_p3;
        select_ln65_78_reg_3530 <= select_ln65_78_fu_2295_p3;
        select_ln65_80_reg_3555 <= select_ln65_80_fu_2379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_2950 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln216_fu_488_p2 == 1'd0) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln222_reg_2963 <= select_ln222_fu_512_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd0) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln227_reg_2954 <= select_ln227_fu_468_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_374_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_356_p4 = add_ln241_reg_2941;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_356_p4 = indvar_flatten_reg_352;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln212_reg_2950 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_sY_1_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_363;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_10_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_10_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_11_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_11_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_12_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_12_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_13_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_13_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_14_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_14_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_15_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_15_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_8_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_8_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_9_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_9_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_374_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_374_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_494_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_506_p2 = (ap_sig_allocacmp_sY_1_load + 32'd1);

assign add_ln225_fu_450_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_462_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_380_p2 = (ap_phi_mux_indvar_flatten_phi_fu_356_p4 + 10'd1);

assign and_ln191_3_fu_432_p2 = (icmp_ln191_6_fu_420_p2 & icmp_ln191_5_fu_410_p2);

assign and_ln191_4_fu_438_p2 = (and_ln191_fu_426_p2 & and_ln191_3_fu_432_p2);

assign and_ln191_fu_426_p2 = (icmp_ln191_fu_390_p2 & icmp_ln191_4_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0));
end

always @ (*) begin
    ap_condition_2022 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_2372 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_2950 == 1'd0) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_431 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_714 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_718 = ((icmp_ln212_reg_2950 == 1'd1) & (icmp_ln216_reg_2959 == 1'd0) & (icmp_ln241_reg_2937 == 1'd0));
end

always @ (*) begin
    ap_condition_725 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_363 = 32'd0;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_1913_p2 = ((pool_window_0_V_27_fu_1883_p3 < pool_window_1_V_27_fu_1891_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_1997_p2 = ((pool_window_0_V_29_fu_1967_p3 < pool_window_1_V_29_fu_1975_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_2081_p2 = ((pool_window_0_V_31_fu_2051_p3 < pool_window_1_V_31_fu_2059_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_2165_p2 = ((pool_window_0_V_33_fu_2135_p3 < pool_window_1_V_33_fu_2143_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_2249_p2 = ((pool_window_0_V_35_fu_2219_p3 < pool_window_1_V_35_fu_2227_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_2333_p2 = ((pool_window_0_V_37_fu_2303_p3 < pool_window_1_V_37_fu_2311_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_1087_p2 = ((pool_window_2_V_fu_1058_p3 < pool_window_3_V_fu_1066_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_1109_p2 = ((select_ln65_fu_1079_p3 < select_ln65_17_fu_1101_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_1171_p2 = ((pool_window_2_V_9_fu_1142_p3 < pool_window_3_V_9_fu_1150_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_1193_p2 = ((select_ln65_19_fu_1163_p3 < select_ln65_21_fu_1185_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_1157_p2 = ((pool_window_0_V_9_fu_1127_p3 < pool_window_1_V_9_fu_1135_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_1255_p2 = ((pool_window_2_V_11_fu_1226_p3 < pool_window_3_V_11_fu_1234_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_21_fu_1277_p2 = ((select_ln65_23_fu_1247_p3 < select_ln65_25_fu_1269_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_22_fu_1325_p2 = ((pool_window_0_V_13_fu_1295_p3 < pool_window_1_V_13_fu_1303_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_23_fu_1339_p2 = ((pool_window_2_V_13_fu_1310_p3 < pool_window_3_V_13_fu_1318_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_1361_p2 = ((select_ln65_27_fu_1331_p3 < select_ln65_29_fu_1353_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_1409_p2 = ((pool_window_0_V_15_fu_1379_p3 < pool_window_1_V_15_fu_1387_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_1423_p2 = ((pool_window_2_V_15_fu_1394_p3 < pool_window_3_V_15_fu_1402_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_1445_p2 = ((select_ln65_31_fu_1415_p3 < select_ln65_33_fu_1437_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_1507_p2 = ((pool_window_2_V_17_fu_1478_p3 < pool_window_3_V_17_fu_1486_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_1529_p2 = ((select_ln65_35_fu_1499_p3 < select_ln65_37_fu_1521_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1241_p2 = ((pool_window_0_V_11_fu_1211_p3 < pool_window_1_V_11_fu_1219_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_1591_p2 = ((pool_window_2_V_19_fu_1562_p3 < pool_window_3_V_19_fu_1570_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_1613_p2 = ((select_ln65_39_fu_1583_p3 < select_ln65_41_fu_1605_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_1675_p2 = ((pool_window_2_V_21_fu_1646_p3 < pool_window_3_V_21_fu_1654_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_1697_p2 = ((select_ln65_43_fu_1667_p3 < select_ln65_45_fu_1689_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_1759_p2 = ((pool_window_2_V_23_fu_1730_p3 < pool_window_3_V_23_fu_1738_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_35_fu_1781_p2 = ((select_ln65_47_fu_1751_p3 < select_ln65_49_fu_1773_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_36_fu_1843_p2 = ((pool_window_2_V_25_fu_1814_p3 < pool_window_3_V_25_fu_1822_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_37_fu_1865_p2 = ((select_ln65_51_fu_1835_p3 < select_ln65_53_fu_1857_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_38_fu_1927_p2 = ((pool_window_2_V_27_fu_1898_p3 < pool_window_3_V_27_fu_1906_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_39_fu_1949_p2 = ((select_ln65_55_fu_1919_p3 < select_ln65_57_fu_1941_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_40_fu_2011_p2 = ((pool_window_2_V_29_fu_1982_p3 < pool_window_3_V_29_fu_1990_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_41_fu_2033_p2 = ((select_ln65_59_fu_2003_p3 < select_ln65_61_fu_2025_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_42_fu_2095_p2 = ((pool_window_2_V_31_fu_2066_p3 < pool_window_3_V_31_fu_2074_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_43_fu_2117_p2 = ((select_ln65_63_fu_2087_p3 < select_ln65_65_fu_2109_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_44_fu_2179_p2 = ((pool_window_2_V_33_fu_2150_p3 < pool_window_3_V_33_fu_2158_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_45_fu_2201_p2 = ((select_ln65_67_fu_2171_p3 < select_ln65_69_fu_2193_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_46_fu_2263_p2 = ((pool_window_2_V_35_fu_2234_p3 < pool_window_3_V_35_fu_2242_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_47_fu_2285_p2 = ((select_ln65_71_fu_2255_p3 < select_ln65_73_fu_2277_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_48_fu_2347_p2 = ((pool_window_2_V_37_fu_2318_p3 < pool_window_3_V_37_fu_2326_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_49_fu_2369_p2 = ((select_ln65_75_fu_2339_p3 < select_ln65_77_fu_2361_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_1493_p2 = ((pool_window_0_V_17_fu_1463_p3 < pool_window_1_V_17_fu_1471_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_1577_p2 = ((pool_window_0_V_19_fu_1547_p3 < pool_window_1_V_19_fu_1555_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1661_p2 = ((pool_window_0_V_21_fu_1631_p3 < pool_window_1_V_21_fu_1639_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_1745_p2 = ((pool_window_0_V_23_fu_1715_p3 < pool_window_1_V_23_fu_1723_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_1829_p2 = ((pool_window_0_V_25_fu_1799_p3 < pool_window_1_V_25_fu_1807_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1073_p2 = ((pool_window_0_V_fu_1043_p3 < pool_window_1_V_fu_1051_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_400_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_410_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_420_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_390_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_444_p2 = ((pX_1 == 32'd23) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_488_p2 = ((pY_1 == 32'd23) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_374_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_356_p4 == 10'd576) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op470 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op75 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_11_fu_1211_p3 = {{kernel_data_V_2_18}, {2'd0}};

assign pool_window_0_V_13_fu_1295_p3 = {{kernel_data_V_2_19}, {2'd0}};

assign pool_window_0_V_15_fu_1379_p3 = {{kernel_data_V_2_20}, {2'd0}};

assign pool_window_0_V_17_fu_1463_p3 = {{kernel_data_V_2_21}, {2'd0}};

assign pool_window_0_V_19_fu_1547_p3 = {{kernel_data_V_2_22}, {2'd0}};

assign pool_window_0_V_21_fu_1631_p3 = {{kernel_data_V_2_23}, {2'd0}};

assign pool_window_0_V_23_fu_1715_p3 = {{kernel_data_V_2_24}, {2'd0}};

assign pool_window_0_V_25_fu_1799_p3 = {{kernel_data_V_2_25}, {2'd0}};

assign pool_window_0_V_27_fu_1883_p3 = {{kernel_data_V_2_26}, {2'd0}};

assign pool_window_0_V_29_fu_1967_p3 = {{kernel_data_V_2_27}, {2'd0}};

assign pool_window_0_V_31_fu_2051_p3 = {{kernel_data_V_2_28}, {2'd0}};

assign pool_window_0_V_33_fu_2135_p3 = {{kernel_data_V_2_29}, {2'd0}};

assign pool_window_0_V_35_fu_2219_p3 = {{kernel_data_V_2_30}, {2'd0}};

assign pool_window_0_V_37_fu_2303_p3 = {{kernel_data_V_2_31}, {2'd0}};

assign pool_window_0_V_9_fu_1127_p3 = {{kernel_data_V_2_17}, {2'd0}};

assign pool_window_0_V_fu_1043_p3 = {{kernel_data_V_2_16}, {2'd0}};

assign pool_window_1_V_11_fu_1219_p3 = {{DataOut_V_24_reg_3076}, {2'd0}};

assign pool_window_1_V_13_fu_1303_p3 = {{DataOut_V_25_reg_3082}, {2'd0}};

assign pool_window_1_V_15_fu_1387_p3 = {{DataOut_V_26_reg_3088}, {2'd0}};

assign pool_window_1_V_17_fu_1471_p3 = {{DataOut_V_27_reg_3094}, {2'd0}};

assign pool_window_1_V_19_fu_1555_p3 = {{DataOut_V_28_reg_3100}, {2'd0}};

assign pool_window_1_V_21_fu_1639_p3 = {{DataOut_V_29_reg_3106}, {2'd0}};

assign pool_window_1_V_23_fu_1723_p3 = {{DataOut_V_30_reg_3112}, {2'd0}};

assign pool_window_1_V_25_fu_1807_p3 = {{DataOut_V_31_reg_3118}, {2'd0}};

assign pool_window_1_V_27_fu_1891_p3 = {{DataOut_V_32_reg_3124}, {2'd0}};

assign pool_window_1_V_29_fu_1975_p3 = {{DataOut_V_33_reg_3130}, {2'd0}};

assign pool_window_1_V_31_fu_2059_p3 = {{DataOut_V_34_reg_3136}, {2'd0}};

assign pool_window_1_V_33_fu_2143_p3 = {{DataOut_V_35_reg_3142}, {2'd0}};

assign pool_window_1_V_35_fu_2227_p3 = {{DataOut_V_36_reg_3148}, {2'd0}};

assign pool_window_1_V_37_fu_2311_p3 = {{DataOut_V_reg_3154}, {2'd0}};

assign pool_window_1_V_9_fu_1135_p3 = {{DataOut_V_23_reg_3070}, {2'd0}};

assign pool_window_1_V_fu_1051_p3 = {{DataOut_V_22_reg_3064}, {2'd0}};

assign pool_window_2_V_11_fu_1226_p3 = {{kernel_data_V_2_50}, {2'd0}};

assign pool_window_2_V_13_fu_1310_p3 = {{kernel_data_V_2_51}, {2'd0}};

assign pool_window_2_V_15_fu_1394_p3 = {{kernel_data_V_2_52}, {2'd0}};

assign pool_window_2_V_17_fu_1478_p3 = {{kernel_data_V_2_53}, {2'd0}};

assign pool_window_2_V_19_fu_1562_p3 = {{kernel_data_V_2_54}, {2'd0}};

assign pool_window_2_V_21_fu_1646_p3 = {{kernel_data_V_2_55}, {2'd0}};

assign pool_window_2_V_23_fu_1730_p3 = {{kernel_data_V_2_56}, {2'd0}};

assign pool_window_2_V_25_fu_1814_p3 = {{kernel_data_V_2_57}, {2'd0}};

assign pool_window_2_V_27_fu_1898_p3 = {{kernel_data_V_2_58}, {2'd0}};

assign pool_window_2_V_29_fu_1982_p3 = {{kernel_data_V_2_59}, {2'd0}};

assign pool_window_2_V_31_fu_2066_p3 = {{kernel_data_V_2_60}, {2'd0}};

assign pool_window_2_V_33_fu_2150_p3 = {{kernel_data_V_2_61}, {2'd0}};

assign pool_window_2_V_35_fu_2234_p3 = {{kernel_data_V_2_62}, {2'd0}};

assign pool_window_2_V_37_fu_2318_p3 = {{kernel_data_V_2_63}, {2'd0}};

assign pool_window_2_V_9_fu_1142_p3 = {{kernel_data_V_2_49}, {2'd0}};

assign pool_window_2_V_fu_1058_p3 = {{kernel_data_V_2_48}, {2'd0}};

assign pool_window_3_V_11_fu_1234_p3 = {{shift_buffer_1_2_V_reg_2980}, {2'd0}};

assign pool_window_3_V_13_fu_1318_p3 = {{shift_buffer_1_3_V_reg_2986}, {2'd0}};

assign pool_window_3_V_15_fu_1402_p3 = {{shift_buffer_1_4_V_reg_2992}, {2'd0}};

assign pool_window_3_V_17_fu_1486_p3 = {{shift_buffer_1_5_V_reg_2998}, {2'd0}};

assign pool_window_3_V_19_fu_1570_p3 = {{shift_buffer_1_6_V_reg_3004}, {2'd0}};

assign pool_window_3_V_21_fu_1654_p3 = {{shift_buffer_1_7_V_reg_3010}, {2'd0}};

assign pool_window_3_V_23_fu_1738_p3 = {{shift_buffer_1_8_V_reg_3016}, {2'd0}};

assign pool_window_3_V_25_fu_1822_p3 = {{shift_buffer_1_9_V_reg_3022}, {2'd0}};

assign pool_window_3_V_27_fu_1906_p3 = {{shift_buffer_1_10_V_reg_3028}, {2'd0}};

assign pool_window_3_V_29_fu_1990_p3 = {{shift_buffer_1_11_V_reg_3034}, {2'd0}};

assign pool_window_3_V_31_fu_2074_p3 = {{shift_buffer_1_12_V_reg_3040}, {2'd0}};

assign pool_window_3_V_33_fu_2158_p3 = {{shift_buffer_1_13_V_reg_3046}, {2'd0}};

assign pool_window_3_V_35_fu_2242_p3 = {{shift_buffer_1_14_V_reg_3052}, {2'd0}};

assign pool_window_3_V_37_fu_2326_p3 = {{shift_buffer_1_15_V_reg_3058}, {2'd0}};

assign pool_window_3_V_9_fu_1150_p3 = {{shift_buffer_1_1_V_reg_2974}, {2'd0}};

assign pool_window_3_V_fu_1066_p3 = {{shift_buffer_1_0_V_reg_2968}, {2'd0}};

assign res_V_data_0_V_din = {{tmp_25_fu_2405_p6}, {4'd0}};

assign res_V_data_10_V_din = {{tmp_35_fu_2745_p6}, {4'd0}};

assign res_V_data_11_V_din = {{tmp_36_fu_2779_p6}, {4'd0}};

assign res_V_data_12_V_din = {{tmp_37_fu_2813_p6}, {4'd0}};

assign res_V_data_13_V_din = {{tmp_38_fu_2847_p6}, {4'd0}};

assign res_V_data_14_V_din = {{tmp_39_fu_2881_p6}, {4'd0}};

assign res_V_data_15_V_din = {{tmp_40_fu_2915_p6}, {4'd0}};

assign res_V_data_1_V_din = {{tmp_26_fu_2439_p6}, {4'd0}};

assign res_V_data_2_V_din = {{tmp_27_fu_2473_p6}, {4'd0}};

assign res_V_data_3_V_din = {{tmp_28_fu_2507_p6}, {4'd0}};

assign res_V_data_4_V_din = {{tmp_29_fu_2541_p6}, {4'd0}};

assign res_V_data_5_V_din = {{tmp_30_fu_2575_p6}, {4'd0}};

assign res_V_data_6_V_din = {{tmp_31_fu_2609_p6}, {4'd0}};

assign res_V_data_7_V_din = {{tmp_32_fu_2643_p6}, {4'd0}};

assign res_V_data_8_V_din = {{tmp_33_fu_2677_p6}, {4'd0}};

assign res_V_data_9_V_din = {{tmp_34_fu_2711_p6}, {4'd0}};

assign select_ln222_fu_512_p3 = ((icmp_ln191_4_fu_400_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_506_p2);

assign select_ln227_fu_468_p3 = ((icmp_ln191_fu_390_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_462_p2);

assign select_ln65_17_fu_1101_p3 = ((icmp_ln1496_16_fu_1087_p2[0:0] === 1'b1) ? pool_window_3_V_fu_1066_p3 : pool_window_2_V_fu_1058_p3);

assign select_ln65_19_fu_1163_p3 = ((icmp_ln1496_1_fu_1157_p2[0:0] === 1'b1) ? pool_window_1_V_9_fu_1135_p3 : pool_window_0_V_9_fu_1127_p3);

assign select_ln65_20_fu_1093_p3 = ((icmp_ln1496_16_fu_1087_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_21_fu_1185_p3 = ((icmp_ln1496_18_fu_1171_p2[0:0] === 1'b1) ? pool_window_3_V_9_fu_1150_p3 : pool_window_2_V_9_fu_1142_p3);

assign select_ln65_22_fu_1119_p3 = ((icmp_ln1496_17_fu_1109_p2[0:0] === 1'b1) ? select_ln65_20_fu_1093_p3 : zext_ln65_fu_1115_p1);

assign select_ln65_23_fu_1247_p3 = ((icmp_ln1496_2_fu_1241_p2[0:0] === 1'b1) ? pool_window_1_V_11_fu_1219_p3 : pool_window_0_V_11_fu_1211_p3);

assign select_ln65_24_fu_1177_p3 = ((icmp_ln1496_18_fu_1171_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_25_fu_1269_p3 = ((icmp_ln1496_20_fu_1255_p2[0:0] === 1'b1) ? pool_window_3_V_11_fu_1234_p3 : pool_window_2_V_11_fu_1226_p3);

assign select_ln65_26_fu_1203_p3 = ((icmp_ln1496_19_fu_1193_p2[0:0] === 1'b1) ? select_ln65_24_fu_1177_p3 : zext_ln65_4_fu_1199_p1);

assign select_ln65_27_fu_1331_p3 = ((icmp_ln1496_22_fu_1325_p2[0:0] === 1'b1) ? pool_window_1_V_13_fu_1303_p3 : pool_window_0_V_13_fu_1295_p3);

assign select_ln65_28_fu_1261_p3 = ((icmp_ln1496_20_fu_1255_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_29_fu_1353_p3 = ((icmp_ln1496_23_fu_1339_p2[0:0] === 1'b1) ? pool_window_3_V_13_fu_1318_p3 : pool_window_2_V_13_fu_1310_p3);

assign select_ln65_30_fu_1287_p3 = ((icmp_ln1496_21_fu_1277_p2[0:0] === 1'b1) ? select_ln65_28_fu_1261_p3 : zext_ln65_5_fu_1283_p1);

assign select_ln65_31_fu_1415_p3 = ((icmp_ln1496_25_fu_1409_p2[0:0] === 1'b1) ? pool_window_1_V_15_fu_1387_p3 : pool_window_0_V_15_fu_1379_p3);

assign select_ln65_32_fu_1345_p3 = ((icmp_ln1496_23_fu_1339_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_33_fu_1437_p3 = ((icmp_ln1496_26_fu_1423_p2[0:0] === 1'b1) ? pool_window_3_V_15_fu_1402_p3 : pool_window_2_V_15_fu_1394_p3);

assign select_ln65_34_fu_1371_p3 = ((icmp_ln1496_24_fu_1361_p2[0:0] === 1'b1) ? select_ln65_32_fu_1345_p3 : zext_ln65_6_fu_1367_p1);

assign select_ln65_35_fu_1499_p3 = ((icmp_ln1496_5_fu_1493_p2[0:0] === 1'b1) ? pool_window_1_V_17_fu_1471_p3 : pool_window_0_V_17_fu_1463_p3);

assign select_ln65_36_fu_1429_p3 = ((icmp_ln1496_26_fu_1423_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_37_fu_1521_p3 = ((icmp_ln1496_28_fu_1507_p2[0:0] === 1'b1) ? pool_window_3_V_17_fu_1486_p3 : pool_window_2_V_17_fu_1478_p3);

assign select_ln65_38_fu_1455_p3 = ((icmp_ln1496_27_fu_1445_p2[0:0] === 1'b1) ? select_ln65_36_fu_1429_p3 : zext_ln65_7_fu_1451_p1);

assign select_ln65_39_fu_1583_p3 = ((icmp_ln1496_6_fu_1577_p2[0:0] === 1'b1) ? pool_window_1_V_19_fu_1555_p3 : pool_window_0_V_19_fu_1547_p3);

assign select_ln65_40_fu_1513_p3 = ((icmp_ln1496_28_fu_1507_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_41_fu_1605_p3 = ((icmp_ln1496_30_fu_1591_p2[0:0] === 1'b1) ? pool_window_3_V_19_fu_1570_p3 : pool_window_2_V_19_fu_1562_p3);

assign select_ln65_42_fu_1539_p3 = ((icmp_ln1496_29_fu_1529_p2[0:0] === 1'b1) ? select_ln65_40_fu_1513_p3 : zext_ln65_8_fu_1535_p1);

assign select_ln65_43_fu_1667_p3 = ((icmp_ln1496_7_fu_1661_p2[0:0] === 1'b1) ? pool_window_1_V_21_fu_1639_p3 : pool_window_0_V_21_fu_1631_p3);

assign select_ln65_44_fu_1597_p3 = ((icmp_ln1496_30_fu_1591_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_45_fu_1689_p3 = ((icmp_ln1496_32_fu_1675_p2[0:0] === 1'b1) ? pool_window_3_V_21_fu_1654_p3 : pool_window_2_V_21_fu_1646_p3);

assign select_ln65_46_fu_1623_p3 = ((icmp_ln1496_31_fu_1613_p2[0:0] === 1'b1) ? select_ln65_44_fu_1597_p3 : zext_ln65_9_fu_1619_p1);

assign select_ln65_47_fu_1751_p3 = ((icmp_ln1496_8_fu_1745_p2[0:0] === 1'b1) ? pool_window_1_V_23_fu_1723_p3 : pool_window_0_V_23_fu_1715_p3);

assign select_ln65_48_fu_1681_p3 = ((icmp_ln1496_32_fu_1675_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_49_fu_1773_p3 = ((icmp_ln1496_34_fu_1759_p2[0:0] === 1'b1) ? pool_window_3_V_23_fu_1738_p3 : pool_window_2_V_23_fu_1730_p3);

assign select_ln65_50_fu_1707_p3 = ((icmp_ln1496_33_fu_1697_p2[0:0] === 1'b1) ? select_ln65_48_fu_1681_p3 : zext_ln65_10_fu_1703_p1);

assign select_ln65_51_fu_1835_p3 = ((icmp_ln1496_9_fu_1829_p2[0:0] === 1'b1) ? pool_window_1_V_25_fu_1807_p3 : pool_window_0_V_25_fu_1799_p3);

assign select_ln65_52_fu_1765_p3 = ((icmp_ln1496_34_fu_1759_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_53_fu_1857_p3 = ((icmp_ln1496_36_fu_1843_p2[0:0] === 1'b1) ? pool_window_3_V_25_fu_1822_p3 : pool_window_2_V_25_fu_1814_p3);

assign select_ln65_54_fu_1791_p3 = ((icmp_ln1496_35_fu_1781_p2[0:0] === 1'b1) ? select_ln65_52_fu_1765_p3 : zext_ln65_11_fu_1787_p1);

assign select_ln65_55_fu_1919_p3 = ((icmp_ln1496_10_fu_1913_p2[0:0] === 1'b1) ? pool_window_1_V_27_fu_1891_p3 : pool_window_0_V_27_fu_1883_p3);

assign select_ln65_56_fu_1849_p3 = ((icmp_ln1496_36_fu_1843_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_57_fu_1941_p3 = ((icmp_ln1496_38_fu_1927_p2[0:0] === 1'b1) ? pool_window_3_V_27_fu_1906_p3 : pool_window_2_V_27_fu_1898_p3);

assign select_ln65_58_fu_1875_p3 = ((icmp_ln1496_37_fu_1865_p2[0:0] === 1'b1) ? select_ln65_56_fu_1849_p3 : zext_ln65_12_fu_1871_p1);

assign select_ln65_59_fu_2003_p3 = ((icmp_ln1496_11_fu_1997_p2[0:0] === 1'b1) ? pool_window_1_V_29_fu_1975_p3 : pool_window_0_V_29_fu_1967_p3);

assign select_ln65_60_fu_1933_p3 = ((icmp_ln1496_38_fu_1927_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_61_fu_2025_p3 = ((icmp_ln1496_40_fu_2011_p2[0:0] === 1'b1) ? pool_window_3_V_29_fu_1990_p3 : pool_window_2_V_29_fu_1982_p3);

assign select_ln65_62_fu_1959_p3 = ((icmp_ln1496_39_fu_1949_p2[0:0] === 1'b1) ? select_ln65_60_fu_1933_p3 : zext_ln65_13_fu_1955_p1);

assign select_ln65_63_fu_2087_p3 = ((icmp_ln1496_12_fu_2081_p2[0:0] === 1'b1) ? pool_window_1_V_31_fu_2059_p3 : pool_window_0_V_31_fu_2051_p3);

assign select_ln65_64_fu_2017_p3 = ((icmp_ln1496_40_fu_2011_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_65_fu_2109_p3 = ((icmp_ln1496_42_fu_2095_p2[0:0] === 1'b1) ? pool_window_3_V_31_fu_2074_p3 : pool_window_2_V_31_fu_2066_p3);

assign select_ln65_66_fu_2043_p3 = ((icmp_ln1496_41_fu_2033_p2[0:0] === 1'b1) ? select_ln65_64_fu_2017_p3 : zext_ln65_14_fu_2039_p1);

assign select_ln65_67_fu_2171_p3 = ((icmp_ln1496_13_fu_2165_p2[0:0] === 1'b1) ? pool_window_1_V_33_fu_2143_p3 : pool_window_0_V_33_fu_2135_p3);

assign select_ln65_68_fu_2101_p3 = ((icmp_ln1496_42_fu_2095_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_69_fu_2193_p3 = ((icmp_ln1496_44_fu_2179_p2[0:0] === 1'b1) ? pool_window_3_V_33_fu_2158_p3 : pool_window_2_V_33_fu_2150_p3);

assign select_ln65_70_fu_2127_p3 = ((icmp_ln1496_43_fu_2117_p2[0:0] === 1'b1) ? select_ln65_68_fu_2101_p3 : zext_ln65_15_fu_2123_p1);

assign select_ln65_71_fu_2255_p3 = ((icmp_ln1496_14_fu_2249_p2[0:0] === 1'b1) ? pool_window_1_V_35_fu_2227_p3 : pool_window_0_V_35_fu_2219_p3);

assign select_ln65_72_fu_2185_p3 = ((icmp_ln1496_44_fu_2179_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_73_fu_2277_p3 = ((icmp_ln1496_46_fu_2263_p2[0:0] === 1'b1) ? pool_window_3_V_35_fu_2242_p3 : pool_window_2_V_35_fu_2234_p3);

assign select_ln65_74_fu_2211_p3 = ((icmp_ln1496_45_fu_2201_p2[0:0] === 1'b1) ? select_ln65_72_fu_2185_p3 : zext_ln65_16_fu_2207_p1);

assign select_ln65_75_fu_2339_p3 = ((icmp_ln1496_15_fu_2333_p2[0:0] === 1'b1) ? pool_window_1_V_37_fu_2311_p3 : pool_window_0_V_37_fu_2303_p3);

assign select_ln65_76_fu_2269_p3 = ((icmp_ln1496_46_fu_2263_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_77_fu_2361_p3 = ((icmp_ln1496_48_fu_2347_p2[0:0] === 1'b1) ? pool_window_3_V_37_fu_2326_p3 : pool_window_2_V_37_fu_2318_p3);

assign select_ln65_78_fu_2295_p3 = ((icmp_ln1496_47_fu_2285_p2[0:0] === 1'b1) ? select_ln65_76_fu_2269_p3 : zext_ln65_17_fu_2291_p1);

assign select_ln65_79_fu_2353_p3 = ((icmp_ln1496_48_fu_2347_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_80_fu_2379_p3 = ((icmp_ln1496_49_fu_2369_p2[0:0] === 1'b1) ? select_ln65_79_fu_2353_p3 : zext_ln65_18_fu_2375_p1);

assign select_ln65_fu_1079_p3 = ((icmp_ln1496_fu_1073_p2[0:0] === 1'b1) ? pool_window_1_V_fu_1051_p3 : pool_window_0_V_fu_1043_p3);

assign start_out = real_start;

assign tmp_25_fu_2405_p1 = pool_window_0_V_reg_3160;

assign tmp_25_fu_2405_p2 = pool_window_1_V_reg_3165;

assign tmp_25_fu_2405_p3 = pool_window_2_V_reg_3170;

assign tmp_25_fu_2405_p4 = pool_window_3_V_reg_3175;

assign tmp_26_fu_2439_p1 = pool_window_0_V_9_reg_3185;

assign tmp_26_fu_2439_p2 = pool_window_1_V_9_reg_3190;

assign tmp_26_fu_2439_p3 = pool_window_2_V_9_reg_3195;

assign tmp_26_fu_2439_p4 = pool_window_3_V_9_reg_3200;

assign tmp_27_fu_2473_p1 = pool_window_0_V_11_reg_3210;

assign tmp_27_fu_2473_p2 = pool_window_1_V_11_reg_3215;

assign tmp_27_fu_2473_p3 = pool_window_2_V_11_reg_3220;

assign tmp_27_fu_2473_p4 = pool_window_3_V_11_reg_3225;

assign tmp_28_fu_2507_p1 = pool_window_0_V_13_reg_3235;

assign tmp_28_fu_2507_p2 = pool_window_1_V_13_reg_3240;

assign tmp_28_fu_2507_p3 = pool_window_2_V_13_reg_3245;

assign tmp_28_fu_2507_p4 = pool_window_3_V_13_reg_3250;

assign tmp_29_fu_2541_p1 = pool_window_0_V_15_reg_3260;

assign tmp_29_fu_2541_p2 = pool_window_1_V_15_reg_3265;

assign tmp_29_fu_2541_p3 = pool_window_2_V_15_reg_3270;

assign tmp_29_fu_2541_p4 = pool_window_3_V_15_reg_3275;

assign tmp_30_fu_2575_p1 = pool_window_0_V_17_reg_3285;

assign tmp_30_fu_2575_p2 = pool_window_1_V_17_reg_3290;

assign tmp_30_fu_2575_p3 = pool_window_2_V_17_reg_3295;

assign tmp_30_fu_2575_p4 = pool_window_3_V_17_reg_3300;

assign tmp_31_fu_2609_p1 = pool_window_0_V_19_reg_3310;

assign tmp_31_fu_2609_p2 = pool_window_1_V_19_reg_3315;

assign tmp_31_fu_2609_p3 = pool_window_2_V_19_reg_3320;

assign tmp_31_fu_2609_p4 = pool_window_3_V_19_reg_3325;

assign tmp_32_fu_2643_p1 = pool_window_0_V_21_reg_3335;

assign tmp_32_fu_2643_p2 = pool_window_1_V_21_reg_3340;

assign tmp_32_fu_2643_p3 = pool_window_2_V_21_reg_3345;

assign tmp_32_fu_2643_p4 = pool_window_3_V_21_reg_3350;

assign tmp_33_fu_2677_p1 = pool_window_0_V_23_reg_3360;

assign tmp_33_fu_2677_p2 = pool_window_1_V_23_reg_3365;

assign tmp_33_fu_2677_p3 = pool_window_2_V_23_reg_3370;

assign tmp_33_fu_2677_p4 = pool_window_3_V_23_reg_3375;

assign tmp_34_fu_2711_p1 = pool_window_0_V_25_reg_3385;

assign tmp_34_fu_2711_p2 = pool_window_1_V_25_reg_3390;

assign tmp_34_fu_2711_p3 = pool_window_2_V_25_reg_3395;

assign tmp_34_fu_2711_p4 = pool_window_3_V_25_reg_3400;

assign tmp_35_fu_2745_p1 = pool_window_0_V_27_reg_3410;

assign tmp_35_fu_2745_p2 = pool_window_1_V_27_reg_3415;

assign tmp_35_fu_2745_p3 = pool_window_2_V_27_reg_3420;

assign tmp_35_fu_2745_p4 = pool_window_3_V_27_reg_3425;

assign tmp_36_fu_2779_p1 = pool_window_0_V_29_reg_3435;

assign tmp_36_fu_2779_p2 = pool_window_1_V_29_reg_3440;

assign tmp_36_fu_2779_p3 = pool_window_2_V_29_reg_3445;

assign tmp_36_fu_2779_p4 = pool_window_3_V_29_reg_3450;

assign tmp_37_fu_2813_p1 = pool_window_0_V_31_reg_3460;

assign tmp_37_fu_2813_p2 = pool_window_1_V_31_reg_3465;

assign tmp_37_fu_2813_p3 = pool_window_2_V_31_reg_3470;

assign tmp_37_fu_2813_p4 = pool_window_3_V_31_reg_3475;

assign tmp_38_fu_2847_p1 = pool_window_0_V_33_reg_3485;

assign tmp_38_fu_2847_p2 = pool_window_1_V_33_reg_3490;

assign tmp_38_fu_2847_p3 = pool_window_2_V_33_reg_3495;

assign tmp_38_fu_2847_p4 = pool_window_3_V_33_reg_3500;

assign tmp_39_fu_2881_p1 = pool_window_0_V_35_reg_3510;

assign tmp_39_fu_2881_p2 = pool_window_1_V_35_reg_3515;

assign tmp_39_fu_2881_p3 = pool_window_2_V_35_reg_3520;

assign tmp_39_fu_2881_p4 = pool_window_3_V_35_reg_3525;

assign tmp_40_fu_2915_p1 = pool_window_0_V_37_reg_3535;

assign tmp_40_fu_2915_p2 = pool_window_1_V_37_reg_3540;

assign tmp_40_fu_2915_p3 = pool_window_2_V_37_reg_3545;

assign tmp_40_fu_2915_p4 = pool_window_3_V_37_reg_3550;

assign zext_ln65_10_fu_1703_p1 = icmp_ln1496_7_fu_1661_p2;

assign zext_ln65_11_fu_1787_p1 = icmp_ln1496_8_fu_1745_p2;

assign zext_ln65_12_fu_1871_p1 = icmp_ln1496_9_fu_1829_p2;

assign zext_ln65_13_fu_1955_p1 = icmp_ln1496_10_fu_1913_p2;

assign zext_ln65_14_fu_2039_p1 = icmp_ln1496_11_fu_1997_p2;

assign zext_ln65_15_fu_2123_p1 = icmp_ln1496_12_fu_2081_p2;

assign zext_ln65_16_fu_2207_p1 = icmp_ln1496_13_fu_2165_p2;

assign zext_ln65_17_fu_2291_p1 = icmp_ln1496_14_fu_2249_p2;

assign zext_ln65_18_fu_2375_p1 = icmp_ln1496_15_fu_2333_p2;

assign zext_ln65_4_fu_1199_p1 = icmp_ln1496_1_fu_1157_p2;

assign zext_ln65_5_fu_1283_p1 = icmp_ln1496_2_fu_1241_p2;

assign zext_ln65_6_fu_1367_p1 = icmp_ln1496_22_fu_1325_p2;

assign zext_ln65_7_fu_1451_p1 = icmp_ln1496_25_fu_1409_p2;

assign zext_ln65_8_fu_1535_p1 = icmp_ln1496_5_fu_1493_p2;

assign zext_ln65_9_fu_1619_p1 = icmp_ln1496_6_fu_1577_p2;

assign zext_ln65_fu_1115_p1 = icmp_ln1496_fu_1073_p2;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_3160[1:0] <= 2'b00;
    pool_window_1_V_reg_3165[1:0] <= 2'b00;
    pool_window_2_V_reg_3170[1:0] <= 2'b00;
    pool_window_3_V_reg_3175[1:0] <= 2'b00;
    pool_window_0_V_9_reg_3185[1:0] <= 2'b00;
    pool_window_1_V_9_reg_3190[1:0] <= 2'b00;
    pool_window_2_V_9_reg_3195[1:0] <= 2'b00;
    pool_window_3_V_9_reg_3200[1:0] <= 2'b00;
    pool_window_0_V_11_reg_3210[1:0] <= 2'b00;
    pool_window_1_V_11_reg_3215[1:0] <= 2'b00;
    pool_window_2_V_11_reg_3220[1:0] <= 2'b00;
    pool_window_3_V_11_reg_3225[1:0] <= 2'b00;
    pool_window_0_V_13_reg_3235[1:0] <= 2'b00;
    pool_window_1_V_13_reg_3240[1:0] <= 2'b00;
    pool_window_2_V_13_reg_3245[1:0] <= 2'b00;
    pool_window_3_V_13_reg_3250[1:0] <= 2'b00;
    pool_window_0_V_15_reg_3260[1:0] <= 2'b00;
    pool_window_1_V_15_reg_3265[1:0] <= 2'b00;
    pool_window_2_V_15_reg_3270[1:0] <= 2'b00;
    pool_window_3_V_15_reg_3275[1:0] <= 2'b00;
    pool_window_0_V_17_reg_3285[1:0] <= 2'b00;
    pool_window_1_V_17_reg_3290[1:0] <= 2'b00;
    pool_window_2_V_17_reg_3295[1:0] <= 2'b00;
    pool_window_3_V_17_reg_3300[1:0] <= 2'b00;
    pool_window_0_V_19_reg_3310[1:0] <= 2'b00;
    pool_window_1_V_19_reg_3315[1:0] <= 2'b00;
    pool_window_2_V_19_reg_3320[1:0] <= 2'b00;
    pool_window_3_V_19_reg_3325[1:0] <= 2'b00;
    pool_window_0_V_21_reg_3335[1:0] <= 2'b00;
    pool_window_1_V_21_reg_3340[1:0] <= 2'b00;
    pool_window_2_V_21_reg_3345[1:0] <= 2'b00;
    pool_window_3_V_21_reg_3350[1:0] <= 2'b00;
    pool_window_0_V_23_reg_3360[1:0] <= 2'b00;
    pool_window_1_V_23_reg_3365[1:0] <= 2'b00;
    pool_window_2_V_23_reg_3370[1:0] <= 2'b00;
    pool_window_3_V_23_reg_3375[1:0] <= 2'b00;
    pool_window_0_V_25_reg_3385[1:0] <= 2'b00;
    pool_window_1_V_25_reg_3390[1:0] <= 2'b00;
    pool_window_2_V_25_reg_3395[1:0] <= 2'b00;
    pool_window_3_V_25_reg_3400[1:0] <= 2'b00;
    pool_window_0_V_27_reg_3410[1:0] <= 2'b00;
    pool_window_1_V_27_reg_3415[1:0] <= 2'b00;
    pool_window_2_V_27_reg_3420[1:0] <= 2'b00;
    pool_window_3_V_27_reg_3425[1:0] <= 2'b00;
    pool_window_0_V_29_reg_3435[1:0] <= 2'b00;
    pool_window_1_V_29_reg_3440[1:0] <= 2'b00;
    pool_window_2_V_29_reg_3445[1:0] <= 2'b00;
    pool_window_3_V_29_reg_3450[1:0] <= 2'b00;
    pool_window_0_V_31_reg_3460[1:0] <= 2'b00;
    pool_window_1_V_31_reg_3465[1:0] <= 2'b00;
    pool_window_2_V_31_reg_3470[1:0] <= 2'b00;
    pool_window_3_V_31_reg_3475[1:0] <= 2'b00;
    pool_window_0_V_33_reg_3485[1:0] <= 2'b00;
    pool_window_1_V_33_reg_3490[1:0] <= 2'b00;
    pool_window_2_V_33_reg_3495[1:0] <= 2'b00;
    pool_window_3_V_33_reg_3500[1:0] <= 2'b00;
    pool_window_0_V_35_reg_3510[1:0] <= 2'b00;
    pool_window_1_V_35_reg_3515[1:0] <= 2'b00;
    pool_window_2_V_35_reg_3520[1:0] <= 2'b00;
    pool_window_3_V_35_reg_3525[1:0] <= 2'b00;
    pool_window_0_V_37_reg_3535[1:0] <= 2'b00;
    pool_window_1_V_37_reg_3540[1:0] <= 2'b00;
    pool_window_2_V_37_reg_3545[1:0] <= 2'b00;
    pool_window_3_V_37_reg_3550[1:0] <= 2'b00;
end

endmodule //pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s
