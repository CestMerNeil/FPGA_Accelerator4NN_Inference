// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_4u_array_ap_ufixed_4_0_4_0_0_4u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [3:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [3:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [3:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [3:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_679;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_679_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [6:0] i_0_reg_120;
wire   [0:0] icmp_ln41_fu_131_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op21;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op109;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_679_pp0_iter1_reg;
wire   [6:0] i_fu_137_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_0_V_reg_688;
reg   [15:0] tmp_data_1_V_reg_697;
reg   [15:0] tmp_data_2_V_reg_706;
reg   [15:0] tmp_data_3_V_reg_715;
wire   [0:0] icmp_ln718_fu_163_p2;
reg   [0:0] icmp_ln718_reg_724;
wire   [0:0] icmp_ln879_fu_179_p2;
reg   [0:0] icmp_ln879_reg_729;
wire   [0:0] icmp_ln768_fu_185_p2;
reg   [0:0] icmp_ln768_reg_734;
wire   [0:0] icmp_ln718_1_fu_195_p2;
reg   [0:0] icmp_ln718_1_reg_739;
wire   [0:0] icmp_ln879_1_fu_211_p2;
reg   [0:0] icmp_ln879_1_reg_744;
wire   [0:0] icmp_ln768_1_fu_217_p2;
reg   [0:0] icmp_ln768_1_reg_749;
wire   [0:0] icmp_ln718_2_fu_227_p2;
reg   [0:0] icmp_ln718_2_reg_754;
wire   [0:0] icmp_ln879_2_fu_243_p2;
reg   [0:0] icmp_ln879_2_reg_759;
wire   [0:0] icmp_ln768_2_fu_249_p2;
reg   [0:0] icmp_ln768_2_reg_764;
wire   [0:0] icmp_ln718_3_fu_259_p2;
reg   [0:0] icmp_ln718_3_reg_769;
wire   [0:0] icmp_ln879_3_fu_275_p2;
reg   [0:0] icmp_ln879_3_reg_774;
wire   [0:0] icmp_ln768_3_fu_281_p2;
reg   [0:0] icmp_ln768_3_reg_779;
wire   [3:0] tmp_data_0_V_1_fu_377_p3;
reg   [3:0] tmp_data_0_V_1_reg_784;
wire   [3:0] tmp_data_1_V_1_fu_475_p3;
reg   [3:0] tmp_data_1_V_1_reg_789;
wire   [3:0] tmp_data_2_V_1_fu_573_p3;
reg   [3:0] tmp_data_2_V_1_reg_794;
wire   [3:0] tmp_data_3_V_1_fu_671_p3;
reg   [3:0] tmp_data_3_V_1_reg_799;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln718_fu_159_p1;
wire   [5:0] p_Result_s_fu_169_p4;
wire   [4:0] trunc_ln718_1_fu_191_p1;
wire   [5:0] p_Result_10_1_fu_201_p4;
wire   [4:0] trunc_ln718_2_fu_223_p1;
wire   [5:0] p_Result_10_2_fu_233_p4;
wire   [4:0] trunc_ln718_3_fu_255_p1;
wire   [5:0] p_Result_10_3_fu_265_p4;
wire   [0:0] tmp_46_fu_301_p3;
wire   [0:0] or_ln412_fu_315_p2;
wire   [0:0] tmp_48_fu_320_p3;
wire   [0:0] and_ln415_fu_327_p2;
wire   [3:0] zext_ln415_fu_333_p1;
wire   [3:0] trunc_ln_fu_292_p4;
wire   [3:0] add_ln415_fu_337_p2;
wire   [0:0] tmp_49_fu_343_p3;
wire   [0:0] tmp_47_fu_308_p3;
wire   [0:0] xor_ln416_fu_351_p2;
wire   [0:0] and_ln416_fu_357_p2;
wire   [0:0] select_ln777_fu_363_p3;
wire   [0:0] icmp_ln1494_fu_287_p2;
wire   [3:0] select_ln340_fu_369_p3;
wire   [0:0] tmp_50_fu_399_p3;
wire   [0:0] or_ln412_1_fu_413_p2;
wire   [0:0] tmp_52_fu_418_p3;
wire   [0:0] and_ln415_1_fu_425_p2;
wire   [3:0] zext_ln415_1_fu_431_p1;
wire   [3:0] trunc_ln708_s_fu_390_p4;
wire   [3:0] add_ln415_1_fu_435_p2;
wire   [0:0] tmp_53_fu_441_p3;
wire   [0:0] tmp_51_fu_406_p3;
wire   [0:0] xor_ln416_1_fu_449_p2;
wire   [0:0] and_ln416_1_fu_455_p2;
wire   [0:0] select_ln777_1_fu_461_p3;
wire   [0:0] icmp_ln1494_1_fu_385_p2;
wire   [3:0] select_ln340_1_fu_467_p3;
wire   [0:0] tmp_54_fu_497_p3;
wire   [0:0] or_ln412_2_fu_511_p2;
wire   [0:0] tmp_56_fu_516_p3;
wire   [0:0] and_ln415_2_fu_523_p2;
wire   [3:0] zext_ln415_2_fu_529_p1;
wire   [3:0] trunc_ln708_1_fu_488_p4;
wire   [3:0] add_ln415_2_fu_533_p2;
wire   [0:0] tmp_57_fu_539_p3;
wire   [0:0] tmp_55_fu_504_p3;
wire   [0:0] xor_ln416_2_fu_547_p2;
wire   [0:0] and_ln416_2_fu_553_p2;
wire   [0:0] select_ln777_2_fu_559_p3;
wire   [0:0] icmp_ln1494_2_fu_483_p2;
wire   [3:0] select_ln340_2_fu_565_p3;
wire   [0:0] tmp_58_fu_595_p3;
wire   [0:0] or_ln412_3_fu_609_p2;
wire   [0:0] tmp_60_fu_614_p3;
wire   [0:0] and_ln415_3_fu_621_p2;
wire   [3:0] zext_ln415_3_fu_627_p1;
wire   [3:0] trunc_ln708_2_fu_586_p4;
wire   [3:0] add_ln415_3_fu_631_p2;
wire   [0:0] tmp_61_fu_637_p3;
wire   [0:0] tmp_59_fu_602_p3;
wire   [0:0] xor_ln416_3_fu_645_p2;
wire   [0:0] and_ln416_3_fu_651_p2;
wire   [0:0] select_ln777_3_fu_657_p3;
wire   [0:0] icmp_ln1494_3_fu_581_p2;
wire   [3:0] select_ln340_3_fu_663_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_120 <= i_fu_137_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_120 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln41_reg_679 <= icmp_ln41_fu_131_p2;
        icmp_ln41_reg_679_pp0_iter1_reg <= icmp_ln41_reg_679;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_679_pp0_iter2_reg <= icmp_ln41_reg_679_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln718_1_reg_739 <= icmp_ln718_1_fu_195_p2;
        icmp_ln718_2_reg_754 <= icmp_ln718_2_fu_227_p2;
        icmp_ln718_3_reg_769 <= icmp_ln718_3_fu_259_p2;
        icmp_ln718_reg_724 <= icmp_ln718_fu_163_p2;
        icmp_ln768_1_reg_749 <= icmp_ln768_1_fu_217_p2;
        icmp_ln768_2_reg_764 <= icmp_ln768_2_fu_249_p2;
        icmp_ln768_3_reg_779 <= icmp_ln768_3_fu_281_p2;
        icmp_ln768_reg_734 <= icmp_ln768_fu_185_p2;
        icmp_ln879_1_reg_744 <= icmp_ln879_1_fu_211_p2;
        icmp_ln879_2_reg_759 <= icmp_ln879_2_fu_243_p2;
        icmp_ln879_3_reg_774 <= icmp_ln879_3_fu_275_p2;
        icmp_ln879_reg_729 <= icmp_ln879_fu_179_p2;
        tmp_data_0_V_reg_688 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_697 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_706 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_715 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_679_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_1_reg_784 <= tmp_data_0_V_1_fu_377_p3;
        tmp_data_1_V_1_reg_789 <= tmp_data_1_V_1_fu_475_p3;
        tmp_data_2_V_1_reg_794 <= tmp_data_2_V_1_fu_573_p3;
        tmp_data_3_V_1_reg_799 <= tmp_data_3_V_1_fu_671_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_131_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_131_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_131_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_435_p2 = (zext_ln415_1_fu_431_p1 + trunc_ln708_s_fu_390_p4);

assign add_ln415_2_fu_533_p2 = (zext_ln415_2_fu_529_p1 + trunc_ln708_1_fu_488_p4);

assign add_ln415_3_fu_631_p2 = (zext_ln415_3_fu_627_p1 + trunc_ln708_2_fu_586_p4);

assign add_ln415_fu_337_p2 = (zext_ln415_fu_333_p1 + trunc_ln_fu_292_p4);

assign and_ln415_1_fu_425_p2 = (tmp_52_fu_418_p3 & or_ln412_1_fu_413_p2);

assign and_ln415_2_fu_523_p2 = (tmp_56_fu_516_p3 & or_ln412_2_fu_511_p2);

assign and_ln415_3_fu_621_p2 = (tmp_60_fu_614_p3 & or_ln412_3_fu_609_p2);

assign and_ln415_fu_327_p2 = (tmp_48_fu_320_p3 & or_ln412_fu_315_p2);

assign and_ln416_1_fu_455_p2 = (xor_ln416_1_fu_449_p2 & tmp_51_fu_406_p3);

assign and_ln416_2_fu_553_p2 = (xor_ln416_2_fu_547_p2 & tmp_55_fu_504_p3);

assign and_ln416_3_fu_651_p2 = (xor_ln416_3_fu_645_p2 & tmp_59_fu_602_p3);

assign and_ln416_fu_357_p2 = (xor_ln416_fu_351_p2 & tmp_47_fu_308_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_679 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_679 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_679 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln41_reg_679 == 1'd0) & (io_acc_block_signal_op21 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln41_reg_679_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_137_p2 = (i_0_reg_120 + 7'd1);

assign icmp_ln1494_1_fu_385_p2 = (($signed(tmp_data_1_V_reg_697) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_483_p2 = (($signed(tmp_data_2_V_reg_706) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_581_p2 = (($signed(tmp_data_3_V_reg_715) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_287_p2 = (($signed(tmp_data_0_V_reg_688) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_131_p2 = ((i_0_reg_120 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln718_1_fu_195_p2 = ((trunc_ln718_1_fu_191_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_2_fu_227_p2 = ((trunc_ln718_2_fu_223_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_3_fu_259_p2 = ((trunc_ln718_3_fu_255_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_163_p2 = ((trunc_ln718_fu_159_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_217_p2 = ((p_Result_10_1_fu_201_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_249_p2 = ((p_Result_10_2_fu_233_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_281_p2 = ((p_Result_10_3_fu_265_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_185_p2 = ((p_Result_s_fu_169_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_211_p2 = ((p_Result_10_1_fu_201_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_243_p2 = ((p_Result_10_2_fu_233_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_275_p2 = ((p_Result_10_3_fu_265_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_179_p2 = ((p_Result_s_fu_169_p4 == 6'd63) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op109 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op21 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_1_fu_413_p2 = (tmp_50_fu_399_p3 | icmp_ln718_1_reg_739);

assign or_ln412_2_fu_511_p2 = (tmp_54_fu_497_p3 | icmp_ln718_2_reg_754);

assign or_ln412_3_fu_609_p2 = (tmp_58_fu_595_p3 | icmp_ln718_3_reg_769);

assign or_ln412_fu_315_p2 = (tmp_46_fu_301_p3 | icmp_ln718_reg_724);

assign p_Result_10_1_fu_201_p4 = {{data_V_data_1_V_dout[15:10]}};

assign p_Result_10_2_fu_233_p4 = {{data_V_data_2_V_dout[15:10]}};

assign p_Result_10_3_fu_265_p4 = {{data_V_data_3_V_dout[15:10]}};

assign p_Result_s_fu_169_p4 = {{data_V_data_0_V_dout[15:10]}};

assign res_V_data_0_V_din = tmp_data_0_V_1_reg_784;

assign res_V_data_1_V_din = tmp_data_1_V_1_reg_789;

assign res_V_data_2_V_din = tmp_data_2_V_1_reg_794;

assign res_V_data_3_V_din = tmp_data_3_V_1_reg_799;

assign select_ln340_1_fu_467_p3 = ((select_ln777_1_fu_461_p3[0:0] === 1'b1) ? add_ln415_1_fu_435_p2 : 4'd15);

assign select_ln340_2_fu_565_p3 = ((select_ln777_2_fu_559_p3[0:0] === 1'b1) ? add_ln415_2_fu_533_p2 : 4'd15);

assign select_ln340_3_fu_663_p3 = ((select_ln777_3_fu_657_p3[0:0] === 1'b1) ? add_ln415_3_fu_631_p2 : 4'd15);

assign select_ln340_fu_369_p3 = ((select_ln777_fu_363_p3[0:0] === 1'b1) ? add_ln415_fu_337_p2 : 4'd15);

assign select_ln777_1_fu_461_p3 = ((and_ln416_1_fu_455_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_744 : icmp_ln768_1_reg_749);

assign select_ln777_2_fu_559_p3 = ((and_ln416_2_fu_553_p2[0:0] === 1'b1) ? icmp_ln879_2_reg_759 : icmp_ln768_2_reg_764);

assign select_ln777_3_fu_657_p3 = ((and_ln416_3_fu_651_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_774 : icmp_ln768_3_reg_779);

assign select_ln777_fu_363_p3 = ((and_ln416_fu_357_p2[0:0] === 1'b1) ? icmp_ln879_reg_729 : icmp_ln768_reg_734);

assign start_out = real_start;

assign tmp_46_fu_301_p3 = tmp_data_0_V_reg_688[32'd6];

assign tmp_47_fu_308_p3 = tmp_data_0_V_reg_688[32'd9];

assign tmp_48_fu_320_p3 = tmp_data_0_V_reg_688[32'd5];

assign tmp_49_fu_343_p3 = add_ln415_fu_337_p2[32'd3];

assign tmp_50_fu_399_p3 = tmp_data_1_V_reg_697[32'd6];

assign tmp_51_fu_406_p3 = tmp_data_1_V_reg_697[32'd9];

assign tmp_52_fu_418_p3 = tmp_data_1_V_reg_697[32'd5];

assign tmp_53_fu_441_p3 = add_ln415_1_fu_435_p2[32'd3];

assign tmp_54_fu_497_p3 = tmp_data_2_V_reg_706[32'd6];

assign tmp_55_fu_504_p3 = tmp_data_2_V_reg_706[32'd9];

assign tmp_56_fu_516_p3 = tmp_data_2_V_reg_706[32'd5];

assign tmp_57_fu_539_p3 = add_ln415_2_fu_533_p2[32'd3];

assign tmp_58_fu_595_p3 = tmp_data_3_V_reg_715[32'd6];

assign tmp_59_fu_602_p3 = tmp_data_3_V_reg_715[32'd9];

assign tmp_60_fu_614_p3 = tmp_data_3_V_reg_715[32'd5];

assign tmp_61_fu_637_p3 = add_ln415_3_fu_631_p2[32'd3];

assign tmp_data_0_V_1_fu_377_p3 = ((icmp_ln1494_fu_287_p2[0:0] === 1'b1) ? select_ln340_fu_369_p3 : 4'd0);

assign tmp_data_1_V_1_fu_475_p3 = ((icmp_ln1494_1_fu_385_p2[0:0] === 1'b1) ? select_ln340_1_fu_467_p3 : 4'd0);

assign tmp_data_2_V_1_fu_573_p3 = ((icmp_ln1494_2_fu_483_p2[0:0] === 1'b1) ? select_ln340_2_fu_565_p3 : 4'd0);

assign tmp_data_3_V_1_fu_671_p3 = ((icmp_ln1494_3_fu_581_p2[0:0] === 1'b1) ? select_ln340_3_fu_663_p3 : 4'd0);

assign trunc_ln708_1_fu_488_p4 = {{tmp_data_2_V_reg_706[9:6]}};

assign trunc_ln708_2_fu_586_p4 = {{tmp_data_3_V_reg_715[9:6]}};

assign trunc_ln708_s_fu_390_p4 = {{tmp_data_1_V_reg_697[9:6]}};

assign trunc_ln718_1_fu_191_p1 = data_V_data_1_V_dout[4:0];

assign trunc_ln718_2_fu_223_p1 = data_V_data_2_V_dout[4:0];

assign trunc_ln718_3_fu_255_p1 = data_V_data_3_V_dout[4:0];

assign trunc_ln718_fu_159_p1 = data_V_data_0_V_dout[4:0];

assign trunc_ln_fu_292_p4 = {{tmp_data_0_V_reg_688[9:6]}};

assign xor_ln416_1_fu_449_p2 = (tmp_53_fu_441_p3 ^ 1'd1);

assign xor_ln416_2_fu_547_p2 = (tmp_57_fu_539_p3 ^ 1'd1);

assign xor_ln416_3_fu_645_p2 = (tmp_61_fu_637_p3 ^ 1'd1);

assign xor_ln416_fu_351_p2 = (tmp_49_fu_343_p3 ^ 1'd1);

assign zext_ln415_1_fu_431_p1 = and_ln415_1_fu_425_p2;

assign zext_ln415_2_fu_529_p1 = and_ln415_2_fu_523_p2;

assign zext_ln415_3_fu_627_p1 = and_ln415_3_fu_621_p2;

assign zext_ln415_fu_333_p1 = and_ln415_fu_327_p2;

endmodule //relu_array_ap_fixed_4u_array_ap_ufixed_4_0_4_0_0_4u_relu_config8_s
