-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc58 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_1_proc58 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv9_1BF : STD_LOGIC_VECTOR (8 downto 0) := "110111111";
    constant ap_const_lv448_lc_1 : STD_LOGIC_VECTOR (447 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln20_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1326 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_fu_443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1334 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal in_data_tmp_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln556_fu_775_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_1345 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Result_s_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_1355 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_797_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1360 : STD_LOGIC_VECTOR (51 downto 0);
    signal man_V_2_fu_821_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1365 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln571_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_857_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1382 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1389 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_871_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln585_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_reg_1411 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1416 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_982_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_reg_1427 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_902_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_reg_1432 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_ln603_2_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1437 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1027_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_2_reg_1442 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shl_ln_fu_1033_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_1447 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_83_fu_1041_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_83_reg_1453 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln203_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1458 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_1053_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_reg_1465 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_1_fu_1067_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_1_reg_1470 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln203_fu_1104_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln203_reg_1475 : STD_LOGIC_VECTOR (447 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal and_ln203_fu_1122_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal and_ln203_reg_1481 : STD_LOGIC_VECTOR (447 downto 0);
    signal i_0_i_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_0_i_reg_399 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln17_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal is_last_1_fu_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctype_data_V_fu_204 : STD_LOGIC_VECTOR (447 downto 0);
    signal ctype_data_V_1_fu_1159_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_804_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_9_fu_811_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_815_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln461_fu_801_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_833_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_845_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_851_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_902_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_918_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln571_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_1_fu_1009_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln604_fu_1015_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_1012_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_fu_1020_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_fu_1059_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln603_3_fu_1073_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_2_fu_1088_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_1_fu_1083_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_fu_1079_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln203_1_fu_1093_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln203_2_fu_1097_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal zext_ln203_3_fu_1101_p1 : STD_LOGIC_VECTOR (447 downto 0);
    signal shl_ln203_1_fu_1110_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal lshr_ln203_fu_1116_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal tmp_6_fu_1128_p4 : STD_LOGIC_VECTOR (447 downto 0);
    signal xor_ln203_fu_1143_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal select_ln203_3_fu_1137_p3 : STD_LOGIC_VECTOR (447 downto 0);
    signal and_ln203_1_fu_1148_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal and_ln203_2_fu_1154_p2 : STD_LOGIC_VECTOR (447 downto 0);
    signal grp_fu_411_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_in_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_in_data_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_U_ack_in : STD_LOGIC;

    component myproject_axi_fpext_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myproject_axi_ashr_54ns_32ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_axi_fpext_32ns_64_3_1_U1 : component myproject_axi_fpext_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r_TDATA_int,
        ce => grp_fu_411_ce,
        dout => grp_fu_411_p1);

    myproject_axi_ashr_54ns_32ns_54_2_1_U2 : component myproject_axi_ashr_54ns_32ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => man_V_2_reg_1365,
        din1 => grp_fu_902_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_902_p2);

    regslice_both_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_last_V_U_apdone_blk);

    regslice_both_in_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => regslice_both_in_data_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_425_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_388 <= i_reg_1326;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_388 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    is_last_1_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                is_last_1_fu_200 <= is_last_fu_458_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                is_last_1_fu_200 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_i_reg_399 <= j_reg_1334;
            elsif (((icmp_ln17_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_reg_399 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                and_ln203_reg_1481 <= and_ln203_fu_1122_p2;
                shl_ln203_reg_1475 <= shl_ln203_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                and_ln585_reg_1411 <= and_ln585_fu_947_p2;
                and_ln603_reg_1416 <= and_ln603_fu_970_p2;
                or_ln603_reg_1421 <= or_ln603_fu_976_p2;
                select_ln603_1_reg_1427 <= select_ln603_1_fu_982_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ashr_ln586_reg_1432 <= grp_fu_902_p2;
                or_ln603_2_reg_1437 <= or_ln603_2_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ctype_data_V_fu_204 <= ctype_data_V_1_fu_1159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    empty_83_reg_1453(8 downto 4) <= empty_83_fu_1041_p2(8 downto 4);
                icmp_ln203_reg_1458 <= icmp_ln203_fu_1047_p2;
                    shl_ln_reg_1447(8 downto 4) <= shl_ln_fu_1033_p3(8 downto 4);
                sub_ln203_1_reg_1470 <= sub_ln203_1_fu_1067_p2;
                    sub_ln203_reg_1465(8 downto 4) <= sub_ln203_fu_1053_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                exp_tmp_V_reg_1355 <= ireg_V_fu_771_p1(62 downto 52);
                p_Result_s_reg_1350 <= ireg_V_fu_771_p1(63 downto 63);
                trunc_ln556_reg_1345 <= trunc_ln556_fu_775_p1;
                trunc_ln565_reg_1360 <= trunc_ln565_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1326 <= i_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln571_reg_1370 <= icmp_ln571_fu_828_p2;
                icmp_ln581_reg_1376 <= icmp_ln581_fu_839_p2;
                icmp_ln582_reg_1389 <= icmp_ln582_fu_865_p2;
                man_V_2_reg_1365 <= man_V_2_fu_821_p3;
                sh_amt_reg_1382 <= sh_amt_fu_857_p3;
                tmp_4_reg_1401 <= sh_amt_fu_857_p3(11 downto 4);
                trunc_ln583_reg_1395 <= trunc_ln583_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                in_data_tmp_reg_1339 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_reg_1334 <= j_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln603_2_reg_1437 = ap_const_lv1_1))) then
                select_ln603_2_reg_1442 <= select_ln603_2_fu_1027_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_1447(3 downto 0) <= "0000";
    empty_83_reg_1453(3 downto 0) <= "1111";
    sub_ln203_reg_1465(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln20_fu_437_p2, ap_CS_fsm_state2, icmp_ln17_fu_425_p2, in_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    F2_fu_833_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_801_p1));
    add_ln581_fu_845_p2 <= std_logic_vector(signed(ap_const_lv12_FF6) + signed(F2_fu_833_p2));
    and_ln203_1_fu_1148_p2 <= (xor_ln203_fu_1143_p2 and ctype_data_V_fu_204);
    and_ln203_2_fu_1154_p2 <= (select_ln203_3_fu_1137_p3 and and_ln203_reg_1481);
    and_ln203_fu_1122_p2 <= (shl_ln203_1_fu_1110_p2 and lshr_ln203_fu_1116_p2);
    and_ln581_fu_936_p2 <= (xor_ln582_fu_930_p2 and icmp_ln581_reg_1376);
    and_ln582_fu_994_p2 <= (xor_ln571_fu_989_p2 and icmp_ln582_reg_1389);
    and_ln585_1_fu_953_p2 <= (icmp_ln585_fu_888_p2 and and_ln581_fu_936_p2);
    and_ln585_fu_947_p2 <= (xor_ln585_fu_941_p2 and and_ln581_fu_936_p2);
    and_ln603_fu_970_p2 <= (xor_ln581_fu_964_p2 and icmp_ln603_fu_893_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(icmp_ln20_fu_437_p2, in_r_TVALID_int)
    begin
                ap_block_state3 <= ((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln17_fu_425_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_425_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_425_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_425_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= is_last_1_fu_200;
    bitcast_ln696_fu_907_p1 <= in_data_tmp_reg_1339;
    ctype_data_V_1_fu_1159_p2 <= (and_ln203_2_fu_1154_p2 or and_ln203_1_fu_1148_p2);
    empty_83_fu_1041_p2 <= (shl_ln_fu_1033_p3 or ap_const_lv9_F);

    grp_fu_411_ce_assign_proc : process(ap_CS_fsm_state3, icmp_ln20_fu_437_p2, ap_CS_fsm_state5, ap_CS_fsm_state4, in_r_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_411_ce <= ap_const_logic_1;
        else 
            grp_fu_411_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_885_p1),54));
    i_fu_431_p2 <= std_logic_vector(unsigned(i_0_i_reg_388) + unsigned(ap_const_lv5_1));
    icmp_ln17_fu_425_p2 <= "1" when (i_0_i_reg_388 = ap_const_lv5_1C) else "0";
    icmp_ln203_fu_1047_p2 <= "1" when (unsigned(shl_ln_fu_1033_p3) > unsigned(empty_83_fu_1041_p2)) else "0";
    icmp_ln20_fu_437_p2 <= "1" when (j_0_i_reg_399 = ap_const_lv5_1C) else "0";
    icmp_ln571_fu_828_p2 <= "1" when (trunc_ln556_reg_1345 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_839_p2 <= "1" when (signed(F2_fu_833_p2) > signed(ap_const_lv12_A)) else "0";
    icmp_ln582_fu_865_p2 <= "1" when (F2_fu_833_p2 = ap_const_lv12_A) else "0";
    icmp_ln585_fu_888_p2 <= "1" when (unsigned(sh_amt_reg_1382) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_893_p2 <= "1" when (tmp_4_reg_1401 = ap_const_lv8_0) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln20_fu_437_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_last_V_U_ack_in)
    begin
        if (((regslice_both_in_last_V_U_ack_in = ap_const_logic_1) and (in_r_TVALID = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln20_fu_437_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln20_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_771_p1 <= grp_fu_411_p1;
    is_last_fu_458_p2 <= (is_last_1_fu_200 or in_r_TLAST_int);
    j_fu_443_p2 <= std_logic_vector(unsigned(j_0_i_reg_399) + unsigned(ap_const_lv5_1));
    lshr_ln203_fu_1116_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv448_lc_1),to_integer(unsigned('0' & zext_ln203_3_fu_1101_p1(31-1 downto 0)))));
    man_V_1_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_9_fu_811_p1));
    man_V_2_fu_821_p3 <= 
        man_V_1_fu_815_p2 when (p_Result_s_reg_1350(0) = '1') else 
        p_Result_9_fu_811_p1;
    or_ln581_fu_959_p2 <= (or_ln582_fu_926_p2 or icmp_ln581_reg_1376);
    or_ln582_fu_926_p2 <= (icmp_ln582_reg_1389 or icmp_ln571_reg_1370);
    or_ln603_1_fu_999_p2 <= (and_ln585_reg_1411 or and_ln582_fu_994_p2);
    or_ln603_2_fu_1004_p2 <= (or_ln603_reg_1421 or or_ln603_1_fu_999_p2);
    or_ln603_fu_976_p2 <= (and_ln603_fu_970_p2 or and_ln585_1_fu_953_p2);
    p_Result_9_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_804_p3),54));
    select_ln203_1_fu_1083_p3 <= 
        empty_83_reg_1453 when (icmp_ln203_reg_1458(0) = '1') else 
        shl_ln_reg_1447;
    select_ln203_2_fu_1088_p3 <= 
        sub_ln203_reg_1465 when (icmp_ln203_reg_1458(0) = '1') else 
        shl_ln_reg_1447;
    select_ln203_3_fu_1137_p3 <= 
        tmp_6_fu_1128_p4 when (icmp_ln203_reg_1458(0) = '1') else 
        shl_ln203_reg_1475;
    select_ln203_fu_1059_p3 <= 
        shl_ln_fu_1033_p3 when (icmp_ln203_fu_1047_p2(0) = '1') else 
        empty_83_fu_1041_p2;
    select_ln588_fu_918_p3 <= 
        ap_const_lv16_FFFF when (tmp_5_fu_910_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_982_p3 <= 
        select_ln588_fu_918_p3 when (and_ln585_fu_947_p2(0) = '1') else 
        trunc_ln583_reg_1395;
    select_ln603_2_fu_1027_p3 <= 
        select_ln603_fu_1020_p3 when (or_ln603_reg_1421(0) = '1') else 
        select_ln603_1_reg_1427;
    select_ln603_3_fu_1073_p3 <= 
        select_ln603_2_reg_1442 when (or_ln603_2_reg_1437(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_fu_1020_p3 <= 
        shl_ln604_fu_1015_p2 when (and_ln603_reg_1416(0) = '1') else 
        trunc_ln586_fu_1012_p1;
        sext_ln581_1_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1382),16));

        sext_ln581_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1382),32));

    sh_amt_fu_857_p3 <= 
        add_ln581_fu_845_p2 when (icmp_ln581_fu_839_p2(0) = '1') else 
        sub_ln581_fu_851_p2;
    shl_ln203_1_fu_1110_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv448_lc_1),to_integer(unsigned('0' & zext_ln203_2_fu_1097_p1(31-1 downto 0)))));
    shl_ln203_fu_1104_p2 <= std_logic_vector(shift_left(unsigned(zext_ln203_fu_1079_p1),to_integer(unsigned('0' & zext_ln203_1_fu_1093_p1(31-1 downto 0)))));
    shl_ln604_fu_1015_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1395),to_integer(unsigned('0' & sext_ln581_1_fu_1009_p1(16-1 downto 0)))));
    shl_ln_fu_1033_p3 <= (j_0_i_reg_399 & ap_const_lv4_0);
    sub_ln203_1_fu_1067_p2 <= std_logic_vector(signed(ap_const_lv9_1BF) - signed(select_ln203_fu_1059_p3));
    sub_ln203_fu_1053_p2 <= std_logic_vector(signed(ap_const_lv9_1BF) - signed(shl_ln_fu_1033_p3));
    sub_ln581_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(F2_fu_833_p2));
    tmp_5_fu_910_p3 <= bitcast_ln696_fu_907_p1(31 downto 31);
    
    tmp_6_fu_1128_p4_proc : process(shl_ln203_reg_1475)
    variable vlo_cpy : STD_LOGIC_VECTOR(448+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(448+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(448 - 1 downto 0);
    variable tmp_6_fu_1128_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(448 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(448 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(448 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1BF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := shl_ln203_reg_1475;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(448-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(448-1-unsigned(ap_const_lv32_1BF(9-1 downto 0)));
            for tmp_6_fu_1128_p4_i in 0 to 448-1 loop
                v0_cpy(tmp_6_fu_1128_p4_i) := shl_ln203_reg_1475(448-1-tmp_6_fu_1128_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(448-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_1128_p4 <= resvalue(448-1 downto 0);
    end process;

    tmp_s_fu_804_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1360);
    trunc_ln556_fu_775_p1 <= ireg_V_fu_771_p1(63 - 1 downto 0);
    trunc_ln565_fu_797_p1 <= ireg_V_fu_771_p1(52 - 1 downto 0);
    trunc_ln583_fu_871_p1 <= man_V_2_fu_821_p3(16 - 1 downto 0);
    trunc_ln586_fu_1012_p1 <= ashr_ln586_reg_1432(16 - 1 downto 0);
    xor_ln203_fu_1143_p2 <= (ap_const_lv448_lc_1 xor and_ln203_reg_1481);
    xor_ln571_fu_989_p2 <= (icmp_ln571_reg_1370 xor ap_const_lv1_1);
    xor_ln581_fu_964_p2 <= (or_ln581_fu_959_p2 xor ap_const_lv1_1);
    xor_ln582_fu_930_p2 <= (or_ln582_fu_926_p2 xor ap_const_lv1_1);
    xor_ln585_fu_941_p2 <= (icmp_ln585_fu_888_p2 xor ap_const_lv1_1);
    zext_ln203_1_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_2_fu_1088_p3),448));
    zext_ln203_2_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_1_fu_1083_p3),448));
    zext_ln203_3_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_1_reg_1470),448));
    zext_ln203_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln603_3_fu_1073_p3),448));
    zext_ln461_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1355),12));
end behav;
