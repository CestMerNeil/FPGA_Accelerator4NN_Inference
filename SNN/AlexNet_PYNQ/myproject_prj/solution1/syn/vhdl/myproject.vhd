-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer6_out_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_0_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_0_V_write : OUT STD_LOGIC;
    layer6_out_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_1_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_1_V_write : OUT STD_LOGIC;
    layer6_out_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_2_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_2_V_write : OUT STD_LOGIC;
    layer6_out_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_3_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_3_V_write : OUT STD_LOGIC;
    layer6_out_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_4_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_4_V_write : OUT STD_LOGIC;
    layer6_out_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_5_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_5_V_write : OUT STD_LOGIC;
    layer6_out_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_6_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_6_V_write : OUT STD_LOGIC;
    layer6_out_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_7_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_7_V_write : OUT STD_LOGIC;
    layer6_out_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_8_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_8_V_write : OUT STD_LOGIC;
    layer6_out_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer6_out_V_data_9_V_full_n : IN STD_LOGIC;
    layer6_out_V_data_9_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of myproject is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_start : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_done : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_continue : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_idle : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_ready : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_write : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_start_full_n : STD_LOGIC;
    signal dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_start_write : STD_LOGIC;

    component dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_0_V_full_n : IN STD_LOGIC;
        res_stream_V_data_0_V_write : OUT STD_LOGIC;
        res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_1_V_full_n : IN STD_LOGIC;
        res_stream_V_data_1_V_write : OUT STD_LOGIC;
        res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_2_V_full_n : IN STD_LOGIC;
        res_stream_V_data_2_V_write : OUT STD_LOGIC;
        res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_3_V_full_n : IN STD_LOGIC;
        res_stream_V_data_3_V_write : OUT STD_LOGIC;
        res_stream_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_4_V_full_n : IN STD_LOGIC;
        res_stream_V_data_4_V_write : OUT STD_LOGIC;
        res_stream_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_5_V_full_n : IN STD_LOGIC;
        res_stream_V_data_5_V_write : OUT STD_LOGIC;
        res_stream_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_6_V_full_n : IN STD_LOGIC;
        res_stream_V_data_6_V_write : OUT STD_LOGIC;
        res_stream_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_7_V_full_n : IN STD_LOGIC;
        res_stream_V_data_7_V_write : OUT STD_LOGIC;
        res_stream_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_8_V_full_n : IN STD_LOGIC;
        res_stream_V_data_8_V_write : OUT STD_LOGIC;
        res_stream_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_9_V_full_n : IN STD_LOGIC;
        res_stream_V_data_9_V_write : OUT STD_LOGIC );
    end component;



begin
    dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0 : component dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_start,
        ap_done => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_done,
        ap_continue => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_continue,
        ap_idle => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_idle,
        ap_ready => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_ready,
        res_stream_V_data_0_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n => layer6_out_V_data_0_V_full_n,
        res_stream_V_data_0_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n => layer6_out_V_data_1_V_full_n,
        res_stream_V_data_1_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n => layer6_out_V_data_2_V_full_n,
        res_stream_V_data_2_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n => layer6_out_V_data_3_V_full_n,
        res_stream_V_data_3_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n => layer6_out_V_data_4_V_full_n,
        res_stream_V_data_4_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n => layer6_out_V_data_5_V_full_n,
        res_stream_V_data_5_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n => layer6_out_V_data_6_V_full_n,
        res_stream_V_data_6_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n => layer6_out_V_data_7_V_full_n,
        res_stream_V_data_7_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n => layer6_out_V_data_8_V_full_n,
        res_stream_V_data_8_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n => layer6_out_V_data_9_V_full_n,
        res_stream_V_data_9_V_write => dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_write);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_done;
    ap_idle <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_idle;
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_done;
    ap_sync_ready <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_ready;
    dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_continue <= ap_continue;
    dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_ap_start <= real_start;
    dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_start_full_n <= ap_const_logic_1;
    dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_start_write <= ap_const_logic_0;
    internal_ap_ready <= ap_sync_ready;
    layer6_out_V_data_0_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_din;
    layer6_out_V_data_0_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_0_V_write;
    layer6_out_V_data_1_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_din;
    layer6_out_V_data_1_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_1_V_write;
    layer6_out_V_data_2_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_din;
    layer6_out_V_data_2_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_2_V_write;
    layer6_out_V_data_3_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_din;
    layer6_out_V_data_3_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_3_V_write;
    layer6_out_V_data_4_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_din;
    layer6_out_V_data_4_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_4_V_write;
    layer6_out_V_data_5_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_din;
    layer6_out_V_data_5_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_5_V_write;
    layer6_out_V_data_6_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_din;
    layer6_out_V_data_6_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_6_V_write;
    layer6_out_V_data_7_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_din;
    layer6_out_V_data_7_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_7_V_write;
    layer6_out_V_data_8_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_din;
    layer6_out_V_data_8_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_8_V_write;
    layer6_out_V_data_9_V_din <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_din;
    layer6_out_V_data_9_V_write <= dense_array_ap_fixed_784u_array_ap_fixed_16_6_5_3_0_10u_config6_U0_res_stream_V_data_9_V_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
