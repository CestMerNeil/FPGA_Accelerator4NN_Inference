// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc58 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_r_TLAST,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TDATA,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] in_r_TLAST;
input   in_r_TVALID;
output   in_r_TREADY;
input  [31:0] in_r_TDATA;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln20_fu_437_p2;
wire   [4:0] i_fu_431_p2;
reg   [4:0] i_reg_1326;
wire    ap_CS_fsm_state2;
wire   [4:0] j_fu_443_p2;
reg   [4:0] j_reg_1334;
reg    ap_block_state3;
reg   [31:0] in_data_tmp_reg_1339;
wire   [62:0] trunc_ln556_fu_775_p1;
reg   [62:0] trunc_ln556_reg_1345;
wire    ap_CS_fsm_state5;
reg   [0:0] p_Result_s_reg_1350;
reg   [10:0] exp_tmp_V_reg_1355;
wire   [51:0] trunc_ln565_fu_797_p1;
reg   [51:0] trunc_ln565_reg_1360;
wire   [53:0] man_V_2_fu_821_p3;
reg   [53:0] man_V_2_reg_1365;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln571_fu_828_p2;
reg   [0:0] icmp_ln571_reg_1370;
wire   [0:0] icmp_ln581_fu_839_p2;
reg   [0:0] icmp_ln581_reg_1376;
wire  signed [11:0] sh_amt_fu_857_p3;
reg  signed [11:0] sh_amt_reg_1382;
wire   [0:0] icmp_ln582_fu_865_p2;
reg   [0:0] icmp_ln582_reg_1389;
wire   [15:0] trunc_ln583_fu_871_p1;
reg   [15:0] trunc_ln583_reg_1395;
reg   [7:0] tmp_4_reg_1401;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln585_fu_947_p2;
reg   [0:0] and_ln585_reg_1411;
wire   [0:0] and_ln603_fu_970_p2;
reg   [0:0] and_ln603_reg_1416;
wire   [0:0] or_ln603_fu_976_p2;
reg   [0:0] or_ln603_reg_1421;
wire   [15:0] select_ln603_1_fu_982_p3;
reg   [15:0] select_ln603_1_reg_1427;
wire   [53:0] grp_fu_902_p2;
reg   [53:0] ashr_ln586_reg_1432;
wire    ap_CS_fsm_state8;
wire   [0:0] or_ln603_2_fu_1004_p2;
reg   [0:0] or_ln603_2_reg_1437;
wire   [15:0] select_ln603_2_fu_1027_p3;
reg   [15:0] select_ln603_2_reg_1442;
wire    ap_CS_fsm_state9;
wire   [8:0] shl_ln_fu_1033_p3;
reg   [8:0] shl_ln_reg_1447;
wire   [8:0] empty_83_fu_1041_p2;
reg   [8:0] empty_83_reg_1453;
wire   [0:0] icmp_ln203_fu_1047_p2;
reg   [0:0] icmp_ln203_reg_1458;
wire   [8:0] sub_ln203_fu_1053_p2;
reg   [8:0] sub_ln203_reg_1465;
wire   [8:0] sub_ln203_1_fu_1067_p2;
reg   [8:0] sub_ln203_1_reg_1470;
wire   [447:0] shl_ln203_fu_1104_p2;
reg   [447:0] shl_ln203_reg_1475;
wire    ap_CS_fsm_state10;
wire   [447:0] and_ln203_fu_1122_p2;
reg   [447:0] and_ln203_reg_1481;
reg   [4:0] i_0_i_reg_388;
reg    ap_block_state1;
reg   [4:0] j_0_i_reg_399;
wire   [0:0] icmp_ln17_fu_425_p2;
wire    ap_CS_fsm_state11;
reg   [0:0] is_last_1_fu_200;
wire   [0:0] is_last_fu_458_p2;
reg   [447:0] ctype_data_V_fu_204;
wire   [447:0] ctype_data_V_1_fu_1159_p2;
wire   [63:0] grp_fu_411_p1;
wire   [63:0] ireg_V_fu_771_p1;
wire   [52:0] tmp_s_fu_804_p3;
wire   [53:0] p_Result_9_fu_811_p1;
wire   [53:0] man_V_1_fu_815_p2;
wire   [11:0] zext_ln461_fu_801_p1;
wire   [11:0] F2_fu_833_p2;
wire   [11:0] add_ln581_fu_845_p2;
wire   [11:0] sub_ln581_fu_851_p2;
wire  signed [31:0] sext_ln581_fu_885_p1;
wire   [53:0] grp_fu_902_p1;
wire   [31:0] bitcast_ln696_fu_907_p1;
wire   [0:0] tmp_5_fu_910_p3;
wire   [0:0] or_ln582_fu_926_p2;
wire   [0:0] xor_ln582_fu_930_p2;
wire   [0:0] icmp_ln585_fu_888_p2;
wire   [0:0] and_ln581_fu_936_p2;
wire   [0:0] xor_ln585_fu_941_p2;
wire   [0:0] or_ln581_fu_959_p2;
wire   [0:0] icmp_ln603_fu_893_p2;
wire   [0:0] xor_ln581_fu_964_p2;
wire   [0:0] and_ln585_1_fu_953_p2;
wire   [15:0] select_ln588_fu_918_p3;
wire   [0:0] xor_ln571_fu_989_p2;
wire   [0:0] and_ln582_fu_994_p2;
wire   [0:0] or_ln603_1_fu_999_p2;
wire  signed [15:0] sext_ln581_1_fu_1009_p1;
wire   [15:0] shl_ln604_fu_1015_p2;
wire   [15:0] trunc_ln586_fu_1012_p1;
wire   [15:0] select_ln603_fu_1020_p3;
wire   [8:0] select_ln203_fu_1059_p3;
wire   [15:0] select_ln603_3_fu_1073_p3;
wire   [8:0] select_ln203_2_fu_1088_p3;
wire   [8:0] select_ln203_1_fu_1083_p3;
wire   [447:0] zext_ln203_fu_1079_p1;
wire   [447:0] zext_ln203_1_fu_1093_p1;
wire   [447:0] zext_ln203_2_fu_1097_p1;
wire   [447:0] zext_ln203_3_fu_1101_p1;
wire   [447:0] shl_ln203_1_fu_1110_p2;
wire   [447:0] lshr_ln203_fu_1116_p2;
reg   [447:0] tmp_6_fu_1128_p4;
wire   [447:0] xor_ln203_fu_1143_p2;
wire   [447:0] select_ln203_3_fu_1137_p3;
wire   [447:0] and_ln203_1_fu_1148_p2;
wire   [447:0] and_ln203_2_fu_1154_p2;
reg    grp_fu_411_ce;
wire    ap_CS_fsm_state4;
reg   [10:0] ap_NS_fsm;
wire    regslice_both_in_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_last_V_U_ack_in;
wire    regslice_both_in_data_U_apdone_blk;
wire   [31:0] in_r_TDATA_int;
wire    regslice_both_in_data_U_vld_out;
wire    regslice_both_in_data_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

myproject_axi_fpext_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_TDATA_int),
    .ce(grp_fu_411_ce),
    .dout(grp_fu_411_p1)
);

myproject_axi_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
myproject_axi_ashr_54ns_32ns_54_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(man_V_2_reg_1365),
    .din1(grp_fu_902_p1),
    .ce(1'b1),
    .dout(grp_fu_902_p2)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(regslice_both_in_data_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_425_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_388 <= i_reg_1326;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_388 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        is_last_1_fu_200 <= is_last_fu_458_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_1_fu_200 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_0_i_reg_399 <= j_reg_1334;
    end else if (((icmp_ln17_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_reg_399 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln203_reg_1481 <= and_ln203_fu_1122_p2;
        shl_ln203_reg_1475 <= shl_ln203_fu_1104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln585_reg_1411 <= and_ln585_fu_947_p2;
        and_ln603_reg_1416 <= and_ln603_fu_970_p2;
        or_ln603_reg_1421 <= or_ln603_fu_976_p2;
        select_ln603_1_reg_1427 <= select_ln603_1_fu_982_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ashr_ln586_reg_1432 <= grp_fu_902_p2;
        or_ln603_2_reg_1437 <= or_ln603_2_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ctype_data_V_fu_204 <= ctype_data_V_1_fu_1159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_83_reg_1453[8 : 4] <= empty_83_fu_1041_p2[8 : 4];
        icmp_ln203_reg_1458 <= icmp_ln203_fu_1047_p2;
        shl_ln_reg_1447[8 : 4] <= shl_ln_fu_1033_p3[8 : 4];
        sub_ln203_1_reg_1470 <= sub_ln203_1_fu_1067_p2;
        sub_ln203_reg_1465[8 : 4] <= sub_ln203_fu_1053_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_tmp_V_reg_1355 <= {{ireg_V_fu_771_p1[62:52]}};
        p_Result_s_reg_1350 <= ireg_V_fu_771_p1[32'd63];
        trunc_ln556_reg_1345 <= trunc_ln556_fu_775_p1;
        trunc_ln565_reg_1360 <= trunc_ln565_fu_797_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1326 <= i_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln571_reg_1370 <= icmp_ln571_fu_828_p2;
        icmp_ln581_reg_1376 <= icmp_ln581_fu_839_p2;
        icmp_ln582_reg_1389 <= icmp_ln582_fu_865_p2;
        man_V_2_reg_1365 <= man_V_2_fu_821_p3;
        sh_amt_reg_1382 <= sh_amt_fu_857_p3;
        tmp_4_reg_1401 <= {{sh_amt_fu_857_p3[11:4]}};
        trunc_ln583_reg_1395 <= trunc_ln583_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_data_tmp_reg_1339 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_1334 <= j_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (or_ln603_2_reg_1437 == 1'd1))) begin
        select_ln603_2_reg_1442 <= select_ln603_2_fu_1027_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_425_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_425_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_411_ce = 1'b1;
    end else begin
        grp_fu_411_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_last_V_U_ack_in == 1'b1) & (in_r_TVALID == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln17_fu_425_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln20_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_833_p2 = (12'd1075 - zext_ln461_fu_801_p1);

assign add_ln581_fu_845_p2 = ($signed(12'd4086) + $signed(F2_fu_833_p2));

assign and_ln203_1_fu_1148_p2 = (xor_ln203_fu_1143_p2 & ctype_data_V_fu_204);

assign and_ln203_2_fu_1154_p2 = (select_ln203_3_fu_1137_p3 & and_ln203_reg_1481);

assign and_ln203_fu_1122_p2 = (shl_ln203_1_fu_1110_p2 & lshr_ln203_fu_1116_p2);

assign and_ln581_fu_936_p2 = (xor_ln582_fu_930_p2 & icmp_ln581_reg_1376);

assign and_ln582_fu_994_p2 = (xor_ln571_fu_989_p2 & icmp_ln582_reg_1389);

assign and_ln585_1_fu_953_p2 = (icmp_ln585_fu_888_p2 & and_ln581_fu_936_p2);

assign and_ln585_fu_947_p2 = (xor_ln585_fu_941_p2 & and_ln581_fu_936_p2);

assign and_ln603_fu_970_p2 = (xor_ln581_fu_964_p2 & icmp_ln603_fu_893_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln20_fu_437_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_return = is_last_1_fu_200;

assign bitcast_ln696_fu_907_p1 = in_data_tmp_reg_1339;

assign ctype_data_V_1_fu_1159_p2 = (and_ln203_2_fu_1154_p2 | and_ln203_1_fu_1148_p2);

assign empty_83_fu_1041_p2 = (shl_ln_fu_1033_p3 | 9'd15);

assign grp_fu_902_p1 = $unsigned(sext_ln581_fu_885_p1);

assign i_fu_431_p2 = (i_0_i_reg_388 + 5'd1);

assign icmp_ln17_fu_425_p2 = ((i_0_i_reg_388 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_1047_p2 = ((shl_ln_fu_1033_p3 > empty_83_fu_1041_p2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_437_p2 = ((j_0_i_reg_399 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_828_p2 = ((trunc_ln556_reg_1345 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_839_p2 = (($signed(F2_fu_833_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_865_p2 = ((F2_fu_833_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_888_p2 = ((sh_amt_reg_1382 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_893_p2 = ((tmp_4_reg_1401 == 8'd0) ? 1'b1 : 1'b0);

assign ireg_V_fu_771_p1 = grp_fu_411_p1;

assign is_last_fu_458_p2 = (is_last_1_fu_200 | in_r_TLAST_int);

assign j_fu_443_p2 = (j_0_i_reg_399 + 5'd1);

assign lshr_ln203_fu_1116_p2 = 448'd726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614655 >> zext_ln203_3_fu_1101_p1;

assign man_V_1_fu_815_p2 = (54'd0 - p_Result_9_fu_811_p1);

assign man_V_2_fu_821_p3 = ((p_Result_s_reg_1350[0:0] === 1'b1) ? man_V_1_fu_815_p2 : p_Result_9_fu_811_p1);

assign or_ln581_fu_959_p2 = (or_ln582_fu_926_p2 | icmp_ln581_reg_1376);

assign or_ln582_fu_926_p2 = (icmp_ln582_reg_1389 | icmp_ln571_reg_1370);

assign or_ln603_1_fu_999_p2 = (and_ln585_reg_1411 | and_ln582_fu_994_p2);

assign or_ln603_2_fu_1004_p2 = (or_ln603_reg_1421 | or_ln603_1_fu_999_p2);

assign or_ln603_fu_976_p2 = (and_ln603_fu_970_p2 | and_ln585_1_fu_953_p2);

assign p_Result_9_fu_811_p1 = tmp_s_fu_804_p3;

assign select_ln203_1_fu_1083_p3 = ((icmp_ln203_reg_1458[0:0] === 1'b1) ? empty_83_reg_1453 : shl_ln_reg_1447);

assign select_ln203_2_fu_1088_p3 = ((icmp_ln203_reg_1458[0:0] === 1'b1) ? sub_ln203_reg_1465 : shl_ln_reg_1447);

assign select_ln203_3_fu_1137_p3 = ((icmp_ln203_reg_1458[0:0] === 1'b1) ? tmp_6_fu_1128_p4 : shl_ln203_reg_1475);

assign select_ln203_fu_1059_p3 = ((icmp_ln203_fu_1047_p2[0:0] === 1'b1) ? shl_ln_fu_1033_p3 : empty_83_fu_1041_p2);

assign select_ln588_fu_918_p3 = ((tmp_5_fu_910_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_982_p3 = ((and_ln585_fu_947_p2[0:0] === 1'b1) ? select_ln588_fu_918_p3 : trunc_ln583_reg_1395);

assign select_ln603_2_fu_1027_p3 = ((or_ln603_reg_1421[0:0] === 1'b1) ? select_ln603_fu_1020_p3 : select_ln603_1_reg_1427);

assign select_ln603_3_fu_1073_p3 = ((or_ln603_2_reg_1437[0:0] === 1'b1) ? select_ln603_2_reg_1442 : 16'd0);

assign select_ln603_fu_1020_p3 = ((and_ln603_reg_1416[0:0] === 1'b1) ? shl_ln604_fu_1015_p2 : trunc_ln586_fu_1012_p1);

assign sext_ln581_1_fu_1009_p1 = sh_amt_reg_1382;

assign sext_ln581_fu_885_p1 = sh_amt_reg_1382;

assign sh_amt_fu_857_p3 = ((icmp_ln581_fu_839_p2[0:0] === 1'b1) ? add_ln581_fu_845_p2 : sub_ln581_fu_851_p2);

assign shl_ln203_1_fu_1110_p2 = 448'd726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614655 << zext_ln203_2_fu_1097_p1;

assign shl_ln203_fu_1104_p2 = zext_ln203_fu_1079_p1 << zext_ln203_1_fu_1093_p1;

assign shl_ln604_fu_1015_p2 = trunc_ln583_reg_1395 << sext_ln581_1_fu_1009_p1;

assign shl_ln_fu_1033_p3 = {{j_0_i_reg_399}, {4'd0}};

assign sub_ln203_1_fu_1067_p2 = ($signed(9'd447) - $signed(select_ln203_fu_1059_p3));

assign sub_ln203_fu_1053_p2 = ($signed(9'd447) - $signed(shl_ln_fu_1033_p3));

assign sub_ln581_fu_851_p2 = (12'd10 - F2_fu_833_p2);

assign tmp_5_fu_910_p3 = bitcast_ln696_fu_907_p1[32'd31];

integer ap_tvar_int_0;

always @ (shl_ln203_reg_1475) begin
    for (ap_tvar_int_0 = 448 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 447 - 0) begin
            tmp_6_fu_1128_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_6_fu_1128_p4[ap_tvar_int_0] = shl_ln203_reg_1475[447 - ap_tvar_int_0];
        end
    end
end

assign tmp_s_fu_804_p3 = {{1'd1}, {trunc_ln565_reg_1360}};

assign trunc_ln556_fu_775_p1 = ireg_V_fu_771_p1[62:0];

assign trunc_ln565_fu_797_p1 = ireg_V_fu_771_p1[51:0];

assign trunc_ln583_fu_871_p1 = man_V_2_fu_821_p3[15:0];

assign trunc_ln586_fu_1012_p1 = ashr_ln586_reg_1432[15:0];

assign xor_ln203_fu_1143_p2 = (448'd726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614655 ^ and_ln203_reg_1481);

assign xor_ln571_fu_989_p2 = (icmp_ln571_reg_1370 ^ 1'd1);

assign xor_ln581_fu_964_p2 = (or_ln581_fu_959_p2 ^ 1'd1);

assign xor_ln582_fu_930_p2 = (or_ln582_fu_926_p2 ^ 1'd1);

assign xor_ln585_fu_941_p2 = (icmp_ln585_fu_888_p2 ^ 1'd1);

assign zext_ln203_1_fu_1093_p1 = select_ln203_2_fu_1088_p3;

assign zext_ln203_2_fu_1097_p1 = select_ln203_1_fu_1083_p3;

assign zext_ln203_3_fu_1101_p1 = sub_ln203_1_reg_1470;

assign zext_ln203_fu_1079_p1 = select_ln603_3_fu_1073_p3;

assign zext_ln461_fu_801_p1 = exp_tmp_V_reg_1355;

always @ (posedge ap_clk) begin
    shl_ln_reg_1447[3:0] <= 4'b0000;
    empty_83_reg_1453[3:0] <= 4'b1111;
    sub_ln203_reg_1465[3:0] <= 4'b1111;
end

endmodule //Loop_1_proc58
